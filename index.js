// @ts-nocheck

/*************************************************************
 * 1) SECURITY & INPUT VALIDATION FUNCTIONS
 *************************************************************/

// Enhanced security: Server-side input sanitization to prevent XSS and injection attacks
function sanitizeServerInput(input) {
  if (typeof input !== 'string') return '';
  return input
    .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') // Remove script tags
    .replace(/<[^>]+>/g, '') // Remove all HTML tags
    .replace(/javascript:/gi, '') // Remove javascript: protocols
    .replace(/on\w+\s*=/gi, '') // Remove event handlers
    .replace(/[\x00-\x1F\x7F]/g, '') // Remove control characters
    .trim()
    .substring(0, 1000); // Limit length to prevent DoS
}

// Rate limiting and request validation
function validateRequest(body, requiredFields = []) {
  if (!body || typeof body !== 'object') {
    throw new Error('Invalid request body');
  }
  
  // Check for required fields
  for (const field of requiredFields) {
    if (!body[field] || typeof body[field] !== 'string' || !body[field].trim()) {
      throw new Error(`Missing or invalid required field: ${field}`);
    }
  }
  
  // Sanitize all string fields
  const sanitized = {};
  for (const [key, value] of Object.entries(body)) {
    if (typeof value === 'string') {
      sanitized[key] = sanitizeServerInput(value);
    } else if (typeof value === 'boolean' || typeof value === 'number') {
      sanitized[key] = value;
    }
  }
  
  return sanitized;
}

/*************************************************************
 * 2) ALL UTILITY & OPENAI FUNCTIONS
 *************************************************************/
async function generateHash(buffer) {
  const key = await crypto.subtle.importKey(
    "raw",
    new TextEncoder().encode("key"),
    { name: "HMAC", hash: { name: "SHA-256" } },
    false,
    ["sign"]
  );
  const signature = await crypto.subtle.sign("HMAC", key, buffer);
  return arrayBufferToBase64(signature);
}

function base64ToArrayBuffer(base64) {
  const sanitizedBase64 = base64.trim().replace(/[^A-Za-z0-9+/=]/g, "");
  if (
    sanitizedBase64.length % 4 !== 0 ||
    !/^[A-Za-z0-9+/]*={0,2}$/.test(sanitizedBase64)
  ) {
    throw new Error("Invalid base64 string provided.");
  }
  const binaryString = atob(sanitizedBase64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
}

function arrayBufferToBase64(buffer) {
  const uint8Array = new Uint8Array(buffer);
  let binary = "";
  uint8Array.forEach((byte) => {
    binary += String.fromCharCode(byte);
  });
  return btoa(binary);
}

/**
 * Retrieve OAuth token from Google, if needed.
 */
async function getOAuthToken(env) {
  const tokenUri = "https://oauth2.googleapis.com/token";
  const credentials = JSON.parse(env["Google-Service-Account-FINAL"]);
  const now = Math.floor(Date.now() / 1000);
  const jwtHeader = { alg: "RS256", typ: "JWT" };
  const jwtClaimSet = {
    iss: credentials.client_email,
    scope: "https://www.googleapis.com/auth/cloud-platform",
    aud: tokenUri,
    exp: now + 3600,
    iat: now,
  };
  const encodedHeader = btoa(JSON.stringify(jwtHeader));
  const encodedClaimSet = btoa(JSON.stringify(jwtClaimSet));
  let privateKey = credentials.private_key.trim();
  if (!privateKey.startsWith("-----BEGIN PRIVATE KEY-----")) {
    privateKey = "-----BEGIN PRIVATE KEY-----\n" + privateKey;
  }
  if (!privateKey.endsWith("-----END PRIVATE KEY-----")) {
    privateKey += "\n-----END PRIVATE KEY-----";
  }
  try {
    const keyData = privateKey.replace(/-----[^-]+-----|\n/g, "");
    const keyBytes = base64ToArrayBuffer(keyData);
    const key = await crypto.subtle.importKey(
      "pkcs8",
      keyBytes,
      { name: "RSASSA-PKCS1-v1_5", hash: { name: "SHA-256" } },
      false,
      ["sign"]
    );
    const payloadToSign = encodedHeader + "." + encodedClaimSet;
    const toSignBuffer = new TextEncoder().encode(payloadToSign);
    const signatureBuffer = await crypto.subtle.sign("RSASSA-PKCS1-v1_5", key, toSignBuffer);
    const signature = arrayBufferToBase64(signatureBuffer);
    const jwt = encodedHeader + "." + encodedClaimSet + "." + signature;
    const response = await fetch(tokenUri, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
        assertion: jwt,
      }).toString(),
    });
    if (!response.ok) {
      const errorText = await response.text();
      console.error("Failed to fetch OAuth token:", errorText);
      throw new Error("Failed to fetch OAuth token");
    }
    const data = await response.json();
    return data.access_token;
  } catch (error) {
    console.error("Error during OAuth token generation:", error);
    throw error;
  }
}

/**
 * Example call to Google Document AI or Vision API for PDF/Document analysis.
 */
async function callVisionAPI(buffer, token, endpoint) {
  try {
    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        rawDocument: {
          content: arrayBufferToBase64(buffer),
          mimeType: "application/pdf",
        },
      }),
    });
    if (!response.ok) {
      throw new Error(`Vision/Document AI call failed: ${response.statusText}`);
    }
    const jsonResponse = await response.json();
    if (!jsonResponse?.document?.text) {
      throw new Error("Invalid Document AI response format (no text).");
    }
    return jsonResponse;
  } catch (error) {
    console.error("Error in callVisionAPI:", error);
    throw error;
  }
}

/**
 * Cleans the extracted text.
 */
function preprocessText(text) {
  if (typeof text !== "string" || text.trim() === "") {
    console.error("Preprocessing failed. Input is invalid or empty:", text);
    return "";
  }
  return text
    .replace(/[^ -~]/g, " ")
    .replace(/[^\w\s]/g, "")
    .replace(/\s+/g, " ")
    .trim();
}

/**
 * Calls the OpenAI API for analyzing the user's text.
 */
async function analyzeTextWithOpenAI(text, apiKey, orgId, systemPrompt = null) {
  console.log('[analyzeTextWithOpenAI] Starting API call to OpenAI');
  console.log('[analyzeTextWithOpenAI] Text length:', text.length);
  console.log('[analyzeTextWithOpenAI] System prompt length:', systemPrompt?.length || 0);
  
  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${apiKey}`,
      "OpenAI-Organization": orgId,
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo", 
      messages: [
        {
          role: "system",
          content: systemPrompt || 
            `You are October7Assist, an AI focused on educating about the October 7th attacks in Israel, the hostages, and how to counter antisemitism. Provide concise summaries, cite credible sources like ADL or AJC, and offer actionable support steps.`
        },
        {
          role: "user",
          content: text
        }
      ],
      max_tokens: 2000,
    }),
  });
  
  if (!response.ok) {
    console.error('[analyzeTextWithOpenAI] OpenAI API error:', response.status, response.statusText);
    const errorText = await response.text();
    console.error('[analyzeTextWithOpenAI] Error details:', errorText);
    throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
  }
  
  const data = await response.json();
  
  if (data.error) {
    console.error('[analyzeTextWithOpenAI] OpenAI returned error:', data.error);
    throw new Error(`OpenAI API error: ${data.error.message || data.error}`);
  }
  
  if (data.choices?.[0]?.finish_reason === "length") {
    console.warn("Response truncated due to token limit.");
  }
  
  return data;
}

async function analyzeTextWithOpenAIStream(text, apiKey, orgId, systemPrompt = null) {
  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${apiKey}`,
      "OpenAI-Organization": orgId,
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: systemPrompt ||
            `You are October7Assist, an AI focused on educating about the October 7th attacks in Israel, the ongoing hostage crisis, and ways to combat antisemitism. Provide concise facts, cite credible sources such as ADL or AJC, and offer actionable guidance.`
        },
        {
          role: "user",
          content: text
        }
      ],
      max_tokens: 2000,
      stream: true
    }),
  });

  if (!response.ok) {
    const errorMessage = await response.text();
    console.error("OpenAI API request failed:", errorMessage);
    throw new Error("Failed to analyze text with OpenAI");
  }

  return response.body;
}

// Cache for the latest hostage count (1 hour TTL)
const HOSTAGE_TTL_MS = 60 * 60 * 1000; // 1 hour
const DEFAULT_HOSTAGE_COUNT = '50';
const HOSTAGE_CACHE = { total: DEFAULT_HOSTAGE_COUNT, citation: '', updated: 0 };
// Cache for the latest hostage news (30 min TTL)
const NEWS_TTL_MS = 30 * 60 * 1000; // 30 minutes
const NEWS_CACHE = { headline: '', url: '', updated: 0, items: [] };

function isCacheValid(cache, ttl) {
  return Date.now() - cache.updated < ttl && !!cache.updated;
}

async function fetchWithRetry(url, options = {}, retries = 3, backoff = 500) {
  let lastError;
  for (let attempt = 0; attempt < retries; attempt++) {
    try {
      const res = await fetch(url, options);
      if (res.ok) return res;
      lastError = new Error(`Request failed: ${res.status}`);
    } catch (err) {
      lastError = err;
    }
    await new Promise((r) => setTimeout(r, backoff * (attempt + 1)));
  }
  throw lastError;
}

// Fetch current hostage count using the Responses API with web_search
async function fetchHostageCountUsingWebSearch(apiKey, orgId) {
  const today = new Date().toISOString().slice(0, 10);
  const prompt = `As of ${today}, how many Israeli hostages remain in Gaza?\n  Provide the number and cite a source in Hebrew or English that is no more than 24 hours old.`;

  const res = await fetchWithRetry('https://api.openai.com/v1/responses', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${apiKey}`,
      'OpenAI-Organization': orgId
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      input: prompt,
      tools: [{ type: 'web_search' }]
    })
  });
  if (!res.ok) throw new Error(`OpenAI web search failed: ${res.status}`);
  const data = await res.json();
  if (!Array.isArray(data.output)) {
    return { error: 'Invalid API response' };
  }
  const assistantMsg = data.output.find(
    (item) => item.role === 'assistant' && item.content
  );
  if (!assistantMsg || !assistantMsg.content) {
    return { error: 'Invalid API response' };
  }
  try {
    const textSegments = assistantMsg.content.filter((seg) => seg.type === 'output_text');
    const answerText = textSegments.map((seg) => seg.text).join('\n');
    // Prefer the number that appears near the word "hostage" to avoid
    // accidentally picking a date (e.g. "July 22, 2024")
    let countMatch = answerText.match(/(\d+)\s*(?=\w*\s*(?:hostage|hostages|captives|captors))/i);
    if (!countMatch) {
      // Fallback: use the first number in the response
      countMatch = answerText.match(/\d+/);
    }
    const count = countMatch ? countMatch[1] : null;

    let citation = '';
    assistantMsg.content.forEach((seg) => {
      (seg.annotations || []).forEach((ann) => {
        if (ann.type === 'url_citation' && !citation) {
          citation = ann.url;
        }
      });
    });

    // Validate citation domain against known credible sources
    const credibleDomains = [
      'nytimes.com',
      'washingtonpost.com',
      'apnews.com',
      'reuters.com',
      'bbc.com',
      'cnn.com',
      'theguardian.com',
      'haaretz.com',
      'timesofisrael.com',
      'ynetnews.com',
      'jpost.com',
      'hostagesandmissingfamiliesforum.com',
      'familiesforum.com'
    ];

    let isCredible = false;
    try {
      const hostname = new URL(citation).hostname.replace(/^www\./, '');
      isCredible = credibleDomains.some((d) => hostname.endsWith(d));
    } catch {
      isCredible = false;
    }

    // Attempt to parse a date from the answer text
    let dateMatch = answerText.match(/(20\d{2}-\d{2}-\d{2})/);
    if (!dateMatch) {
      dateMatch = answerText.match(/(January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{1,2},\s+20\d{2}/i);
    }
    if (!dateMatch) {
      dateMatch = answerText.match(/\d{1,2}\s+(January|February|March|April|May|June|July|August|September|October|November|December)\s+20\d{2}/i);
    }
    let isRecent = false;
    if (dateMatch) {
      const parsedDate = new Date(dateMatch[0]);
      if (!isNaN(parsedDate.getTime())) {
        isRecent = Date.now() - parsedDate.getTime() < 24 * 60 * 60 * 1000;
      }
    }

    if (count && isCredible && isRecent) {
      return { count, citation };
    }
    return { error: 'Stale or unverified data' };
  } catch {
    return { error: 'Invalid API response' };
  }
}

// Fetch latest hostage negotiation headline using the Responses API with web_search
async function fetchLatestHostageNewsUsingWebSearch(apiKey, orgId, count = 1) {
  const plural = count && Number(count) > 1;
  const prompt = plural
    ? `Provide ${count} recent credible headlines about negotiations or updates on Israeli hostages in Gaza with source URLs. Respond strictly in JSON: {\"items\": [{\"headline\":\"...\",\"url\":\"...\"}]}`
    : 'Latest credible headline about negotiations or updates on Israeli hostages in Gaza.';
  const res = await fetchWithRetry('https://api.openai.com/v1/responses', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${apiKey}`,
      'OpenAI-Organization': orgId,
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      input: prompt,
      tools: [{ type: 'web_search' }],
    }),
  });
  if (!res.ok) throw new Error(`OpenAI web search failed: ${res.status}`);
  const data = await res.json();
  if (!Array.isArray(data.output)) {
    return { error: 'Invalid API response' };
  }
  const assistantMsg = data.output.find(
    (item) => item.role === 'assistant' && item.content
  );
  if (!assistantMsg || !assistantMsg.content) {
    return { error: 'Invalid API response' };
  }
  try {
    const textSegments = assistantMsg.content.filter((seg) => seg.type === 'output_text');
    const answerText = textSegments.map((seg) => seg.text).join('\n').trim();
    if (plural) {
      try {
        const obj = JSON.parse(answerText);
        if (Array.isArray(obj.items)) return { items: obj.items };
        if (Array.isArray(obj)) return { items: obj };
      } catch {}
      return { items: [] };
    }
    let citation = '';
    assistantMsg.content.forEach((seg) => {
      (seg.annotations || []).forEach((ann) => {
        if (ann.type === 'url_citation' && !citation) {
          citation = ann.url;
        }
      });
    });
    return { headline: answerText, url: citation };
  } catch {
    return { error: 'Invalid API response' };
  }
}

// Fetch latest hostage negotiation headline using OpenAI's browser tool
async function fetchLatestHostageNewsUsingBrowsing(apiKey, orgId) {
  const res = await fetchWithRetry('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${apiKey}`,
      'OpenAI-Organization': orgId
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      tools: [{ type: 'browser' }],
      tool_choice: 'auto',
      messages: [
        {
          role: 'system',
          content: 'You are a factual assistant. Use the browser tool to find the most recent credible headline about negotiations or updates on Israeli hostages in Gaza. Respond strictly in JSON with keys "headline" and "url".'
        },
        { role: 'user', content: 'Latest hostage negotiation news?' }
      ],
      max_tokens: 100
    })
  });
  if (!res.ok) throw new Error(`OpenAI request failed: ${res.status}`);
  const data = await res.json();
  const text = data.choices?.[0]?.message?.content || '';
  try {
    const obj = JSON.parse(text);
    return { headline: obj.headline || '', url: obj.url || '' };
  } catch {
    return { headline: text, url: '' };
  }
}

async function handleLatestHostageNewsRequest(env, count) {
  const now = Date.now();
  const wantMultiple = count && Number(count) > 1;
  // Serve cached single headline when valid
  if (!wantMultiple && isCacheValid(NEWS_CACHE, NEWS_TTL_MS) && NEWS_CACHE.headline) {
    return {
      headline: NEWS_CACHE.headline,
      url: NEWS_CACHE.url,
      fetched: new Date(NEWS_CACHE.updated).toISOString(),
    };
  }
  try {
    // Attempt to fetch using the web_search tool
    let news = await fetchLatestHostageNewsUsingWebSearch(
      env.OPEN_API_KEY_NEW,
      env.OPENAI_ORG_ID,
      count
    );
    // Normalize error responses to empty results
    if (news && news.error) {
      news = wantMultiple ? { items: [] } : { headline: '', url: '' };
    }

    // Handle multi-item responses
    if (wantMultiple) {
      let items = Array.isArray(news.items)
        ? news.items.filter((i) => i && i.headline)
        : [];
      // If not enough items, fall back to browsing until count unique items
      let attempts = 0;
      const maxAttempts = Number(count) * 2;
      while (items.length < Number(count) && attempts < maxAttempts) {
        const fallback = await fetchLatestHostageNewsUsingBrowsing(
          env.OPEN_API_KEY_NEW,
          env.OPENAI_ORG_ID
        );
        attempts++;
        if (fallback.headline && !items.some((it) => it.headline === fallback.headline)) {
          items.push({ headline: fallback.headline, url: fallback.url });
        }
      }
      if (items.length > 0) {
        NEWS_CACHE.items = items;
        NEWS_CACHE.updated = now;
        return { items, fetched: new Date(now).toISOString() };
      }
    } else {
      // Fallback for single item if web_search returned nothing
      if (!news || !news.headline) {
        const fallback = await fetchLatestHostageNewsUsingBrowsing(
          env.OPEN_API_KEY_NEW,
          env.OPENAI_ORG_ID
        );
        news = { headline: fallback.headline, url: fallback.url };
      }
      if (news && news.headline) {
        NEWS_CACHE.headline = news.headline;
        NEWS_CACHE.url = news.url;
        NEWS_CACHE.updated = now;
        return {
          headline: news.headline,
          url: news.url,
          fetched: new Date(now).toISOString(),
        };
      }
    }

    // Throw to trigger cache return on failure
    throw new Error('Empty response');
  } catch (err) {
    console.error('News fetch failed:', err);
    // Serve cached multi-item list
    if (wantMultiple && NEWS_CACHE.items && NEWS_CACHE.items.length) {
      return {
        items: NEWS_CACHE.items,
        fetched: new Date(NEWS_CACHE.updated).toISOString(),
        error: 'Serving cached news',
      };
    }
    // Serve cached single headline
    if (NEWS_CACHE.headline) {
      return {
        headline: NEWS_CACHE.headline,
        url: NEWS_CACHE.url,
        fetched: new Date(NEWS_CACHE.updated).toISOString(),
        error: 'Serving cached news',
      };
    }
    return wantMultiple
      ? { items: [], fetched: new Date(now).toISOString() }
      : { headline: '', url: '', fetched: new Date(now).toISOString() };
  }
}

/*************************************************************
 * 2) LOCATION & FILE UPLOAD HANDLERS
 *************************************************************/
function validateFile(file) {
  const allowedTypes = [
    'application/pdf',
    'text/plain',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  ];
  if (
    !file ||
    !allowedTypes.includes(file.type) ||
    file.size === 0 ||
    file.size > 10 * 1024 * 1024
  ) {
    console.error('File validation failed.');
    return false;
  }
  return true;
}
function renderAnalysisResponse(openAIResponse) {
  const content =
    openAIResponse?.choices?.[0]?.message?.content ??
    "No analysis returned – please try again.";

  return content
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/\n\n+/g, "<br><br>")
    .replace(/\n/g, "<br>");
}
async function handleFileUpload(request, env) {
  try {
    const contentType = request.headers.get("Content-Type") || "";
    if (!contentType.includes("multipart/form-data")) {
      return new Response(
        JSON.stringify({
          error: "Invalid Content-Type. Expected multipart/form-data.",
        }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }
    const formData = await request.formData();
    const file = formData.get("file");
    if (!validateFile(file)) {
      console.error("Invalid file. Please ensure it is a non-empty PDF (<10MB).");
      return new Response(
        JSON.stringify({
          error: "Invalid file. Please ensure it is a non-empty PDF <10MB.",
        }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }
    const arrayBuffer = await file.arrayBuffer();
    const hash = await generateHash(arrayBuffer);
    console.log("Generated Hash:", hash);
    const token = await getOAuthToken(env);
    if (!token) {
      return new Response(
        JSON.stringify({ error: "Failed to authenticate with Google APIs." }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }
    const endpoint = env.Google_Document_AI_Processor_Prediction_Endpoint;
    console.log("Document AI Endpoint:", endpoint);
    const visionResult = await callVisionAPI(arrayBuffer, token, endpoint);
    console.log("Vision API Response:", visionResult);
    if (visionResult?.error) {
      console.error("Document AI Error Response:", visionResult.error);
      return new Response(
        JSON.stringify({
          error: visionResult.error.message || "Document AI OCR failed.",
        }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }
    const rawText = visionResult?.document?.text;
    if (!rawText || typeof rawText !== "string") {
      console.error("No valid text found in Document AI response.");
      return new Response(
        JSON.stringify({ error: "No text extracted or invalid response format." }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }
    const preprocessed = preprocessText(rawText);
    console.log("Preprocessed Text:", preprocessed);
    const systemPrompt = "You are an AI expert in antisemitism education and document analysis. REFERENCE KEY FACTS: ADL recorded 10,000+ US antisemitic incidents (2023, highest on record), 337% global rise post-October 7th (AJC), educated communities 3x more effective at prevention. Provide educational summaries that include: 1) Key facts and statistics (include these base stats when relevant), 2) Historical context and significance, 3) Educational takeaways for different audiences (students, teachers, community leaders), 4) Actionable steps for combating antisemitism, 5) Relevant resources and citations. Focus on making complex content accessible for educational use.";
    const analyzedText = await analyzeTextWithOpenAI(
      preprocessed,
      env.OPEN_API_KEY_NEW,
      env.OPENAI_ORG_ID,
      systemPrompt
    );
    console.log("OpenAI Analysis Result:", analyzedText);
    const accept = request.headers.get("Accept") || "";
    if (accept.includes("application/json")) {
      return new Response(
        JSON.stringify({ analysis: analyzedText.choices?.[0]?.message?.content || "No analysis returned." }),
        { headers: { "Content-Type": "application/json" } }
      );
    } else {
      return new Response(renderAnalysisResponse(analyzedText), {
        headers: { "Content-Type": "text/html" },
      });
    }
  } catch (error) {
    console.error("Error handling file upload:", error);
    return new Response(
      JSON.stringify({ error: "An error occurred during file upload." }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

async function handleLocationQuery(location, env) {
  try {
    const prompt =
      "You are an AI expert in antisemitism research and regional education. REFERENCE KEY FACTS: ADL recorded 10,000+ US antisemitic incidents (2023, highest on record), 337% global rise post-October 7th (AJC), educated communities 3x more effective at prevention. The user provided this location: \"" +
      location +
      "\". " +
      "Provide: 1) Regional statistics and trends about antisemitism (contextualize with national 10,000+ incidents if US location), 2) Historical context specific to this area, 3) Local resources and organizations, 4) Educational institutions and programs, 5) Specific actions people can take in this region (emphasize education given 3x effectiveness). " +
      "Cite credible sources like ADL, AJC, local Jewish organizations when possible. If specific regional data is limited, provide relevant national/international context using the key facts above.";
    const openAiResponse = await analyzeTextWithOpenAI(
      prompt,
      env.OPEN_API_KEY_NEW,
      env.OPENAI_ORG_ID
    );
    const content = openAiResponse?.choices?.[0]?.message?.content || 
                    "No regional insights found. Please try again.";
    let safeContent = content
      .replace(/\n/g, "<br>")
      .replace(
        /\[([^\]]+)\]\((https?:\/\/[^)]+)\)/g,
        '<a href="$2" target="_blank">$1</a>'
      );
    const accept = (env && env.request && env.request.headers && env.request.headers.get) ? env.request.headers.get("Accept") : "";
    if (accept && accept.includes("application/json")) {
      return new Response(
        JSON.stringify({ content: content }),
        { headers: { "Content-Type": "application/json" } }
      );
    } else {
      return new Response(safeContent, {
        headers: { "Content-Type": "text/html" },
      });
    }
  } catch (err) {
    console.error("Error in handleLocationQuery:", err);
    return new Response(
      JSON.stringify({ error: "Failed to retrieve regional insights." }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

/*************************************************************
 * 3) ENV VALIDATION & FULL HTML
 *************************************************************/
function validateEnv(env) {
  const requiredVars = [
    "Google_Document_AI_Processor_Prediction_Endpoint",
    "Google-Service-Account-FINAL",
    "OPEN_API_KEY_NEW",
    "OPENAI_ORG_ID"
  ];
  requiredVars.forEach((varName) => {
    if (!env[varName]) {
      throw new Error(`Missing environment variable: ${varName}`);
    }
  });
}

function getHtmlResponse() {
  const FAVICON_URL = "https://example.com/favicon.ico";
  const APPLE_ICON_URL = "https://example.com/apple-touch-icon.png";
  const MANIFEST_URL = "https://example.com/site.webmanifest";
  const daysSinceOct7 = Math.floor(
    (Date.now() - Date.UTC(2023, 9, 7)) / (1000 * 60 * 60 * 24)
  );
  return [
"<!DOCTYPE html>",
"<html lang=\"en\">",
"  <head>",
"    <title>10-7.org - AI-Powered Education Platform Against Antisemitism</title>",
"    <meta charset=\"UTF-8\"/>",
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover\"/>",
`    <link rel="icon" href="${FAVICON_URL}" type="image/x-icon">`,
`    <link rel="apple-touch-icon" href="${APPLE_ICON_URL}">`,
`    <link rel="manifest" href="${MANIFEST_URL}">`,
"    <meta name=\"theme-color\" content=\"#ffffff\"/>",
"    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>",
"    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">",
"    <style>",
"    @import url('https://fonts.googleapis.com/css2?family=Aleo:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Dancing+Script:wght@400;500;600;700&family=Rock+Salt&display=swap');",
"      :root {",
"        /* Hostages Forum Color Scheme: Yellow, Black, White */",
"        --hero-wipe-bg: rgba(255,215,0,0.3);",
"        --primary-color: #000000;",   
"        --secondary-color: #FFD700;",
"        --background-color: #fff;",
"        --text-color: #000;",
"        --input-border-color: #FFD700;",
"        --input-focus-color: #FFA500;",
"        --input-text-color: #000;",
"        --input-font-size: 1.125rem;",
"        --page-bg: #ffffff;",
"        --card-bg: #fff;",
"        --heading-color: #000;",
"        --btn-bg: #FFD700;",
"        --btn-hover-bg: #FFA500;",
"        --btn-text: #000;",
"        --hero-cta-bg: #FFD700;",
"        --hero-cta-text: #000;",
"        --hero-subheadline-color: #b8860b; /* improved contrast */",
"        --footer-text: #666;",
"        --response-bg: #fefefe;",
"        --response-border: #FFD700;",
"        --chat-response-bg: #FFD700;",
"        --chat-response-text: #000;",
"        --input-text-color: #000;",
"        --scroll-section-bg: linear-gradient(135deg, #000000, #FFD700, #FFA500);",
"        --instant-response-bg: #FFD700;",
"        --instant-response-text: #000;",
"      }",
"      ",
"      /* Unity symbols with CSS only - trauma-sensitive */",
"      .unity-symbol {",
"        display: inline-block;",
"        width: 24px;",
"        height: 24px;",
"        border: 3px solid var(--secondary-color);",
"        border-radius: 50%;",
"        position: relative;",
"        margin: 0 8px;",
"      }",
"      .unity-symbol::before {",
"        content: '';",
"        position: absolute;",
"        top: 50%;",
"        left: 50%;",
"        transform: translate(-50%, -50%);",
"        width: 8px;",
"        height: 8px;",
"        background: var(--secondary-color);",
"        border-radius: 50%;",
"      }",
"      .heart-symbol {",
"        display: inline-block;",
"        color: var(--secondary-color);",
"        font-size: 1.2em;",
"        margin: 0 4px;",
"      }",
"      .heart-symbol::before {",
"        content: '♥';",
"        --hero-subheadline-color: #b8860b;",
"        --footer-text: #666;",
"        --response-bg: #fefefe;",
"        --response-border: #FFD700;",
"        --chat-response-bg: #FFD700;",
"        --chat-response-text: #000;",
"        --input-text-color: #000;",
"        --scroll-section-bg: linear-gradient(135deg, #000000, #FFD700, #FFA500);",
"        --instant-response-bg: #FFD700;",
"        --instant-response-text: #000;",
"      }",
"      ",
"      /* Unity symbols with CSS only - trauma-sensitive */",
"      .unity-symbol {",
"        display: inline-block;",
"        width: 24px;",
"        height: 24px;",
"        border: 3px solid var(--secondary-color);",
"        border-radius: 50%;",
"        position: relative;",
"        margin: 0 8px;",
"      }",
"      .unity-symbol::before {",
"        content: '';",
"        position: absolute;",
"        top: 50%;",
"        left: 50%;",
"        transform: translate(-50%, -50%);",
"        width: 8px;",
"        height: 8px;",
"        background: var(--secondary-color);",
"        border-radius: 50%;",
"      }",
"      .heart-symbol {",
"        display: inline-block;",
"        color: var(--secondary-color);",
"        font-size: 1.2em;",
"        margin: 0 4px;",
"      }",
"      .heart-symbol::before {",
"        content: '♥';",
"      }",
"      ",
      "      /* Screen reader only text for accessibility */",
"      .sr-only {",
"        position: absolute !important;",
"        width: 1px !important;",
"        height: 1px !important;",
"        padding: 0 !important;",
"        margin: -1px !important;",
"        overflow: hidden !important;",
"        clip: rect(0, 0, 0, 0) !important;",
"        white-space: nowrap !important;",
"        border: 0 !important;",
"      }",
"      ",
"      /* Enhanced error states for accessibility */",
"      .error-state {",
"        border-color: #e53935 !important;",
"        box-shadow: 0 0 0 2px rgba(229, 57, 53, 0.2) !important;",
"      }",
"      .error-message {",
"        color: #e53935;",
"        font-size: 0.9rem;",
"        margin-top: 0.5rem;",
"        display: flex;",
"        align-items: center;",
"        gap: 0.5rem;",
"      }",
"      .error-message::before {",
"        content: '⚠';",
"        font-weight: bold;",
"      }",
"      ",
"      html, body {",
"        margin:0;",
"        padding:0 env(safe-area-inset-right) 0 env(safe-area-inset-left);",
"        width:100%; height:100%;",
"        background-color:var(--page-bg);",
"        font-family:'Aleo','Dancing Script';",
"        font-size:clamp(15px,2.5vw,18px);",
"        overflow-x:hidden;",
"      }",
"      *,*::before,*::after {",
"        box-sizing:border-box;",
"      }",
"      body.body-3d-tilt {",
"        transform-origin:center top; /* keeps tilt from widening layout */",
"      }",
"",
"      input[type='text'], input[type='email'], input[type='search'], textarea, select, .hero-field {",
"        color: var(--input-text-color);",
"      }",
"#canvas {",
"        position: fixed;",
"        top: 0;",
"        left: 0;",
"        width: 100vw;",
"        height: 100vh;",
"        pointer-events: none;",
"      }",
".main-wrapper {",
"        max-width: 1200px;",
"        margin: 0 auto;",
"        padding: 20px;",
"        /* Ensure main content appears above hero gradient */",
"        position: relative;",
"        z-index: 25;",
"      }",
"      header {",
"        text-align: center;",
"        margin-top: 20px;",
"      }",
"      h1, h2, h3, h4 {",
"        margin: 0;",
"        padding: 0;",
"        color: var(--heading-color);",
"      }",
"      h1 {",
"        font-size: 2.2rem;",
"        margin-bottom: 10px;",
"      }",
"      h2 {",
"        font-size: 1.6rem;",
"        margin-bottom: 10px;",
"      }",
"      p {",
"        line-height: 1.6;",
"        margin-bottom: 1rem;",
"      }",
".content-area {",
"        display: flex;",
"        flex-wrap: wrap;",
"        gap: 20px;",
"      }",
".card {",
"        background-color: var(--card-bg);",
"        border: 2px solid var(--input-border-color);",
"        border-radius: 8px;",
"        padding: 20px;",
"        box-shadow: 0 0 10px rgba(255,215,0,0.1);",
"        flex: 1;",
"        min-width: 280px;",
"      }",
"      /* Impact Simulator Section Styles */",
".impact-simulator-section {",
"        padding: 3rem 0;",
"        background: linear-gradient(135deg, rgba(255,255,255,0.95), rgba(255,215,0,0.05));",
"        margin-top: 2rem;",
"        position: relative;",
"        z-index: 25;",
"      }",
".impact-calculator-card {",
"        background: rgba(255,255,255,0.3);",
"        backdrop-filter: blur(12px);",
"        -webkit-backdrop-filter: blur(12px);",
"        border: 2px solid var(--secondary-color);",
"        border-radius: 16px;",
"        padding: 2.5rem;",
"        box-shadow: 0 12px 40px rgba(255,215,0,0.15);",
"        max-width: 700px;",
"        margin: 0 auto;",
"        transition: transform 0.3s ease, box-shadow 0.3s ease;",
"        position: relative;",
"        overflow: hidden;",
"      }",
".impact-calculator-card:hover {",
"        transform: translateY(-5px);",
"        box-shadow: 0 20px 50px rgba(255,215,0,0.25);",
"      }",
".impact-calculator-card::before {",
"        content: '';",
"        position: absolute;",
"        top: -50%;",
"        left: -50%;",
"        width: 200%;",
"        height: 200%;",
"        background: conic-gradient(from 0deg, transparent, var(--secondary-color), transparent);",
"        animation: rotateBorder 8s linear infinite;",
"        z-index: -1;",
"        opacity: 0.1;",
"      }",
"@keyframes rotateBorder {",
"        0% { transform: rotate(0deg); }",
"        100% { transform: rotate(360deg); }",
"      }",
".impact-title {",
"        text-align: center;",
"        margin-bottom: 1rem;",
"        color: var(--primary-color);",
"        font-size: clamp(1.8rem, 4vw, 2.5rem);",
"        font-weight: 700;",
"        text-shadow: 0 2px 4px rgba(0,0,0,0.1);",
"      }",
".impact-description {",
"        text-align: center;",
"        margin-bottom: 2rem;",
"        color: var(--text-color);",
"        font-size: 1.1rem;",
"        line-height: 1.6;",
"        opacity: 0.9;",
"      }",
".simulator-grid {",
"        display: grid;",
"        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));",
"        gap: 2rem;",
"        max-width: 600px;",
"        margin: 0 auto 2rem;",
"      }",
".slider-container {",
"        text-align: center;",
"        padding: 1rem;",
"        background: rgba(255,255,255,0.2);",
"        border-radius: 12px;",
"        border: 1px solid rgba(255,215,0,0.3);",
"        transition: all 0.3s ease;",
"      }",
".slider-container:hover {",
"        background: rgba(255,255,255,0.3);",
"        border-color: var(--secondary-color);",
"        transform: scale(1.02);",
"      }",
".slider-label {",
"        display: block;",
"        margin-bottom: 1rem;",
"        font-weight: 600;",
"        color: var(--primary-color);",
"        font-size: 1.1rem;",
"      }",
".slider-wrapper {",
"        position: relative;",
"        margin-bottom: 1rem;",
"      }",
".impact-slider {",
"        width: 100%;",
"        height: 8px;",
"        background: rgba(255,215,0,0.2);",
"        border-radius: 4px;",
"        outline: none;",
"        -webkit-appearance: none;",
"        appearance: none;",
"        cursor: pointer;",
"        transition: all 0.3s ease;",
"      }",
".impact-slider::-webkit-slider-thumb {",
"        -webkit-appearance: none;",
"        appearance: none;",
"        width: 20px;",
"        height: 20px;",
"        background: var(--secondary-color);",
"        border-radius: 50%;",
"        cursor: pointer;",
"        box-shadow: 0 2px 8px rgba(0,0,0,0.2);",
"        transition: all 0.3s ease;",
"      }",
".impact-slider::-webkit-slider-thumb:hover {",
"        background: var(--primary-color);",
"        transform: scale(1.2);",
"        box-shadow: 0 4px 12px rgba(0,0,0,0.3);",
"      }",
".impact-slider::-moz-range-thumb {",
"        width: 20px;",
"        height: 20px;",
"        background: var(--secondary-color);",
"        border-radius: 50%;",
"        cursor: pointer;",
"        border: none;",
"        box-shadow: 0 2px 8px rgba(0,0,0,0.2);",
"        transition: all 0.3s ease;",
"      }",
".impact-slider::-moz-range-thumb:hover {",
"        background: var(--primary-color);",
"        transform: scale(1.2);",
"      }",
".slider-track-fill {",
"        position: absolute;",
"        top: 50%;",
"        left: 0;",
"        height: 8px;",
"        background: linear-gradient(90deg, var(--secondary-color), var(--primary-color));",
"        border-radius: 4px;",
"        transform: translateY(-50%);",
"        pointer-events: none;",
"        transition: width 0.3s ease;",
"      }",
".slider-value {",
"        font-size: 1.4rem;",
"        font-weight: bold;",
"        color: var(--secondary-color);",
"        text-shadow: 0 1px 2px rgba(0,0,0,0.1);",
"        transition: all 0.3s ease;",
"      }",
".impact-result {",
"        text-align: center;",
"        margin-top: 2rem;",
"        padding: 2rem;",
"        background: rgba(255,215,0,0.1);",
"        border-radius: 16px;",
"        border: 2px solid var(--secondary-color);",
"        position: relative;",
"        overflow: hidden;",
"      }",
".impact-result::before {",
"        content: '';",
"        position: absolute;",
"        top: 0;",
"        left: -100%;",
"        width: 100%;",
"        height: 100%;",
"        background: linear-gradient(90deg, transparent, rgba(255,215,0,0.3), transparent);",
"        transition: left 0.6s ease;",
"      }",
".impact-result:hover::before {",
"        left: 100%;",
"      }",
".impact-result-title {",
"        margin: 0 0 1rem 0;",
"        color: var(--primary-color);",
"        font-size: 1.3rem;",
"        font-weight: 600;",
"      }",
".impact-number {",
"        font-size: clamp(2.5rem, 6vw, 4rem);",
"        font-weight: bold;",
"        color: var(--secondary-color);",
"        text-shadow: 0 2px 4px rgba(0,0,0,0.1);",
"        margin-bottom: 0.5rem;",
"        transition: all 0.3s ease;",
"      }",
".impact-formula {",
"        font-size: 0.9rem;",
"        color: var(--text-color);",
"        margin-top: 0.5rem;",
"        opacity: 0.8;",
"        line-height: 1.4;",
"      }",
".formula-info {",
"        cursor: help;",
"        margin-right: 0.5rem;",
"        font-size: 1.1rem;",
"        opacity: 0.7;",
"        transition: opacity 0.3s ease;",
"      }",
".formula-info:hover {",
"        opacity: 1;",
"      }",
"@media (max-width: 768px) {",
"        .impact-calculator-card {",
"          padding: 1.5rem;",
"        }",
"        .simulator-grid {",
"          grid-template-columns: 1fr;",
"          gap: 1.5rem;",
"        }",
"        .impact-result {",
"          padding: 1.5rem;",
"        }",
"      }",
".card h3 {",
"        margin-top: 0;",
"      }",
".card input[type='range'] {",
"        width: 100%;",
"      }",
".upload-section {",
"        margin-top: 30px;",
"      }",
".upload-section input[type='file'] {",
"        font-size: 16px;",
"        padding: 10px;",
"        border: 1px solid var(--input-border-color);",
"        border-radius: 4px;",
"        display: block;",
"        margin: 10px 0;",
"      }",
"      /* General button styling for scrolling cards, etc. */",
"      button {",
"        background-color: var(--btn-bg);",
"        color: var(--btn-text);",
"        padding: 10px 20px;",
"        border: none;",
"        border-radius: 4px;",
"        cursor: pointer;",
"        font-size: 16px;",
"        transition: background-color 0.2s ease;",
"      }",
"      button:hover {",
"        background-color: var(--btn-hover-bg);",
"      }",
"#response-message {",
"        margin-top: 1rem;",
"        background: var(--response-bg);",
"        border: 1px solid var(--response-border);",
"        padding: 1rem;",
"        border-radius: 4px;",
"        min-height: 2rem;",
"      }",
".location-search {",
"        margin-top: 30px;",
"      }",
"      footer {",
"        margin-top: 40px;",
"        text-align: center;",
"        font-size: 0.9rem;",
"        color: var(--footer-text);",
"      }",
"      /* ==== HERO SECTION STYLES ==== */",
".hero-content {",
"        position: relative;",
"        z-index: 2;",
"      }",
".hero-headline {",
"        font-size: clamp(2.2rem, 7vw, 4.5rem);",
"        line-height: 1.1;",
"        margin-bottom: 0.5rem;",
"        font-weight: 700;",
"        color: var(--background-color);",
"        max-width: 900px;",
"        width: 100%;",
"        text-align: center;",
"        margin-left: auto;",
"        margin-right: auto;",
"        white-space: normal;",
"        word-break: break-word;",
"      }",
".hero-subheadline {",
"        font-size: clamp(1.1rem, 3vw, 2rem);",
"        margin-bottom: 1rem;",
"        font-weight: 400;",
"        color: var(--hero-subheadline-color);",
"        line-height: 1.2;",
"        max-width: 900px;",
"        width: 100%;",
"        text-align: center;",
"        margin-left: auto;",
"        margin-right: auto;",
"        white-space: normal;",
"        word-break: break-word;",
"        min-height: calc(3 * 1.2em);",
"        max-height: calc(3 * 1.2em);",
"        overflow: hidden;",
"      }",
"@media (max-width: 600px) {",
"        .hero-headline {",
"          font-size: clamp(1.3rem, 8vw, 2.2rem);",
"        }",
"        .hero-subheadline {",
"          font-size: clamp(0.95rem, 4vw, 1.2rem);",
"          min-height: calc(3 * 1.2em);",
"          max-height: calc(3 * 1.2em);",
"        }",
"      }",
"      /* Fading transition for subheadline spans */",
"#subheadlinePart1, #subheadlinePart2, #subheadlinePart3 {",
"        transition: opacity 1.5s ease-in-out;",
"        opacity: 1;",
"      }",
".latest-news {",
"        font-size: clamp(1rem, 3vw, 1.4rem);",
"        text-align: center;",
"        color: var(--background-color);",
"        margin: 0.5rem auto 1.5rem;",
"        opacity: 0;",
"        transition: opacity 0.6s ease-in-out;",
"      }",
".latest-news.visible {",
"        opacity: 1;",
"      }",
".latest-news a {",
"        color: var(--background-color);",
"        text-decoration: underline;",
"      }",
"#latest-news {",
"        overflow: hidden;",
"        position: relative;",
"      }",
".news-marquee {",
"        display: inline-block;",
"        white-space: nowrap;",
"        animation: news-scroll 25s linear infinite;",
"      }",
"#latest-news:hover .news-marquee {",
"        animation-play-state: paused;",
"      }",
".separator {",
"        margin: 0 0.75rem;",
"        color: var(--hero-subheadline-color);",
"      }",
"@keyframes news-scroll {",
"        from { transform: translateX(0); }",
"        to { transform: translateX(-50%); }",
"      }",
".news-timestamp {",
"        display: block;",
"        font-size: 0.85rem;",
"        color: var(--hero-subheadline-color);",
"        margin-top: 0.25rem;",
"      }",
".hero-description {",
"        font-size: 1rem;",
"        margin-bottom: 4rem;",
"        font-weight: 300;",
"      }",
".cta-container {",
"        display: flex;",
"        align-items: center;",
"        justify-content: center;",
"        gap: 1rem;",
"      }",
".hero-cta {",
"         display: inline-flex;",
"         align-items: center;",
"         justify-content: center;",
"         min-width: 220px;",
"         padding: 0.8rem 1.5rem;",
"         text-align: center;",
"         white-space: nowrap;",
"         background-color: var(--background-color);",
"         color: var(--primary-color);",
"         font-size: 1rem;",
"         font-weight: 600;",
"         border: 2px solid var(--primary-color);",
"         border-radius: 14px;",
"         cursor: pointer;",
"         transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out, background-color 0.2s ease-in-out, border-color 0.2s;",
"         box-shadow: 0 2px 8px rgba(0,0,0,0.1);",
"      }",
".hero-cta:hover {",
"         background: var(--primary-color); color: var(--background-color); transform: scale(1.02); box-shadow: 0 4px 12px rgba(0,0,0,0.2);",
"      }",
".hero-cta:focus {",
"         /* FIX: Customized focus style to match yellow/black/white theme */",
"         border-color: var(--secondary-color); ",
"         box-shadow: 0 0 0 3px rgba(255,215,0,0.4), 0 0 0 6px rgba(255,165,0,0.2); ",
"         outline: none !important;",
"         /* Ensure accessibility with visible focus indicator */",
"         background-color: rgba(255,255,255,0.95);",
"      }",
"      /* REVISED: Refresh button styles */",
".refresh-advice-btn, .surprise-me-btn {",
"        display: inline-flex;",
"        align-items: center;",
"        justify-content: center;",
"        background-color: var(--secondary-color);",
"        border: 2px solid var(--primary-color);",
"        border-radius: 14px;",
"        width: 48px;",
"        height: 48px;",
"        cursor: pointer;",
"        padding: 0;",
"        opacity: 0;",
"        transform: scale(0.5);",
"        transition: opacity 0.4s ease-out, transform 0.4s ease-out;",
"        pointer-events: none;",
"      }",
".surprise-me-btn {",
"        background-color: #FFA500;",
"        border-color: var(--primary-color);",
"      }",
".refresh-advice-btn.visible, .surprise-me-btn.visible {",
"        opacity: 1;",
"        transform: scale(1);",
"        pointer-events: auto;",
"      }",
".refresh-advice-btn:hover {",
"        background-color: var(--btn-hover-bg);",
"        transform: scale(1.05);",
"      }",
".surprise-me-btn:hover {",
"        background-color: #FF8C00;",
"        transform: scale(1.05);",
"      }",
".refresh-advice-btn:focus, .surprise-me-btn:focus {",
"        outline: 2px solid var(--secondary-color);",
"        outline-offset: 2px;",
"      }",
".refresh-advice-btn svg, .surprise-me-btn svg {",
"        width: 24px;",
"        height: 24px;",
"        fill: #111;",
"      }",
".cta-static {",
"         /* Static text remains unchanged */",
"      }",
".cta-dots {",
"         margin-left: 5px;",
"         min-width: 20px;",
"      }",
".hero-cta:hover {",
"        transform: scale(1.02);",
"        box-shadow: 0 4px 12px rgba(0,0,0,0.2);",
"      }",
"      /* BEGIN IMPROVED HERO FORM STYLES */",
".improved-hero-form .form-grid {",
"        display: grid;",
"        grid-template-columns: 1fr;",
"        row-gap: 2rem;",
"        width: 100%;",
"        max-width: 600px; /* reduce overhang */",
"        margin: 0 auto 2rem;",
"        padding: 0 1rem; /* symmetric horizontal padding */",
"      }",
"      /* Increase vertical gap between hero input fields */",
".improved-hero-form .form-grid {",
"        row-gap: 2rem;",
"      }",
"",
"      /* Lower scroll-down prompt and center its arrow */",
".scroll-down-prompt {",
"        bottom: 2rem;",
"      }",
".scroll-down-prompt .scroll-down-arrow {",
"        margin: 0 auto;",
"      }",
"",
".improved-hero-form .hero-field {",
"        /* centred, responsive input styling */",
"        width: 100%;",
"        max-width: 540px;",
"        margin: 0 auto;",
"        font-size: clamp(1.25rem, 2.5vw, 1.5rem);",
"        padding: 1rem 1.2rem;",
"        border: 2px solid var(--secondary-color);",
"        border-radius: 6px;",
"        background-color: rgba(255,255,255,0.9);",
"        transition: border-color 0.2s ease, box-shadow 0.2s ease;",
"      }",
".improved-hero-form .hero-field::placeholder {",
"        color: rgba(51,51,51,0.7);",
"        font-style: italic;",
"      }",
".improved-hero-form .hero-field:focus {",
"        border-color: var(--secondary-color);",
"        box-shadow: 0 0 0 4px rgba(255,215,0,0.3);",
"        outline: none;",
"      }",
".improved-hero-form .primary-cta {",
"        font-size: clamp(1rem, 2vw, 1.25rem);",
"        padding: 1rem 2rem;",
"        margin-top: 0.5rem;",
"      }",
"      /* <<< END IMPROVED HERO FORM STYLES */",
".hero-prompt {",
"        width: 80%;",
"        max-width: 400px;",
"        padding: 0.7rem;",
"        border: 1px solid var(--input-border-color);",
"        border-radius: 4px;",
"        font-size: 1rem;",
"        outline: none;",
"      }",
".hero-prompt-hint {",
"        font-size: 0.8rem;",
"        margin-top: 0.5rem;",
"        color: rgba(255,255,255,0.8);",
"      }",
"      /* Dots/Lines Canvas Styles */",
".dots-canvas {",
"        position: absolute;",
"        top: 0;",
"        left: 0;",
"        width: 100%;",
"        height: 100%;",
"        z-index: 1;",
"        opacity: 0.3; /* dimmed background lines */",
"        pointer-events: none; /* allow clicks through */",
"      }",
".hero-content {",
"        position: relative;",
"        z-index: 2;",
"      }",
"@keyframes rotateConic {",
"        0% {",
"          transform: translate(-60%, -50%) scale(1) rotate(calc(0deg + var(--tilt, 0deg)));",
"        }",
"        100% {",
"          transform: translate(-60%, -50%) scale(1.15) rotate(calc(360deg + var(--tilt, 0deg)));",
"        }",
"      }",
".hero-section {",
"        background-color: var(--primary-color);",
"        box-sizing: border-box;",
"        width: 100%;",
"        min-height: 80vh;",
"        position: relative;",
"        overflow: visible !important;",
"        display: flex;",
"        align-items: center;",
"        justify-content: center;",
"        padding: 2rem;",
"        color: var(--background-color);",
"        text-align: center;",
"        z-index: 0;",
"      }",

".hero-field {",
"        width: 80%;",
"        max-width: 400px;",
"        padding: 0.8rem;",
"        margin-bottom: 1rem;",
"        border: 1px solid var(--input-border-color);",
"        border-radius: 4px;",
"      }",
".chat-response {",
"        margin: 1rem auto;",
"        width: 80%;",
"        max-width: 400px;",
"        padding: 0.8rem;",
"        background-color: var(--chat-response-bg);",
"        border-radius: 4px;",
"        font-size: 0.9rem;",
"        text-align: left;",
"        color: var(--chat-response-text);",
        "        display: none;",
        "      }",
        "      ",
        "      /* Loading Animation Styles */",
        "      .loading-animation {",
        "        display: flex;",
        "        flex-direction: column;",
        "        align-items: center;",
        "        gap: 12px;",
        "        padding: 1.5rem;",
        "        text-align: center;",
        "      }",
        "      ",
        "      .loading-spinner {",
        "        width: 32px;",
        "        height: 32px;",
        "        border: 3px solid rgba(255, 215, 0, 0.3);",
        "        border-radius: 50%;",
        "        border-top-color: var(--secondary-color);",
        "        animation: loadingSpin 1s ease-in-out infinite;",
        "      }",
        "      ",
        "      @keyframes loadingSpin {",
        "        to { transform: rotate(360deg); }",
        "      }",
        "      ",
        "      .loading-text {",
        "        font-weight: 600;",
        "        color: var(--primary-color);",
        "        font-size: 1rem;",
        "      }",
        "      ",
        "      .loading-context {",
        "        font-size: 0.85rem;",
        "        color: #666;",
        "        font-style: italic;",
        "      }",
        "      ",
        "      /* Letter explosion animation for subheadline */",
".letter {",
"        display: inline-block;",
"        opacity: 0;",
"      }",
"@keyframes explodeIn {",
"        0% {",
"          transform: scale(0.5) translate(0, 0);",
"          opacity: 0;",
"        }",
"        50% {",
"          transform: scale(1.2) translate(var(--dx), var(--dy));",
"          opacity: 0.5;",
"        }",
"        100% {",
"          transform: scale(1) translate(0, 0);",
"          opacity: 1;",
"        }",
"      }",
"      /* Container animation for subheadline parts */",
"@keyframes expandFadeOutContainer {",
"        0% { transform: scale(1); opacity: 1; }",
"        100% { transform: scale(3); opacity: 0; }",
"      }",
"@keyframes fadeInContainer {",
"        0% { transform: scale(0.5); opacity: 0; }",
"        100% { transform: scale(1); opacity: 1; }",
"      }",
"      /* Letter wipe effect for subheadline update */",
".letter-container {",
"        display: inline-block;",
"        position: relative;",
"        overflow: hidden;",
"      }",
".new-letter {",
"        position: relative;",
"        z-index: 1;",
"        color: inherit;",
"      }",
"@keyframes wipeUp {",
"        0% { transform: translateY(0%); }",
"        100% { transform: translateY(-100%); }",
"      }",
"      /* Crisp swap animations for subheadline parts */",
"@keyframes crispSwapOut {",
"        0% { opacity: 1; transform: scale(1); }",
"        100% { opacity: 0; transform: scale(2); }",
"      }",
"@keyframes crispSwapIn {",
"        0% { opacity: 0; transform: scale(0.5); }",
"        100% { opacity: 1; transform: scale(1); }",
"      }",
".letter-container {",
"        display: inline-block;",
"        position: relative;",
"        overflow: hidden;",
"      }",
".new-letter {",
"        color: inherit;",
"      }",
".wipe {",
"        position: absolute;",
"        bottom: 0;",
"        left: 0;",
"        width: 100%;",
"        height: 100%;",
"        background: var(--hero-wipe-bg);",
"        z-index: 2;",
"        transform: translateY(0%);",
"      }",
"@keyframes wipeUp {",
"        0% { transform: translateY(0%); }",
"        100% { transform: translateY(-100%); }",
"      }",
"@media (max-width: 600px) {",
"        .hero-subheadline {",
"          font-size: 1.8rem;",
"          line-height: 1.2; /* tighter line spacing */",
"          padding: 0 1rem;",
"          white-space: normal;",
"          box-sizing: border-box;",
"          max-width: 100%;",
"          min-height: auto; /* remove fixed height */",
"        }",
"      }",
      "      /* =================================================== */",
      "      /* Educational Resources Section - Trauma-Sensitive Design */",
      "      /* =================================================== */",
      "      .educational-resources-section {",
      "        padding: 3rem 0;",
      "        /* FIX: Updated blue gradient to match yellow/black/white theme */",
      "        background: linear-gradient(135deg, #fffef8 0%, #fffbf0 40%, #fff8dc 70%);",
      "        margin-top: -20px;",
      "        position: relative;",
      "        z-index: 20;",
      "      }",
      "      .resources-container {",
      "        max-width: 900px;",
      "        margin: 0 auto;",
      "        padding: 0 2rem;",
      "      }",
      "      /* Header Section */",
      "      .resources-header {",
      "        text-align: center;",
      "        margin-bottom: 3rem;",
      "      }",
      "      .resources-title {",
      "        font-size: 2.5rem;",
      "        color: var(--primary-color);",
      "        margin-bottom: 1rem;",
      "        font-weight: 700;",
      "      }",
      "      .resources-subtitle {",
      "        font-size: 1.2rem;",
      "        color: #555;",
      "        margin-bottom: 2rem;",
      "        max-width: 600px;",
      "        margin-left: auto;",
      "        margin-right: auto;",
      "      }",
      "      /* Progress Indicator */",
      "      .progress-indicator {",
      "        margin-bottom: 1.5rem;",
      "      }",
      "      .progress-indicator span {",
      "        display: block;",
      "        font-size: 1rem;",
      "        color: var(--primary-color);",
      "        font-weight: 600;",
      "        margin-bottom: 0.5rem;",
      "      }",
      "      .progress-bar {",
      "        width: 100%;",
      "        height: 8px;",
      "        background: rgba(0,0,0,0.1);",
      "        border-radius: 4px;",
      "        overflow: hidden;",
      "      }",
      "      .progress-fill {",
      "        height: 100%;",
      "        background: linear-gradient(90deg, var(--secondary-color), #FFA500);",
      "        width: 16.67%; /* 1/6 resources */",
      "        border-radius: 4px;",
      "        transition: width 0.6s ease;",
      "      }",
      "      /* Content Warning Toggle */",
      "      .content-warning {",
      "        margin-bottom: 2rem;",
      "      }",
      "      .warning-toggle {",
      "        display: flex;",
      "        align-items: center;",
      "        justify-content: center;",
      "        gap: 0.5rem;",
      "        cursor: pointer;",
      "        font-size: 0.9rem;",
      "        color: #666;",
      "      }",
      "      .warning-toggle input[type='checkbox'] {",
      "        accent-color: var(--secondary-color);",
      "      }",
      "      /* Accordion Container */",
      "      .accordion-container {",
      "        display: flex;",
      "        flex-direction: column;",
      "        gap: 1.5rem;",
      "      }",
      "      /* Individual Accordion Items */",
      "      .resource-accordion {",
      "        background: var(--background-color);",
      "        border: 2px solid rgba(255,215,0,0.3);",
      "        border-radius: 12px;",
      "        box-shadow: 0 4px 20px rgba(0,0,0,0.08);",
      "        transition: all 0.3s ease;",
      "        overflow: hidden;",
      "        opacity: 0;",
      "        transform: translateY(30px);",
      "        animation: fadeInUp 0.6s ease forwards;",
      "      }",
      "      .resource-accordion:nth-child(1) { animation-delay: 0.1s; }",
      "      .resource-accordion:nth-child(2) { animation-delay: 0.2s; }",
      "      .resource-accordion:nth-child(3) { animation-delay: 0.3s; }",
      "      .resource-accordion:nth-child(4) { animation-delay: 0.4s; }",
      "      .resource-accordion:nth-child(5) { animation-delay: 0.5s; }",
      "      .resource-accordion:nth-child(6) { animation-delay: 0.6s; }",
      "      @keyframes fadeInUp {",
      "        to {",
      "          opacity: 1;",
      "          transform: translateY(0);",
      "        }",
      "      }",
      "      .resource-accordion:hover {",
      "        transform: translateY(-2px);",
      "        box-shadow: 0 8px 30px rgba(255,215,0,0.15);",
      "        border-color: var(--secondary-color);",
      "      }",
      "      .resource-accordion.start-here {",
      "        background: linear-gradient(135deg, #fffbf0, #fff8dc);",
      "        border-color: var(--secondary-color);",
      "      }",
      "      /* Accordion Header */",
      "      .accordion-header {",
      "        display: flex;",
      "        align-items: center;",
      "        padding: 1.5rem 2rem;",
      "        cursor: pointer;",
      "        list-style: none;",
      "        user-select: none;",
      "        transition: background-color 0.3s ease;",
      "      }",
      "      .accordion-header:hover {",
      "        background: rgba(255,215,0,0.05);",
      "      }",
      "      .accordion-header::-webkit-details-marker {",
      "        display: none;",
      "      }",
      "      .accordion-icon {",
      "        font-size: 2rem;",
      "        margin-right: 1rem;",
      "        flex-shrink: 0;",
      "      }",
      "      .accordion-title {",
      "        flex: 1;",
      "      }",
      "      .accordion-title h3 {",
      "        margin: 0 0 0.25rem 0;",
      "        font-size: 1.4rem;",
      "        color: var(--primary-color);",
      "        font-weight: 600;",
      "      }",
      "      .accordion-subtitle {",
      "        font-size: 0.95rem;",
      "        color: #666;",
      "        margin: 0;",
      "      }",
      "      .accordion-indicator {",
      "        font-size: 1.5rem;",
      "        color: var(--secondary-color);",
      "        transition: transform 0.3s ease;",
      "        margin-left: 1rem;",
      "      }",
      "      .resource-accordion[open] .accordion-indicator {",
      "        transform: rotate(180deg);",
      "      }",
      "      /* Accordion Content */",
      "      .accordion-content {",
      "        padding: 0 2rem 2rem 2rem;",
      "        border-top: 1px solid rgba(255,215,0,0.2);",
      "        animation: expandContent 0.4s ease;",
      "      }",
      "      @keyframes expandContent {",
      "        from {",
      "          opacity: 0;",
      "          transform: translateY(-10px);",
      "        }",
      "        to {",
      "          opacity: 1;",
      "          transform: translateY(0);",
      "        }",
      "      }",
      "      /* Content Grid & Text */",
      "      .content-grid {",
      "        margin-bottom: 2rem;",
      "      }",
      "      .content-text {",
      "        line-height: 1.6;",
      "        color: #333;",
      "      }",
      "      .intro-text {",
      "        font-size: 1.1rem;",
      "        margin-bottom: 1.5rem;",
      "        color: #444;",
      "      }",
      "      .key-facts {",
      "        list-style: none;",
      "        padding: 0;",
      "        margin: 1.5rem 0;",
      "      }",
      "      .key-facts li {",
      "        padding: 0.75rem 0;",
      "        border-bottom: 1px solid rgba(255,215,0,0.2);",
      "        font-size: 1rem;",
      "      }",
      "      .key-facts li:last-child {",
      "        border-bottom: none;",
      "      }",
      "      .guidance {",
      "        background: rgba(255,215,0,0.1);",
      "        padding: 1rem;",
      "        border-radius: 8px;",
      "        border-left: 4px solid var(--secondary-color);",
      "        margin-top: 1.5rem;",
      "      }",
      "      ",
      "      .dual-narratives-acknowledgment {",
      "        background: linear-gradient(135deg, #fff8dc, #fffbf0);",
      "        border: 2px solid var(--secondary-color);",
      "        border-radius: 12px;",
      "        padding: 1.5rem;",
      "        margin: 2rem 0;",
      "        position: relative;",
      "        overflow: hidden;",
      "      }",
      "      ",
      "      .dual-narratives-acknowledgment::before {",
      "        content: '';",
      "        position: absolute;",
      "        top: 0;",
      "        left: 0;",
      "        right: 0;",
      "        height: 4px;",
      "        background: linear-gradient(90deg, var(--secondary-color), #FFA500);",
      "      }",
      "      ",
      "      .dual-narratives-acknowledgment h4 {",
      "        margin: 0 0 1rem 0;",
      "        color: var(--primary-color);",
      "        font-size: 1.2rem;",
      "        font-weight: 600;",
      "      }",
      "      ",
      "      .dual-narratives-acknowledgment p {",
      "        margin: 0;",
      "        line-height: 1.6;",
      "        color: #444;",
      "        font-size: 1rem;",
      "      }",
      "      /* Content Warning Banner */",
      "      .content-warning-banner {",
      "        background: #fff3cd;",
      "        border: 1px solid #ffeaa7;",
      "        border-radius: 6px;",
      "        padding: 0.75rem 1rem;",
      "        margin-bottom: 1.5rem;",
      "        display: flex;",
      "        align-items: center;",
      "        gap: 0.5rem;",
      "        font-size: 0.9rem;",
      "        /* FIX: Updated brown text to black for better theme consistency */",
      "        color: var(--primary-color);",
      "      }",
      "      .content-warning-banner[data-warning='timeline'] {",
      "        display: block;",
      "      }",
      "      .warning-icon {",
      "        font-size: 1.2rem;",
      "        flex-shrink: 0;",
      "      }",
      "      /* Timeline Specific Styles */",
      "      .timeline-container {",
      "        margin: 1.5rem 0;",
      "      }",
      "      .timeline-item {",
      "        display: flex;",
      "        align-items: center;",
      "        margin-bottom: 1rem;",
      "        position: relative;",
      "      }",
      "      .timeline-dot {",
      "        width: 12px;",
      "        height: 12px;",
      "        background: var(--secondary-color);",
      "        border-radius: 50%;",
      "        margin-right: 1rem;",
      "        flex-shrink: 0;",
      "        animation: fillDot 0.8s ease forwards;",
      "        animation-delay: calc(var(--item-index, 0) * 0.2s);",
      "      }",
      "      @keyframes fillDot {",
      "        from {",
      "          background: rgba(255,215,0,0.3);",
      "          transform: scale(0.7);",
      "        }",
      "        to {",
      "          background: var(--secondary-color);",
      "          transform: scale(1);",
      "        }",
      "      }",
      "      .timeline-content {",
      "        flex: 1;",
      "        font-size: 1rem;",
      "        line-height: 1.4;",
      "      }",
      "      .timeline-extra {",
      "        margin-top: 1rem;",
      "        display: none;",
      "      }",
      "      .timeline-extra.expanded {",
      "        display: block;",
      "      }",
      "      /* Lists */",
      "      .action-list, .impact-list, .community-actions {",
      "        list-style: none;",
      "        padding: 0;",
      "        margin: 1rem 0;",
      "      }",
      "      .action-list li, .impact-list li, .community-actions li {",
      "        padding: 0.75rem 0;",
      "        border-bottom: 1px solid rgba(255,215,0,0.15);",
      "        font-size: 1rem;",
      "        line-height: 1.5;",
      "      }",
      "      .action-list li:last-child, .impact-list li:last-child, .community-actions li:last-child {",
      "        border-bottom: none;",
      "      }",
      "      .action-steps {",
      "        margin: 1rem 0;",
      "        padding-left: 1.5rem;",
      "      }",
      "      .action-steps li {",
      "        margin-bottom: 0.75rem;",
      "        line-height: 1.5;",
      "      }",
      "      /* Highlight Box */",
      "      .highlight-box {",
      "        background: linear-gradient(135deg, #fff8dc, #fffbf0);",
      "        border: 2px solid var(--secondary-color);",
      "        border-radius: 8px;",
      "        padding: 1.25rem;",
      "        margin: 1.5rem 0;",
      "        text-align: center;",
      "        font-weight: 600;",
      "        color: var(--primary-color);",
      "      }",
      "      /* Resources Grid */",
      "      .resources-grid {",
      "        display: grid;",
      "        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));",
      "        gap: 1.5rem;",
      "        margin: 1.5rem 0;",
      "      }",
      "      .resource-item {",
      "        display: flex;",
      "        align-items: center;",
      "        gap: 1rem;",
      "        padding: 1rem;",
      "        background: rgba(255,215,0,0.05);",
      "        border-radius: 8px;",
      "        border: 1px solid rgba(255,215,0,0.2);",
      "      }",
      "      .resource-icon {",
      "        font-size: 2rem;",
      "        flex-shrink: 0;",
      "      }",
      "      .resource-info h4 {",
      "        margin: 0 0 0.5rem 0;",
      "        font-size: 1.1rem;",
      "        color: var(--primary-color);",
      "      }",
      "      .resource-info p {",
      "        margin: 0;",
      "        font-size: 0.9rem;",
      "        color: #666;",
      "      }",
      "      /* Statistics Grid */",
      "      .stats-grid {",
      "        display: grid;",
      "        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));",
      "        gap: 2rem;",
      "        margin: 2rem 0;",
      "        text-align: center;",
      "      }",
      "      .stat-item {",
      "        padding: 1.5rem 1rem;",
      "        background: var(--background-color);",
      "        border-radius: 12px;",
      "        border: 2px solid rgba(255,215,0,0.3);",
      "        box-shadow: 0 4px 15px rgba(0,0,0,0.05);",
      "      }",
      "      .stat-number {",
      "        font-size: 3rem;",
      "        font-weight: 700;",
      "        color: var(--secondary-color);",
      "        line-height: 1;",
      "        margin-bottom: 0.5rem;",
      "      }",
      "      .stat-label {",
      "        font-size: 1rem;",
      "        font-weight: 600;",
      "        color: var(--primary-color);",
      "        margin-bottom: 0.25rem;",
      "      }",
      "      .stat-source {",
      "        font-size: 0.8rem;",
      "        color: #666;",
      "        font-style: italic;",
      "      }",
      "      /* Action Buttons */",
      "      .action-buttons {",
      "        display: flex;",
      "        flex-wrap: wrap;",
      "        gap: 1rem;",
      "        margin-top: 2rem;",
      "      }",
      "      .primary-action-btn, .secondary-action-btn {",
      "        display: inline-flex;",
      "        align-items: center;",
      "        gap: 0.5rem;",
      "        padding: 0.75rem 1.5rem;",
      "        border: none;",
      "        border-radius: 8px;",
      "        font-size: 1rem;",
      "        font-weight: 600;",
      "        cursor: pointer;",
      "        transition: all 0.3s ease;",
      "        text-decoration: none;",
      "        position: relative;",
      "        overflow: hidden;",
      "      }",
      "      .primary-action-btn {",
      "        background: var(--secondary-color);",
      "        color: var(--primary-color);",
      "        border: 2px solid var(--secondary-color);",
      "      }",
      "      .primary-action-btn:hover {",
      "        background: #FFA500;",
      "        transform: translateY(-2px);",
      "        box-shadow: 0 6px 20px rgba(255,215,0,0.3);",
      "      }",
      "      .secondary-action-btn {",
      "        background: transparent;",
      "        color: var(--primary-color);",
      "        border: 2px solid var(--secondary-color);",
      "      }",
      "      .secondary-action-btn:hover {",
      "        background: var(--secondary-color);",
      "        color: var(--primary-color);",
      "        transform: translateY(-2px);",
      "      }",
      "      /* Ripple Effect for Buttons */",
      "      .primary-action-btn::after, .secondary-action-btn::after {",
      "        content: '';",
      "        position: absolute;",
      "        top: 50%;",
      "        left: 50%;",
      "        width: 0;",
      "        height: 0;",
      "        background: rgba(255,255,255,0.3);",
      "        border-radius: 50%;",
      "        transform: translate(-50%, -50%);",
      "        transition: width 0.4s ease, height 0.4s ease;",
      "      }",
      "      .primary-action-btn:active::after, .secondary-action-btn:active::after {",
      "        width: 300px;",
      "        height: 300px;",
      "      }",
      "      .btn-icon {",
      "        font-size: 1.1rem;",
      "      }",
      "      /* Mobile Responsiveness */",
      "      @media (max-width: 768px) {",
      "        .resources-container {",
      "          padding: 0 1rem;",
      "        }",
      "        .resources-title {",
      "          font-size: 2rem;",
      "        }",
      "        .accordion-header {",
      "          padding: 1.25rem 1.5rem;",
      "        }",
      "        .accordion-content {",
      "          padding: 0 1.5rem 1.5rem 1.5rem;",
      "        }",
      "        .accordion-title h3 {",
      "          font-size: 1.2rem;",
      "        }",
      "        .stats-grid {",
      "          grid-template-columns: 1fr;",
      "          gap: 1rem;",
      "        }",
      "        .stat-number {",
      "          font-size: 2.5rem;",
      "        }",
      "        .action-buttons {",
      "          flex-direction: column;",
      "        }",
      "        .primary-action-btn, .secondary-action-btn {",
      "          width: 100%;",
      "          justify-content: center;",
      "        }",
      "        .resources-grid {",
      "          grid-template-columns: 1fr;",
      "        }",
      "      }",
      "      /* Accessibility */",
      "      @media (prefers-reduced-motion: reduce) {",
      "        .resource-accordion {",
      "          animation: none;",
      "          opacity: 1;",
      "          transform: none;",
      "        }",
      "        .accordion-content {",
      "          animation: none;",
      "        }",
      "        .timeline-dot {",
      "          animation: none;",
      "        }",
      "        .progress-fill {",
      "          transition: none;",
      "        }",
      "      }",
      "      /* Focus States for Accessibility */",
      "      .accordion-header:focus {",
      "        outline: 3px solid var(--secondary-color);",
      "        outline-offset: 2px;",
      "      }",
      "      .primary-action-btn:focus, .secondary-action-btn:focus {",
      "        outline: 3px solid var(--secondary-color);",
      "        outline-offset: 2px;",
      "      }",
      "      /* Content Warnings Hidden State */",
      "      #content-warnings:not(:checked) ~ .accordion-container .content-warning-banner {",
      "        display: none;",
      "      }",
      "      /* =================================================== */",
      "      /* End Educational Resources Section Styles */",
      "      /* =================================================== */",
      "      ",
      "      /* =================================================== */",
      "      /* Top Navigation Styles */",
      "      /* =================================================== */",
      "      .top-bar {",
      "        position: fixed;",
      "        top: 0;",
      "        left: 0;",
      "        width: 100%;",
      "        height: 64px;",
      "        background: var(--primary-color);",
      "        color: #fff;",
      "        z-index: 1000;",
      "        box-shadow: 0 2px 4px rgba(0,0,0,0.1);",
      "        margin: 0;",
      "        padding: 0;",
      "      }",
      "      .top-bar__inner {",
      "        max-width: 1200px;",
      "        margin: 0 auto;",
      "        height: 100%;",
      "        display: flex;",
      "        align-items: center;",
      "        justify-content: space-between;",
      "        padding: 0 1rem;",
      "      }",
      "      .top-bar__logo {",
      "        font-family: 'Dancing Script', cursive;",
      "        font-size: 1.8rem;",
      "        letter-spacing: 0.5px;",
      "        color: var(--secondary-color);",
      "        text-decoration: none;",
      "        font-weight: 700;",
      "        transition: color 0.3s ease;",
      "      }",
      "      .top-bar__logo:hover {",
      "        color: #FFA500;",
      "      }",
      "      .top-bar__toggle {",
      "        display: none;",
      "        background: none;",
      "        border: none;",
      "        font-size: 1.5rem;",
      "        color: var(--secondary-color);",
      "        cursor: pointer;",
      "        padding: 0.5rem;",
      "        border-radius: 4px;",
      "        transition: background-color 0.3s ease;",
      "      }",
      "      .top-bar__toggle:hover {",
      "        background: rgba(255,215,0,0.1);",
      "      }",
      "      .top-bar__nav {",
      "        display: flex;",
      "        align-items: center;",
      "      }",
      "      .nav-links__list {",
      "        margin: 0;",
      "        padding: 0;",
      "        list-style: none;",
      "        display: flex;",
      "        gap: 0.75rem;",
      "      }",
      "      .nav-links__link {",
      "        display: inline-flex;",
      "        align-items: center;",
      "        height: 44px;",
      "        padding: 0 0.75rem;",
      "        background: var(--secondary-color);",
      "        color: var(--primary-color);",
      "        border-radius: 6px;",
      "        text-decoration: none;",
      "        font-weight: 600;",
      "        font-size: 1rem;",
      "        transition: all 0.3s ease;",
      "        border: 2px solid var(--secondary-color);",
      "        white-space: nowrap;",
      "      }",
      "      .nav-links__link:hover, .nav-links__link:focus {",
      "        background: #FFA500;",
      "        border-color: #FFA500;",
      "        transform: translateY(-2px);",
      "        box-shadow: 0 4px 12px rgba(255,215,0,0.3);",
      "      }",
      "      .top-bar__account {",
      "        display: flex;",
      "        align-items: center;",
      "        gap: 1rem;",
      "      }",
"      .days-since-oct7 {",
"        font-size: clamp(0.8rem, 1.5vw, 0.95rem);",
      "        color: #fff;",
      "        background: linear-gradient(135deg, rgba(255,215,0,0.15), rgba(255,165,0,0.15));",
      "        padding: 0.5rem 1rem;",
      "        border-radius: 20px;",
      "        border: 1px solid rgba(255,215,0,0.4);",
      "        display: flex;",
      "        align-items: center;",
      "        gap: 6px;",
      "        white-space: nowrap;",
      "        box-shadow: 0 2px 8px rgba(255, 215, 0, 0.2);",
      "      }",
"      .day-count {",
"        color: var(--secondary-color);",
"        font-weight: 700;",
"        font-size: clamp(0.9rem, 2vw, 1.1rem);",
      "      }",
      "      .ribbon-icon {",
      "        font-size: 0.9rem;",
      "        filter: none;",
      "      }",
      "      .hostage-separator {",
      "        color: rgba(255, 255, 255, 0.6);",
      "        font-weight: 300;",
      "        margin: 0 2px;",
      "      }",
      "      .hostage-count {",
      "        font-weight: 600;",
      "        color: #FFB6C1;",
      "        font-size: 0.9rem;",
      "      }",
      "      .hostages-label {",
      "        font-size: 0.8rem;",
      "        color: rgba(255, 255, 255, 0.9);",
      "      }",
      "      ",
      "      /* Mobile Navigation */",
      "      @media (max-width: 768px) {",
      "        .top-bar__toggle {",
      "          display: block;",
      "        }",
      "        .top-bar__nav {",
      "          position: fixed;",
      "          top: 64px;",
      "          right: 0;",
      "          width: 100%;",
      "          max-width: 320px;",
      "          height: calc(100vh - 64px);",
      "          background: var(--primary-color);",
      "          color: #fff;",
      "          flex-direction: column;",
      "          padding: 2rem 1rem;",
      "          box-shadow: -2px 0 10px rgba(0,0,0,0.1);",
      "          transform: translateX(100%);",
      "          transition: transform 0.3s ease;",
      "          border-left: 3px solid var(--secondary-color);",
      "        }",
      "        .top-bar__nav.active {",
      "          transform: translateX(0);",
      "        }",
      "        .nav-links__list {",
      "          flex-direction: column;",
      "          gap: 1rem;",
      "          margin-top: 2rem;",
      "          width: 100%;",
      "        }",
      "        .nav-links__link {",
      "          display: block;",
      "          width: 100%;",
      "          padding: 1rem;",
      "          text-align: center;",
      "          margin: 0;",
      "          justify-content: center;",
      "        }",
      "        .top-bar__account {",
      "          margin-top: 2rem;",
      "          justify-content: center;",
      "        }",
              "        .days-since-oct7 {",
        "          font-size: 0.75rem;",
        "          padding: 0.4rem 0.8rem;",
        "          gap: 4px;",
        "        }",
        "        .day-count {",
        "          font-size: 0.85rem;",
        "        }",
        "        .hostages-label {",
        "          display: none;",
        "        }",
        "        .nav-links__link {",
        "          font-size: 0.8rem;",
        "          padding: 0 0.5rem;",
        "        }",
        "        body.nav-open {",
        "          overflow: hidden;",
        "        }",
        "      }",
      "      ",
      "      /* Ensure body content doesn't go behind fixed nav */",
      "      body {",
      "        padding-top: 64px;",
      "      }",
      "      ",
      "      /* Focus states for accessibility */",
      "      .top-bar__toggle:focus {",
      "        outline: 2px solid var(--secondary-color);",
      "        outline-offset: 2px;",
      "      }",
      "      .nav-links__link:focus {",
      "        outline: 2px solid var(--secondary-color);",
      "        outline-offset: 2px;",
      "      }",
      "      ",
      "      /* Animation for mobile menu overlay */",
      "      .top-bar__nav::before {",
      "        content: '';",
      "        position: fixed;",
      "        top: 0;",
      "        left: 0;",
      "        width: 100vw;",
      "        height: 100vh;",
      "        background: rgba(0,0,0,0.5);",
      "        opacity: 0;",
      "        pointer-events: none;",
      "        transition: opacity 0.3s ease;",
      "        z-index: -1;",
      "      }",
      "      .top-bar__nav.active::before {",
      "        opacity: 1;",
      "        pointer-events: auto;",
      "      }",
      "      ",
      "      /* =================================================== */",
      "      /* End Top Navigation Styles */",
      "      /* =================================================== */",
      "      ",
      "      /* =================================================== */",
      "      /* AI Tools Footer Section Styles */",
      "      /* =================================================== */",
      "      ",
      "      .ai-tools-footer {",
      "        background: linear-gradient(135deg, #fffef8 0%, #fffbf0 40%, #fff8dc 70%);",
      "        padding: 4rem 0 2rem;",
      "        position: relative;",
      "        overflow: hidden;",
      "      }",
      "      ",
      "      .ai-tools-footer::before {",
      "        content: '';",
      "        position: absolute;",
      "        top: 0;",
      "        left: 0;",
      "        right: 0;",
      "        height: 2px;",
      "        background: linear-gradient(90deg, transparent 0%, var(--secondary-color) 50%, transparent 100%);",
      "      }",
      "      ",
      "      .ai-footer-header {",
      "        text-align: center;",
      "        margin-bottom: 3rem;",
      "        max-width: 800px;",
      "        margin-left: auto;",
      "        margin-right: auto;",
      "      }",
      "      ",
      "      .ai-footer-title {",
      "        font-size: 2.5rem;",
      "        font-weight: 700;",
      "        color: var(--primary-color);",
      "        margin-bottom: 1rem;",
      "        background: linear-gradient(135deg, var(--primary-color) 0%, #444 100%);",
      "        -webkit-background-clip: text;",
      "        -webkit-text-fill-color: transparent;",
      "        background-clip: text;",
      "      }",
      "      ",
      "      .ai-footer-subtitle {",
      "        font-size: 1.2rem;",
      "        color: #555;",
      "        line-height: 1.6;",
      "        margin-bottom: 0;",
      "      }",
      "      ",
      "      .ai-tools-grid {",
      "        display: grid;",
      "        grid-template-columns: repeat(2, 1fr);",
      "        gap: 2rem;",
      "        max-width: 1200px;",
      "        margin: 0 auto;",
      "        padding: 0 1rem;",
      "      }",
      "      ",
      "      /* Ensure proper centering for all layouts */",
      "      @media (min-width: 1024px) {",
      "        .ai-tools-grid {",
      "          grid-template-columns: repeat(2, minmax(300px, 1fr));",
      "          justify-content: center;",
      "        }",
      "      }",
      "      ",
      "      .ai-tool-card {",
      "        background: white;",
      "        border-radius: 16px;",
      "        padding: 2rem;",
      "        box-shadow: 0 4px 20px rgba(0,0,0,0.1);",
      "        border: 2px solid transparent;",
      "        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);",
      "        position: relative;",
      "        overflow: hidden;",
      "      }",
      "      ",
      "      .ai-tool-card--wide {",
      "        grid-column: 1 / -1;",
      "        max-width: 800px;",
      "        margin: 0 auto;",
      "      }",
      "      ",
      "      /* Center the last tool card when it's alone in bottom row */",
      "      .ai-tool-card:last-child:not(.ai-tool-card--wide) {",
      "        grid-column: 1 / -1;",
      "        max-width: 500px;",
      "        margin: 0 auto;",
      "        justify-self: center;",
      "      }",
      "      ",
      "      .ai-tool-card::before {",
      "        content: '';",
      "        position: absolute;",
      "        top: 0;",
      "        left: 0;",
      "        right: 0;",
      "        height: 4px;",
      "        background: linear-gradient(90deg, var(--secondary-color), #FFA500);",
      "        transform: scaleX(0);",
      "        transform-origin: left;",
      "        transition: transform 0.3s ease;",
      "      }",
      "      ",
      "      .ai-tool-card:hover {",
      "        transform: translateY(-8px);",
      "        box-shadow: 0 8px 30px rgba(0,0,0,0.15);",
      "        border-color: var(--secondary-color);",
      "      }",
      "      ",
      "      .ai-tool-card:hover::before {",
      "        transform: scaleX(1);",
      "      }",
      "      ",
      "      .tool-icon {",
      "        width: 60px;",
      "        height: 60px;",
      "        background: linear-gradient(135deg, var(--secondary-color), #FFA500);",
      "        border-radius: 50%;",
      "        display: flex;",
      "        align-items: center;",
      "        justify-content: center;",
      "        margin-bottom: 1.5rem;",
      "        font-size: 1.5rem;",
      "        transition: transform 0.3s ease;",
      "      }",
      "      ",
      "      .ai-tool-card:hover .tool-icon {",
      "        transform: rotate(10deg) scale(1.1);",
      "      }",
      "      ",
      "      .tool-content h3 {",
      "        font-size: 1.5rem;",
      "        font-weight: 600;",
      "        color: var(--primary-color);",
      "        margin-bottom: 0.75rem;",
      "      }",
      "      ",
      "      .tool-content p {",
      "        color: #666;",
      "        line-height: 1.6;",
      "        margin-bottom: 1.5rem;",
      "      }",
      "      ",
      "      .tool-form {",
      "        margin-bottom: 1.5rem;",
      "      }",
      "      ",
      "      .input-group {",
      "        display: flex;",
      "        gap: 0.75rem;",
      "        align-items: stretch;",
      "      }",
      "      ",
      "      .tool-input {",
      "        flex: 1;",
      "        padding: 0.75rem 1rem;",
      "        border: 2px solid #e0e0e0;",
      "        border-radius: 8px;",
      "        font-size: 0.95rem;",
      "        transition: all 0.3s ease;",
      "        background: white;",
      "        min-width: 200px;",
      "      }",
      "      ",
      "      .tool-input:focus {",
      "        outline: none;",
      "        border-color: var(--secondary-color);",
      "        box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.2);",
      "      }",
      "      ",
      "      .tool-submit-btn {",
      "        padding: 0.75rem 1.5rem;",
      "        background: var(--secondary-color);",
      "        color: var(--primary-color);",
      "        border: none;",
      "        border-radius: 8px;",
      "        font-weight: 600;",
      "        cursor: pointer;",
      "        transition: all 0.3s ease;",
      "        display: flex;",
      "        align-items: center;",
      "        gap: 0.5rem;",
      "        white-space: nowrap;",
      "      }",
      "      ",
      "      .tool-submit-btn:hover {",
      "        background: #FFA500;",
      "        transform: translateY(-2px);",
      "        box-shadow: 0 4px 12px rgba(255, 165, 0, 0.3);",
      "      }",
      "      ",
      "      .tool-submit-btn:active {",
      "        transform: translateY(0);",
      "      }",
      "      ",
      "      .btn-icon {",
      "        font-size: 1.1rem;",
      "        transition: transform 0.3s ease;",
      "      }",
      "      ",
      "      .tool-submit-btn:hover .btn-icon {",
      "        transform: translateX(2px);",
      "      }",
      "      ",
      "      .story-btn {",
      "        width: 100%;",
      "        justify-content: center;",
      "      }",
      "      ",
      "      .tool-output {",
      "        padding: 1.5rem;",
      "        background: linear-gradient(135deg, #ffffff, #f8f9fa);",
      "        border: 2px solid var(--secondary-color);",
      "        border-radius: 12px;",
      "        margin-top: 1.5rem;",
      "        line-height: 1.6;",
      "        color: #333;",
      "        font-size: 1rem;",
      "        box-shadow: 0 4px 12px rgba(255, 215, 0, 0.1);",
      "        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);",
      "        transform: translateY(0);",
      "        opacity: 1;",
      "      }",
      "      ",
      "      .tool-output.hidden {",
      "        display: none !important;",
      "        opacity: 0;",
      "        transform: translateY(-10px);",
      "      }",
      "      ",
      "      .tool-output:not(.hidden) {",
      "        animation: resultSlideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;",
      "      }",
      "      ",
      "      @keyframes resultSlideIn {",
      "        from {",
      "          opacity: 0;",
      "          transform: translateY(20px) scale(0.98);",
      "        }",
      "        to {",
      "          opacity: 1;",
      "          transform: translateY(0) scale(1);",
      "        }",
      "      }",
      "      ",
      "      /* Upload Form Specific Styles */",
      "      .upload-form {",
      "        text-align: center;",
      "      }",
      "      ",
      "      .upload-area {",
      "        border: 2px dashed #ddd;",
      "        border-radius: 12px;",
      "        padding: 2rem;",
      "        transition: all 0.3s ease;",
      "        background: #fafafa;",
      "        margin-bottom: 1rem;",
      "      }",
      "      ",
      "      .upload-area:hover {",
      "        border-color: var(--secondary-color);",
      "        background: #fff;",
      "      }",
      "      ",
      "      .file-input {",
      "        display: none;",
      "      }",
      "      ",
      "      .upload-label {",
      "        display: flex;",
      "        flex-direction: column;",
      "        align-items: center;",
      "        gap: 0.75rem;",
      "        cursor: pointer;",
      "        color: #666;",
      "        margin-bottom: 1rem;",
      "      }",
      "      ",
      "      .upload-icon {",
      "        font-size: 2rem;",
      "        color: var(--secondary-color);",
      "      }",
      "      ",
      "      .upload-text {",
      "        font-weight: 600;",
      "        color: var(--primary-color);",
      "      }",
      "      ",
      "      .upload-formats {",
      "        font-size: 0.85rem;",
      "        color: #888;",
      "      }",
      "      ",
      "      .upload-btn {",
      "        margin-top: 1rem;",
      "      }",
      "      ",
      "      .upload-privacy {",
      "        display: flex;",
      "        align-items: center;",
      "        justify-content: center;",
      "        gap: 0.5rem;",
      "        font-size: 0.85rem;",
      "        color: #666;",
      "        background: #f8f9fa;",
      "        padding: 0.5rem 1rem;",
      "        border-radius: 6px;",
      "      }",
      "      ",
      "      .privacy-icon {",
      "        color: #28a745;",
      "      }",
      "      ",
      "      /* Footer Information */",
      "      .ai-footer-info {",
      "        margin-top: 4rem;",
      "        padding: 2rem;",
      "        background: rgba(255, 255, 255, 0.6);",
      "        border-radius: 16px;",
      "        text-align: center;",
      "        max-width: 800px;",
      "        margin-left: auto;",
      "        margin-right: auto;",
      "      }",
      "      ",
      "      .footer-mission h4 {",
      "        color: var(--primary-color);",
      "        font-size: 1.3rem;",
      "        margin-bottom: 1rem;",
      "      }",
      "      ",
      "      .footer-mission p {",
      "        color: #555;",
      "        line-height: 1.6;",
      "        margin-bottom: 2rem;",
      "        font-size: 1.05rem;",
      "      }",
      "      ",
      "      .footer-copyright {",
      "        border-top: 1px solid #e0e0e0;",
      "        padding-top: 1.5rem;",
      "      }",
      "      ",
      "      .footer-copyright p {",
      "        color: #777;",
      "        font-size: 0.95rem;",
      "        margin: 0;",
      "      }",
"      .site-footer {",
"        background: #f7f7f7;",
"        color: #333;",
"        padding: 1rem;",
"        text-align: center;",
"        margin-top: 2rem;",
"      }",
"      .footer-links a {",
"        margin: 0 0.5rem;",
"        color: #333;",
"        text-decoration: none;",
"      }",
"      .footer-links a:hover, .footer-links a:focus {",
"        text-decoration: underline;",
"      }",
      "      ",
      "      /* Mobile Responsiveness */",
      "      @media (max-width: 768px) {",
      "        .ai-footer-title {",
      "          font-size: 2rem;",
      "        }",
      "        ",
      "        .ai-footer-subtitle {",
      "          font-size: 1rem;",
      "        }",
      "        ",
      "        .ai-tools-grid {",
      "          grid-template-columns: 1fr;",
      "          gap: 1.5rem;",
      "          padding: 0 0.75rem;",
      "        }",
      "        ",
      "        .ai-tool-card {",
      "          padding: 1.5rem;",
      "        }",
      "        ",
              "        .ai-tool-card--wide {",
        "          grid-column: 1;",
        "        }",
        "        ",
        "        /* On mobile, reset last-child centering */",
        "        .ai-tool-card:last-child:not(.ai-tool-card--wide) {",
        "          grid-column: 1;",
        "          max-width: none;",
        "          margin: 0;",
        "          justify-self: stretch;",
        "        }",
      "        ",
      "        .input-group {",
      "          flex-direction: column;",
      "          gap: 0.5rem;",
      "        }",
      "        ",
      "        .tool-submit-btn {",
      "          width: 100%;",
      "          justify-content: center;",
      "        }",
      "        ",
      "        .ai-footer-info {",
      "          margin: 2rem 0.75rem 0;",
      "          padding: 1.5rem;",
      "        }",
      "      }",
      "      ",
"      /* Loading States */",
"      .tool-output.loading::before {",
      "        content: '';",
      "        display: inline-block;",
      "        width: 16px;",
      "        height: 16px;",
      "        border: 2px solid #f3f3f3;",
      "        border-top: 2px solid var(--secondary-color);",
      "        border-radius: 50%;",
      "        animation: spin 1s linear infinite;",
      "        margin-right: 0.5rem;",
      "      }",
      "      ",
      "      @keyframes spin {",
      "        0% { transform: rotate(0deg); }",
      "        100% { transform: rotate(360deg); }",
      "      }",
      "      ",
      "      /* Interactive Animations */",
      "      .ai-tool-card.active {",
      "        transform: scale(1.02);",
      "        box-shadow: 0 12px 40px rgba(255, 215, 0, 0.2);",
      "      }",
      "      ",
      "      .tool-submit-btn.processing {",
      "        background: #ddd;",
      "        color: #888;",
      "        cursor: not-allowed;",
      "      }",
      "      ",
      "      .tool-submit-btn.processing .btn-icon {",
      "        animation: spin 1s linear infinite;",
      "      }",
      "      ",
      "      /* =================================================== */",
      "      /* End AI Tools Footer Section Styles */",
      "      /* =================================================== */",
      "      ",
      "      /* =================================================== */",
      "      /* Enhanced Hero Form Styles */",
      "      /* =================================================== */",
      "      ",
      "      .enhanced-hero-form {",
      "        max-width: 900px;",
      "        margin: 0 auto;",
      "        padding: 0 1rem;",
      "      }",
      "      ",
      "      /* Quick Start Scenarios */",
      "      .quick-start-section {",
      "        margin-bottom: 2rem;",
      "        text-align: center;",
      "      }",
      "      ",
      "      .quick-start-title {",
      "        font-size: 1.3rem;",
      "        font-weight: 600;",
      "        color: var(--primary-color);",
      "        margin-bottom: 1.5rem;",
      "        opacity: 0;",
      "        animation: fadeInUp 0.6s ease forwards 0.2s;",
      "      }",
      "      ",
      "      .scenario-buttons {",
      "        display: grid;",
      "        grid-template-columns: repeat(6, 1fr);",
      "        gap: 1rem;",
      "        margin-bottom: 1rem;",
      "      }",
      "      ",
      "      /* Wide screen: fit all 6 buttons in one row */",
      "      @media (min-width: 1200px) {",
      "        .scenario-buttons {",
      "          grid-template-columns: repeat(6, minmax(140px, 1fr));",
      "          max-width: 1000px;",
      "          margin: 0 auto 1rem auto;",
      "        }",
      "      }",
      "      ",
      "      .scenario-btn {",
      "        background: white;",
      "        border: 2px solid #e0e0e0;",
      "        border-radius: 12px;",
      "        padding: 1rem 0.75rem;",
      "        cursor: pointer;",
      "        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);",
      "        display: flex;",
      "        flex-direction: column;",
      "        align-items: center;",
      "        gap: 0.5rem;",
      "        text-align: center;",
      "        min-height: 90px;",
      "        position: relative;",
      "        overflow: hidden;",
      "        opacity: 0;",
      "        transform: translateY(20px);",
      "        animation: fadeInUp 0.5s ease forwards;",
      "      }",
      "      ",
      "      .scenario-btn:nth-child(1) { animation-delay: 0.1s; }",
      "      .scenario-btn:nth-child(2) { animation-delay: 0.2s; }",
      "      .scenario-btn:nth-child(3) { animation-delay: 0.3s; }",
      "      .scenario-btn:nth-child(4) { animation-delay: 0.4s; }",
      "      .scenario-btn:nth-child(5) { animation-delay: 0.5s; }",
      "      .scenario-btn:nth-child(6) { animation-delay: 0.6s; }",
      "      ",
      "      .scenario-btn::before {",
      "        content: '';",
      "        position: absolute;",
      "        top: 0;",
      "        left: -100%;",
      "        width: 100%;",
      "        height: 100%;",
      "        background: linear-gradient(90deg, transparent, rgba(255, 215, 0, 0.3), transparent);",
      "        transition: left 0.5s ease;",
      "      }",
      "      ",
      "      .scenario-btn:hover {",
      "        border-color: var(--secondary-color);",
      "        transform: translateY(-4px);",
      "        box-shadow: 0 8px 25px rgba(255, 215, 0, 0.3);",
      "      }",
      "      ",
      "      .scenario-btn:hover::before {",
      "        left: 100%;",
      "      }",
      "      ",
      "      .scenario-btn.active {",
      "        border-color: var(--secondary-color);",
      "        background: linear-gradient(135deg, var(--secondary-color), #FFA500);",
      "        color: var(--primary-color);",
      "        transform: translateY(-2px);",
      "        box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);",
      "      }",
      "      ",
      "      .scenario-btn.active .scenario-icon {",
      "        transform: scale(1.2);",
      "      }",
      "      ",
      "      .scenario-icon {",
      "        font-size: 1.5rem;",
      "        transition: transform 0.3s ease;",
      "      }",
      "      ",
      "      .scenario-text {",
      "        font-size: 0.9rem;",
      "        font-weight: 600;",
      "        line-height: 1.2;",
      "      }",
      "      ",
      "      /* Enhanced Input Section */",
      "      .enhanced-input-section {",
      "        opacity: 0;",
      "        animation: fadeInUp 0.6s ease forwards 0.4s;",
      "      }",
      "      ",
      "      .input-container {",
      "        margin-bottom: 1.5rem;",
      "      }",
      "      ",
      "      .input-label {",
      "        display: block;",
      "        font-size: 1.1rem;",
      "        font-weight: 600;",
      "        color: var(--primary-color);",
      "        margin-bottom: 0.75rem;",
      "        text-align: center;",
      "      }",
      "      ",
      "      .smart-input-wrapper {",
      "        position: relative;",
      "        max-width: 600px;",
      "        margin: 0 auto;",
      "      }",
      "      ",
      "      .smart-input {",
      "        width: 100%;",
      "        padding: 1rem 3rem 1rem 1rem;",
      "        border: 2px solid #e0e0e0;",
      "        border-radius: 12px;",
      "        font-size: 1rem;",
      "        line-height: 1.5;",
      "        transition: all 0.3s ease;",
      "        background: white;",
      "        min-height: 80px;",
      "        resize: vertical;",
      "        word-wrap: break-word;",
      "        overflow-wrap: break-word;",
      "        white-space: pre-wrap;",
      "        overflow-x: hidden;",
      "        overflow-y: auto;",
      "        font-family: inherit;",
      "        box-sizing: border-box;",
      "        vertical-align: top;",
      "      }",
      "      ",
      "      .smart-input:focus {",
      "        outline: none;",
      "        border-color: var(--secondary-color);",
      "        box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.2);",
      "        transform: translateY(-2px);",
      "      }",
      "      ",
,
      "      ",
      "      .input-actions {",
      "        position: absolute;",
      "        top: 50%;",
      "        right: 0.75rem;",
      "        transform: translateY(-50%);",
      "        display: flex;",
      "        gap: 0.5rem;",
      "      }",
      "      ",
      "      .clear-input-btn {",
      "        background: none;",
      "        border: none;",
      "        padding: 0.5rem;",
      "        border-radius: 6px;",
      "        cursor: pointer;",
      "        color: #666;",
      "        transition: all 0.3s ease;",
      "        opacity: 0;",
      "        transform: scale(0.8);",
      "      }",
      "      ",
      "      .smart-input:not(:placeholder-shown) ~ .input-actions .clear-input-btn {",
      "        opacity: 1;",
      "        transform: scale(1);",
      "      }",
      "      ",
      "      .clear-input-btn:hover {",
      "        background: #f5f5f5;",
      "        color: var(--primary-color);",
      "      }",
      "      ",
      "      .input-hint {",
      "        text-align: center;",
      "        font-size: 0.9rem;",
      "        color: #666;",
      "        margin-top: 0.75rem;",
      "        line-height: 1.4;",
      "      }",
      "      ",
      "      /* Animation Keyframes */",
      "      @keyframes fadeInUp {",
      "        from {",
      "          opacity: 0;",
      "          transform: translateY(20px);",
      "        }",
      "        to {",
      "          opacity: 1;",
      "          transform: translateY(0);",
      "        }",
      "      }",
      "      ",
,
      "      ",
      "      /* Typing Animation for Examples */",
      "      .typing-animation {",
      "        border-right: 2px solid var(--secondary-color);",
      "        animation: blink 1s infinite;",
      "      }",
      "      ",
      "      @keyframes blink {",
      "        0%, 50% { border-color: var(--secondary-color); }",
      "        51%, 100% { border-color: transparent; }",
      "      }",
      "      ",
      "      /* Mobile Responsiveness */",
      "      @media (max-width: 768px) {",
      "        .enhanced-hero-form {",
      "          padding: 0 0.75rem;",
      "        }",
      "        ",
      "        .quick-start-title {",
      "          font-size: 1.1rem;",
      "        }",
      "        ",
      "        .scenario-buttons {",
      "          grid-template-columns: repeat(2, 1fr);",
      "          gap: 0.75rem;",
      "        }",
      "        ",
      "        .scenario-btn {",
      "          padding: 0.75rem 0.5rem;",
      "          min-height: 80px;",
      "        }",
      "        ",
      "        .scenario-icon {",
      "          font-size: 1.3rem;",
      "        }",
      "        ",
              "        .scenario-text {",
        "          font-size: 0.8rem;",
        "        }",
        "        ",
        "        .smart-input {",
        "          padding: 0.875rem 2.5rem 0.875rem 0.875rem;",
        "          font-size: 0.95rem;",
        "          min-height: 70px;",
        "          word-wrap: break-word;",
        "          overflow-wrap: break-word;",
        "        }",
        "        ",
        "        .loading-animation {",
        "          padding: 1rem;",
        "        }",
        "        ",
        "        .loading-spinner {",
        "          width: 28px;",
        "          height: 28px;",
        "        }",
        "        ",
        "        .loading-text {",
        "          font-size: 0.9rem;",
        "        }",
        "        ",
        "        .loading-context {",
        "          font-size: 0.8rem;",
        "        }",
      "        ",
      "        .input-label {",
      "          font-size: 1rem;",
      "        }",
      "      }",
      "      ",
      "      @media (max-width: 480px) {",
      "        .scenario-buttons {",
      "          grid-template-columns: 1fr;",
      "          gap: 0.5rem;",
      "        }",
      "        ",
      "        .scenario-btn {",
      "          flex-direction: row;",
      "          gap: 0.75rem;",
      "          min-height: 60px;",
      "          text-align: left;",
      "          justify-content: flex-start;",
      "          padding: 0.75rem 1rem;",
      "        }",
      "        ",
      "        .scenario-icon {",
      "          font-size: 1.2rem;",
      "          min-width: 24px;",
      "        }",
      "      }",
      "      ",
      "      /* =================================================== */",
      "      /* End Enhanced Hero Form Styles */",
      "      /* =================================================== */",
      "      ",
      "      /* =================================================== */",
      "      /* Modal Overlay Full Screen Styling */",
      "      /* =================================================== */",
      "      ",
      "      #modal-overlay {",
      "        display: none;",
      "        position: fixed;",
      "        top: 0;",
      "        left: 0;",
      "        width: 100vw;",
      "        height: 100vh;",
      "        background: rgba(0, 0, 0, 0.85);",
      "        backdrop-filter: blur(10px);",
      "        z-index: 10000;",
      "        align-items: center;",
      "        justify-content: center;",
      "        opacity: 0;",
      "        transition: opacity 0.3s ease;",
      "      }",
      "      ",
      "      #modal-overlay[aria-hidden='false'] {",
      "        display: flex;",
      "        opacity: 1;",
      "      }",
      "      ",
      "      #modal-content {",
      "        background: white;",
      "        border-radius: 16px;",
      "        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);",
      "        max-width: 90vw;",
      "        max-height: 90vh;",
      "        width: 800px;",
      "        overflow: hidden;",
      "        position: relative;",
      "        transform: scale(0.9);",
      "        transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);",
      "        display: flex;",
      "        flex-direction: column;",
      "      }",
      "      ",
      "      #modal-overlay[aria-hidden='false'] #modal-content {",
      "        transform: scale(1);",
      "      }",
      "      ",
      "      .modal-close-x {",
      "        position: absolute;",
      "        top: 16px;",
      "        right: 16px;",
      "        background: none;",
      "        border: none;",
      "        font-size: 24px;",
      "        cursor: pointer;",
      "        color: #666;",
      "        width: 32px;",
      "        height: 32px;",
      "        border-radius: 50%;",
      "        display: flex;",
      "        align-items: center;",
      "        justify-content: center;",
      "        transition: all 0.2s ease;",
      "        z-index: 10001;",
      "      }",
      "      ",
      "      .modal-close-x:hover {",
      "        background: #f5f5f5;",
      "        color: #333;",
      "      }",
      "      ",
      "      #modal-title {",
      "        padding: 24px 60px 16px 24px;",
      "        margin: 0;",
      "        font-size: 1.5rem;",
      "        border-bottom: 1px solid #e0e0e0;",
      "      }",
      "      ",
      "      #modal-progress {",
      "        padding: 16px 24px;",
      "        border-bottom: 1px solid #e0e0e0;",
      "        display: none;",
      "      }",
      "      ",
      "      #modal-progress-bar {",
      "        width: 100%;",
      "        height: 6px;",
      "        background: #e0e0e0;",
      "        border-radius: 3px;",
      "        overflow: hidden;",
      "        margin-bottom: 8px;",
      "      }",
      "      ",
      "      #modal-progress-bar::after {",
      "        content: '';",
      "        display: block;",
      "        height: 100%;",
      "        background: linear-gradient(90deg, var(--secondary-color), #FFA500);",
      "        width: 0%;",
      "        transition: width 0.3s ease;",
      "        animation: progressPulse 2s ease-in-out infinite;",
      "      }",
      "      ",
      "      @keyframes progressPulse {",
      "        0%, 100% { opacity: 1; }",
      "        50% { opacity: 0.7; }",
      "      }",
      "      ",
      "      #modal-progress-text {",
      "        font-size: 0.9rem;",
      "        color: #666;",
      "        text-align: center;",
      "      }",
      "      ",
      "      #modal-step-content {",
      "        flex: 1;",
      "        padding: 24px;",
      "        overflow-y: auto;",
      "        max-height: 60vh;",
      "      }",
      "      ",
      "      #cta-options {",
      "        padding: 16px 24px;",
      "        border-top: 1px solid #e0e0e0;",
      "        border-bottom: 1px solid #e0e0e0;",
      "        background: #fafafa;",
      "      }",
      "      ",
      "      #modal-navigation {",
      "        padding: 16px 24px;",
      "        display: flex;",
      "        justify-content: space-between;",
      "        align-items: center;",
      "        background: white;",
      "      }",
      "      ",
      "      .modal-button {",
      "        padding: 8px 16px;",
      "        border: 2px solid var(--secondary-color);",
      "        background: white;",
      "        color: var(--primary-color);",
      "        border-radius: 6px;",
      "        cursor: pointer;",
      "        font-weight: 600;",
      "        transition: all 0.2s ease;",
      "      }",
      "      ",
      "      .modal-button:hover {",
      "        background: var(--secondary-color);",
      "        transform: translateY(-1px);",
      "      }",
      "      ",
      "      @media (max-width: 768px) {",
      "        #modal-content {",
      "          width: 95vw;",
      "          max-height: 95vh;",
      "        }",
      "        ",
      "        #modal-title {",
      "          padding: 16px 50px 12px 16px;",
      "          font-size: 1.3rem;",
      "        }",
      "        ",
      "        #modal-step-content {",
      "          padding: 16px;",
      "          max-height: 50vh;",
      "        }",
      "      }",
      "      ",
      "      /* =================================================== */",
      "      .loading-skeleton {",
      "        background: linear-gradient(90deg, #eee 25%, #ddd 37%, #eee 63%);",
      "        background-size: 400% 100%;",
      "        animation: skeleton 1.2s ease-in-out infinite;",
      "      }",
      "      @keyframes skeleton {",
      "        0% { background-position: 100% 0; }",
      "        100% { background-position: 0 0; }",
      "      }",
      "      /* End Modal Overlay Styling */",
      "      /* =================================================== */",
      "      ",
      // ... existing code ...
"    </style>",
"<script src=\"https://cdn.jsdelivr.net/npm/animejs@3.2.1/lib/anime.min.js\"></script>",
"  </head>",
"  <body>",
"    ",
"<header class=\"top-bar\" role=\"banner\">",
"      <div class=\"top-bar__inner\">",
"        <a href=\"/\" class=\"top-bar__logo\" aria-label=\"10-7.org home\">10-7.org</a>",
"        <button class=\"top-bar__toggle\" id=\"navToggle\" aria-label=\"Toggle menu\" aria-controls=\"topNav\" aria-expanded=\"false\">☰</button>",
"        <nav class=\"top-bar__nav\" id=\"topNav\" role=\"navigation\">",
"          <ul class=\"nav-links__list\">",
"            <li><a href=\"#learn-section\" class=\"nav-links__link\">Learn</a></li>",
"            <li><a href=\"#impact-calculator\" class=\"nav-links__link\">Act</a></li>",
"            <li><a href=\"#ai-tools\" class=\"nav-links__link\">Ask AI</a></li>",
"            <li><a href=\"#analyze-section\" class=\"nav-links__link\">Analyze</a></li>",
"          </ul>",
"        </nav>",
        "        <div class=\"top-bar__account\" id=\"topBarAccount\">",
        "          <div id=\"daysSinceOct7\" class=\"days-since-oct7\">",
        "            <span id=\"dayHostageInfo\">Day <strong id=\"dayCountNum\" class=\"day-count\">" + daysSinceOct7 + "</strong> | <span id=\"hostageCount\">≈50</span> hostages remain (at least 20 believed alive)</span>",
        "          </div>",
        "        </div>",
"      </div>",
"    </header>",
"<canvas id=\"canvas\"></canvas>",
"",
"<section class=\"hero-section body-wrapper-3d-tilt\">",
"",
"<canvas id=\"dotsCanvas\" class=\"dots-canvas\"></canvas>",
"  <div class=\"hero-content\">",
"    <div class=\"hero-badge-container\"></div>",
"    <h1 class=\"hero-headline\">Learn About October 7th & Combat Hate with AI <span class=\"heart-symbol\"></span></h1>",
"    <h2 class=\"hero-subheadline\"><span id=\"subheadlinePart1\">Educational</span><br><span id=\"subheadlinePart2\">AI learning tools</span><br><span id=\"subheadlinePart3\">to combat hatred</span>.</h2>",
"    <div id=\"latest-news\" class=\"latest-news\">Loading latest news...</div>",
"",
"<div class=\"hero-prompt-wrapper enhanced-hero-form\" style=\"margin-top: 3rem;\">",
"  <!-- Quick Start Scenarios -->",
"  <div class=\"quick-start-section\">",
"    <h3 class=\"quick-start-title\">Choose your starting point:</h3>",
"    <div class=\"scenario-buttons\">",
"      <button class=\"scenario-btn\" data-scenario=\"learn\" data-example=\"Summarize what happened on October 7 2023, including the rocket attacks, infiltrations, casualties and hostages.\" title=\"Summarize what happened on October 7 2023, including the rocket attacks, infiltrations, casualties and hostages.\">",
"        <span class=\"scenario-icon\" aria-hidden=\"true\">📚</span>",
"        <span class=\"scenario-text\">Learn the Facts</span>",
"      </button>",
"      <button class=\"scenario-btn\" data-scenario=\"respond\" data-example=\"How can I respond to common myths or misinformation about the October 7 attack and antisemitism?\" title=\"How can I respond to common myths or misinformation about the October 7 attack and antisemitism?\">",
"        <span class=\"scenario-icon\" aria-hidden=\"true\">🛡️</span>",
"        <span class=\"scenario-text\">Counter Misinformation</span>",
"      </button>",
"      <button class=\"scenario-btn\" data-scenario=\"support\" data-example=\"What can I do to support the remaining hostages and their families?\" title=\"What can I do to support the remaining hostages and their families?\">",
"        <span class=\"scenario-icon\" aria-hidden=\"true\">💛</span>",
"        <span class=\"scenario-text\">Support Hostages</span>",
"      </button>",
"      <button class=\"scenario-btn\" data-scenario=\"teach\" data-example=\"What resources can I use to teach about antisemitism, Jewish history and the October 7 attack?\" title=\"What resources can I use to teach about antisemitism, Jewish history and the October 7 attack?\">",
"        <span class=\"scenario-icon\" aria-hidden=\"true\">🎓</span>",
"        <span class=\"scenario-text\">Educate Others</span>",
"      </button>",
"      <button class=\"scenario-btn\" data-scenario=\"act\" data-example=\"How can I take action against antisemitism and hate in my community?\" title=\"How can I take action against antisemitism and hate in my community?\">",
"        <span class=\"scenario-icon\" aria-hidden=\"true\">✊</span>",
"        <span class=\"scenario-text\">Take Action</span>",
"      </button>",
"      <button class=\"scenario-btn\" data-scenario=\"custom\" data-example=\"\">",
"        <span class=\"scenario-icon\" aria-hidden=\"true\">✏️</span>",
"        <span class=\"scenario-text\">Custom Request</span>",
"      </button>",
"    </div>",
"  </div>",
"  ",
"  <!-- Enhanced Input Section -->",
"  <div class=\"enhanced-input-section\">",
"    <div class=\"input-container\">",
"      <label for=\"hero-user-challenge\" class=\"input-label\">What would you like help with?</label>",
"      <div class=\"smart-input-wrapper\">",
        "        <textarea id=\"hero-user-challenge\" class=\"smart-input\" placeholder=\"\" aria-required=\"true\" aria-describedby=\"smart-hint\" rows=\"3\"></textarea>",
"        <input type=\"hidden\" id=\"hero-user-role\" value=\"learner\" />",
"        <div class=\"animated-placeholder\" id=\"animated-placeholder\">",
"          <span class=\"placeholder-text\">Click a button above or describe what you need...</span>",
"        </div>",
"        <div class=\"input-actions\">",
"          <button type=\"button\" class=\"clear-input-btn\" id=\"clear-input\" aria-label=\"Clear input\">",
"            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">",
"              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>",
"              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>",
"            </svg>",
"          </button>",
"        </div>",
"      </div>",
"      <div id=\"smart-hint\" class=\"input-hint\">",
"        Choose a scenario above or describe your specific need - our AI will provide personalized guidance",
"      </div>",
"    </div>",
"  </div>",
"  <div id=\"chatResponse\" class=\"chat-response\"></div>  ",
"  <div class=\"cta-container\">",
"    <button id=\"refresh-advice-btn\" class=\"refresh-advice-btn\" title=\"Get a surprising new idea (-1 credit)\" aria-label=\"Refresh advice with new perspective\">",
"        <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' aria-hidden='true'><path d='M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z'/></svg>",
"    </button>",
"    <button id=\"surprise-me-btn\" class=\"surprise-me-btn\" title=\"Get creative learning analogies (-1 credit)\" aria-label=\"Get creative analogies for learning\" style=\"display: none;\">",
"        <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' aria-hidden='true'><path d='M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z'/></svg>",
"    </button>",
"    <button class=\"hero-cta primary-cta\" aria-label=\"Start personalized learning experience\">",
"      <span class=\"cta-static\">Learn & Act</span>",
"      <span class=\"cta-dots\"></span>",
"    </button>",
"  </div>",
"  <p class=\"hero-description\">",
    "    <b>Get personalized support based on your role and needs. Learn facts about October 7th, counter false claims, express solidarity with hostages and victims, and take meaningful action to bring them home.</b>",
"  </p>",
"</div>",
"<div class=\"scroll-down-prompt\" role=\"button\" tabindex=\"0\" aria-label=\"Scroll to impact calculator\" onclick=\"document.getElementById('impact-calculator').scrollIntoView({ behavior: 'smooth' });\" onkeydown=\"if(event.key==='Enter'||event.key===' ')document.getElementById('impact-calculator').scrollIntoView({behavior:'smooth'});\">",
"  <div style=\"text-align:center;\">Scroll Down</div>",
"  <svg class=\"scroll-down-arrow\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8 12l8 8 8-8\" stroke=\"#111\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>",
"</div>",
"</section>",
"",
      "    ",
    "      <!-- BEGIN: Impact Simulator Section -->",
    "      <section class=\"impact-simulator-section reveal-later\" id=\"impact-calculator\">",
    "        <div class=\"main-wrapper\">",
    "          <div class=\"impact-calculator-card\" tabindex=\"0\">",
    "            <h2 class=\"impact-title\">Allies Educated Calculator</h2>",
"            <p class=\"impact-description\">Calculate how many allies you can educate about October 7th and antisemitism through your daily efforts</p>",
    "            <div class=\"simulator-grid\">",
    "              <div class=\"slider-container\">",
    "                <label for=\"people-slider\" class=\"slider-label\">Allies Educated per Day</label>",
    "                <div class=\"slider-wrapper\">",
    "                  <input type=\"range\" id=\"people-slider\" class=\"impact-slider\" min=\"0\" max=\"50\" value=\"10\" aria-label=\"Allies educated per day slider\" aria-valuemin=\"0\" aria-valuemax=\"50\" aria-valuenow=\"10\" />",
    "                  <div class=\"slider-track-fill\" id=\"people-track\"></div>",
    "                </div>",
    "                <label for=\"people-input\" class=\"sr-only\">Allies Educated per Day</label>",
    "                <input type=\"number\" id=\"people-input\" class=\"impact-number-input\" min=\"0\" max=\"50\" value=\"10\" aria-label=\"Allies educated per day input\" aria-valuemin=\"0\" aria-valuemax=\"50\" aria-valuenow=\"10\" />",
    "                <div id=\"people-value\" class=\"slider-value\">10</div>",
    "              </div>",
    "              <div class=\"slider-container\">",
    "                <label for=\"share-slider\" class=\"slider-label\">Share Forward Rate (%)</label>",
    "                <div class=\"slider-wrapper\">",
    "                  <input type=\"range\" id=\"share-slider\" class=\"impact-slider\" min=\"0\" max=\"100\" value=\"20\" aria-label=\"Share forward rate slider\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"20\" />",
    "                  <div class=\"slider-track-fill\" id=\"share-track\"></div>",
    "                </div>",
    "                <label for=\"share-input\" class=\"sr-only\">Share Forward Rate (%)</label>",
    "                <input type=\"number\" id=\"share-input\" class=\"impact-number-input\" min=\"0\" max=\"100\" value=\"20\" aria-label=\"Share forward rate input\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"20\" />",
    "                <div id=\"share-value\" class=\"slider-value\">20%</div>",
    "              </div>",
    "            </div>",
    "            <div class=\"impact-result\">",
    "              <h3 class=\"impact-result-title\">Allies Educated per Month:</h3>",
"              <div id=\"impact-number\" class=\"impact-number\">360</div>",
"              <progress id=\"impact-progress\" max=\"5000\" value=\"360\" aria-label=\"Cumulative allies educated\"></progress>",
"              <div class=\"impact-formula\">",
"                <span class=\"formula-info\" title=\"Based on ADL research showing educated communities are 3x more likely to recognize and report antisemitic incidents.\">ℹ️</span>",
"                Formula: Allies per day × 30 × (1 + Share rate / 100)",
"              </div>",
"              <div class=\"share-info\" title=\"Share Forward Rate represents the percentage of allies who will forward your educational posts to others.\">Share Forward Rate = % of allies who will forward your educational posts</div>",
"            </div>",
    "          </div>",
    "        </div>",
    "      </section>",
    "      <!-- END: Impact Simulator Section -->",
    "      ",
          "      <!-- BEGIN: October 7th Education Resources -->",
"      <section class=\"educational-resources-section\" id=\"october-7-resources\">",
"        <div class=\"resources-container\">",
"          <header class=\"resources-header\">",
"            <h2 class=\"resources-title\">October 7th &amp; Hostage Resources</h2>",
"            <p class=\"resources-subtitle\">Trauma-sensitive educational materials to understand, remember, and take action</p>",
"            <div class=\"progress-indicator\">",
"              <span id=\"resources-progress\">0/6 Resources Explored</span>",
"              <div class=\"progress-bar\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"6\" aria-valuenow=\"1\">",
"                <div class=\"progress-fill\" id=\"resources-progress-fill\"></div>",
"              </div>",
"            </div>",
"            <div class=\"content-warning\">",
"              <label class=\"warning-toggle\">",
"                <input type=\"checkbox\" id=\"content-warnings\" checked>",
"                <span class=\"toggle-text\">🛡️ Content warnings enabled</span>",
"              </label>",
"            </div>",
"          </header>",
"          ",
"          <div class=\"accordion-container\">",
"            <!-- Start Here Card -->",
"            <details class=\"resource-accordion start-here\" data-resource=\"start\" open>",
"              <summary class=\"accordion-header\">",
"                <div class=\"accordion-icon\">🏁</div>",
"                <div class=\"accordion-title\">",
"                  <h3>Getting Started with October 7th Resources</h3>",
"                  <span class=\"accordion-subtitle\">Begin your educational journey here</span>",
"                </div>",
"                <div class=\"accordion-indicator\">▼</div>",
"              </summary>",
"              <div class=\"accordion-content\">",
"                <div class=\"content-grid\">",
"                  <div class=\"content-text\">",
"                    <p class=\"intro-text\">Begin with the timeline below to understand the events. Key facts you'll learn:</p>",
"                    <ul class=\"key-facts\">",
"                      <li><strong>1,200 people killed</strong> on October 7th, 2023</li>",
"                      <li><strong>240 hostages taken</strong> by Hamas terrorists</li>",
"                      <li><strong>337% rise in antisemitism</strong> globally post-October 7th (AJC data)</li>",
"                      <li><strong>Educated communities are 3x more effective</strong> at prevention (ADL research)</li>",
"                    </ul>",
"                    <p class=\"guidance\">💡 <em>Expand sections below as you're ready. Each contains trauma-sensitive, educational content focused on hope and action.</em></p>",
"                  </div>",
"                </div>",
"                <div class=\"action-buttons\">",
"                  <button class=\"primary-action-btn\" onclick=\"document.getElementById('timeline-accordion').open = true; document.getElementById('timeline-accordion').scrollIntoView({behavior: 'smooth', block: 'center'});\">",
"                    <span class=\"btn-icon\">📚</span>",
"                    Start with Timeline",
"                  </button>",
"                </div>",
"              </div>",
"            </details>",
"            ",
"            <!-- October 7th Timeline -->",
"            <details class=\"resource-accordion\" data-resource=\"timeline\" id=\"timeline-accordion\">",
"              <summary class=\"accordion-header\">",
"                <div class=\"accordion-icon\">📅</div>",
"                <div class=\"accordion-title\">",
"                  <h3>October 7th Timeline: Understanding the Events</h3>",
"                  <span class=\"accordion-subtitle\">Key moments and facts from that tragic day</span>",
"                </div>",
"                <div class=\"accordion-indicator\">▼</div>",
"              </summary>",
"              <div class=\"accordion-content\">",
"                <div class=\"content-warning-banner\" data-warning=\"timeline\">",
"                  <span class=\"warning-icon\">⚠️</span>",
"                  <span>Content includes references to violence. Information presented for educational understanding.</span>",
"                  <button class=\"hide-warning-btn\" aria-label=\"Hide warning\">Hide</button>",
"                </div>",
"                <div class=\"timeline-container\">",
"                  <div class=\"timeline-item\">",
"                    <div class=\"timeline-dot\"></div>",
"                    <div class=\"timeline-content\">",
"                      <strong>6:30 AM</strong> - Rocket barrage begins from Gaza",
"                    </div>",
"                  </div>",
"                  <div class=\"timeline-item\">",
"                    <div class=\"timeline-dot\"></div>",
"                    <div class=\"timeline-content\">",
"                      <strong>Morning</strong> - Hamas terrorists breach security barriers",
"                    </div>",
"                  </div>",
"                  <div class=\"timeline-item\">",
"                    <div class=\"timeline-dot\"></div>",
"                    <div class=\"timeline-content\">",
"                      <strong>Throughout day</strong> - 1,200 people killed, 240 taken hostage",
"                    </div>",
"                  </div>",
"                  <div class=\"timeline-item\">",
"                    <div class=\"timeline-dot\"></div>",
"                    <div class=\"timeline-content\">",
"                      <strong>Ongoing</strong> - Global efforts to bring hostages home continue",
"                    </div>",
"                  </div>",
"                </div>",
"                <div class=\"action-buttons\">",
"                  <button id=\"timeline-learn-btn\" class=\"primary-action-btn\" aria-expanded=\"false\" aria-controls=\"timeline-extra\">",
"                    <span class=\"btn-icon\">📖</span>",
"                    Learn More Details",
"                  </button>",
"                  <button class=\"secondary-action-btn\" onclick=\"navigator.share({title:'October 7th: Remember the Victims',text:'Learn about October 7th and how to honor the memory of victims',url:window.location.href})\">",
"                    <span class=\"btn-icon\">📤</span>",
"                    Share Timeline",
"                  </button>",
"                </div>",
"              </div>",
"            </details>",
"            ",
"            <!-- Hostage Stories -->",
"            <details class=\"resource-accordion\" data-resource=\"hostages\">",
"              <summary class=\"accordion-header\">",
"                <div class=\"accordion-icon\">🤝</div>",
"                <div class=\"accordion-title\">",
"                  <h3>Hostage Advocacy: Bringing Them Home</h3>",
"                  <span class=\"accordion-subtitle\">Supporting families and advocating for release</span>",
"                </div>",
"                <div class=\"accordion-indicator\">▼</div>",
"              </summary>",
"              <div class=\"accordion-content\">",
"                <div class=\"content-grid\">",
"                  <div class=\"content-text\">",
"                    <p>Learn how to support hostage families and advocate for their loved ones' safe return:</p>",
"                    <ul class=\"action-list\">",
"                      <li>🎗️ <strong>Wear yellow ribbons</strong> - Symbol of hope for hostages</li>",
"                      <li>📣 <strong>Share their stories</strong> - Keep their names in public awareness</li>",
"                      <li>🕯️ <strong>Attend vigils</strong> - Show community solidarity</li>",
"                      <li>📧 <strong>Contact representatives</strong> - Advocate for diplomatic pressure</li>",
"                      <li>💝 <strong>Support families</strong> - Donate to verified organizations</li>",
"                    </ul>",
"                    <div class=\"highlight-box\">",
"                      <strong>240 hostages</strong> were taken on October 7th. Every action helps keep hope alive for their families.",
"                    </div>",
"                  </div>",
"                </div>",
"                <div class=\"action-buttons\">",
"                  <button class=\"primary-action-btn\" onclick=\"document.getElementById('hero-user-challenge').value='What can I do to support the remaining hostages and their families?'; document.querySelector('.hero-cta').click();\">",
"                    <span class=\"btn-icon\">💪</span>",
"                    Get Action Plan",
"                  </button>",
"                  <button class=\"secondary-action-btn share-story-btn\">",
"                    <span class=\"btn-icon\">💛</span>",
"                    Share Hope",
"                  </button>",
"                </div>",
"              </div>",
"            </details>",
"            ",
"            <!-- Educational Resources -->",
"            <details class=\"resource-accordion\" data-resource=\"education\">",
"              <summary class=\"accordion-header\">",
"                <div class=\"accordion-icon\">📚</div>",
"                <div class=\"accordion-title\">",
"                  <h3>Educational Resources &amp; Materials</h3>",
"                  <span class=\"accordion-subtitle\">Lesson plans, videos, and teaching guides</span>",
"                </div>",
"                <div class=\"accordion-indicator\">▼</div>",
"              </summary>",
"              <div class=\"accordion-content\">",
"                <div class=\"resources-grid\">",
"                  <div class=\"resource-item\">",
"                    <div class=\"resource-icon\">📄</div>",
"                    <div class=\"resource-info\">",
"                      <h4>Teaching Guides</h4>",
"                      <p>Age-appropriate lesson plans for educators</p>",
"                    </div>",
"                  </div>",
"                  <div class=\"resource-item\">",
"                    <div class=\"resource-icon\">🎥</div>",
"                    <div class=\"resource-info\">",
"                      <h4>Documentary Materials</h4>",
"                      <p>Verified video content and testimonies</p>",
"                    </div>",
"                  </div>",
"                  <div class=\"resource-item\">",
"                    <div class=\"resource-icon\">📊</div>",
"                    <div class=\"resource-info\">",
"                      <h4>ADL Data &amp; Statistics</h4>",
"                      <p>Research-backed antisemitism trends</p>",
"                    </div>",
"                  </div>",
"                  <div class=\"resource-item\">",
"                    <div class=\"resource-icon\">🗣️</div>",
"                    <div class=\"resource-info\">",
"                      <h4>Speaker Resources</h4>",
"                      <p>Connect with educational speakers</p>",
"                    </div>",
"                  </div>",
                "                </div>",
                "                <div class=\"dual-narratives-acknowledgment\">",
                "                  <h4>📚 Educational Perspective</h4>",
                "                  <p>We acknowledge that complex historical events can be viewed from multiple perspectives. Our educational materials are based on verified facts, credible sources (ADL, AJC, academic institutions), and focus on promoting understanding while combating hatred and misinformation. We encourage critical thinking and respectful dialogue while maintaining commitment to truth and human dignity.</p>",
                "                </div>",
                "                <div class=\"action-buttons\">",
                "                  <button class=\"primary-action-btn\" onclick=\"document.getElementById('hero-user-challenge').value='What resources can I use to teach about antisemitism, Jewish history and the October 7 attack?'; document.querySelector('.hero-cta').click();\">",
                "                    <span class=\"btn-icon\">🎓</span>",
                "                    Generate Custom Resources",
                "                  </button>",
                "                  <button class=\"secondary-action-btn\" onclick=\"document.getElementById('hero-user-challenge').value='Show me credible sources and research about October 7th and antisemitism trends.'; document.querySelector('.hero-cta').click();\">",
                "                    <span class=\"btn-icon\">📖</span>",
                "                    Explore Sources",
                "                  </button>",
                "                </div>",
"              </div>",
"            </details>",
"            ",
"            <!-- Global Impact & Statistics -->",
"            <details class=\"resource-accordion\" data-resource=\"impact\">",
"              <summary class=\"accordion-header\">",
"                <div class=\"accordion-icon\">🌍</div>",
"                <div class=\"accordion-title\">",
"                  <h3>Global Impact: 337% Rise in Antisemitism</h3>",
"                  <span class=\"accordion-subtitle\">Understanding the worldwide effects</span>",
"                </div>",
"                <div class=\"accordion-indicator\">▼</div>",
"              </summary>",
"              <div class=\"accordion-content\">",
"                <div class=\"stats-grid\">",
"                  <div class=\"stat-item\">",
"                    <div class=\"stat-number\" data-target=\"337\">0</div>",
"                    <div class=\"stat-label\">% Increase Post-Oct 7th</div>",
"                    <div class=\"stat-source\">AJC Research</div>",
"                  </div>",
"                  <div class=\"stat-item\">",
"                    <div class=\"stat-number\" data-target=\"10000\">0</div>",
"                    <div class=\"stat-label\">US Incidents in 2023</div>",
"                    <div class=\"stat-source\">ADL Data</div>",
"                  </div>",
"                  <div class=\"stat-item\">",
"                    <div class=\"stat-number\" data-target=\"3\">0</div>",
"                    <div class=\"stat-label\">x More Effective</div>",
"                    <div class=\"stat-source\">Educated Communities</div>",
"                  </div>",
"                </div>",
"                <div class=\"content-text\">",
"                  <p>Education and awareness are our most powerful tools:</p>",
"                  <ul class=\"impact-list\">",
"                    <li>💡 <strong>Knowledge prevents hate</strong> - Understanding leads to empathy</li>",
"                    <li>🏫 <strong>Schools make a difference</strong> - Educational programs reduce incidents</li>",
"                    <li>🤝 <strong>Communities unite</strong> - Collective action creates safer spaces</li>",
"                    <li>📈 <strong>Data drives change</strong> - Research guides effective prevention</li>",
"                  </ul>",
"                </div>",
"                <div class=\"action-buttons\">",
"                  <button class=\"primary-action-btn\" onclick=\"document.getElementById('hero-user-challenge').value='How can I respond to common myths or misinformation about the October 7 attack and antisemitism?'; document.querySelector('.hero-cta').click();\">",
"                    <span class=\"btn-icon\">📊</span>",
"                    Understand Crisis",
"                  </button>",
"                </div>",
"              </div>",
"            </details>",
"            ",
"            <!-- Prevention & Action -->",
"            <details class=\"resource-accordion\" data-resource=\"action\">",
"              <summary class=\"accordion-header\">",
"                <div class=\"accordion-icon\">🛡️</div>",
"                <div class=\"accordion-title\">",
"                  <h3>Prevention Strategies &amp; Community Action</h3>",
"                  <span class=\"accordion-subtitle\">Practical steps to combat antisemitism</span>",
"                </div>",
"                <div class=\"accordion-indicator\">▼</div>",
"              </summary>",
"              <div class=\"accordion-content\">",
"                <div class=\"content-text\">",
"                  <h4>Individual Actions:</h4>",
"                  <ol class=\"action-steps\">",
"                    <li><strong>Educate yourself</strong> - Learn about Jewish history and antisemitism</li>",
"                    <li><strong>Speak up</strong> - Challenge antisemitic comments when you hear them</li>",
"                    <li><strong>Support Jewish businesses</strong> - Show solidarity through economic support</li>",
"                    <li><strong>Attend community events</strong> - Participate in educational programs</li>",
"                    <li><strong>Share accurate information</strong> - Combat misinformation with facts</li>",
"                  </ol>",
"                  ",
"                  <h4>Community Initiatives:</h4>",
"                  <ul class=\"community-actions\">",
"                    <li>🏫 Partner with schools for Holocaust education</li>",
"                    <li>🕊️ Organize interfaith dialogue sessions</li>",
"                    <li>📱 Create social media awareness campaigns</li>",
"                    <li>👮 Work with local law enforcement on hate crime prevention</li>",
"                    <li>📰 Engage local media for educational coverage</li>",
"                  </ul>",
"                </div>",
"                <div class=\"action-buttons\">",
"                  <button class=\"primary-action-btn\" onclick=\"document.getElementById('hero-user-challenge').value='How can I take action against antisemitism and hate in my community?'; document.querySelector('.hero-cta').click();\">",
"                    <span class=\"btn-icon\">🏗️</span>",
"                    Build Action Plan",
"                  </button>",
"                  <button class=\"secondary-action-btn\" onclick=\"navigator.share({title:'Building Allies Against Hate',text:'Learn to create community action plans against antisemitism',url:window.location.href})\">",
"                    <span class=\"btn-icon\">📢</span>",
"                    Share Strategies",
"                  </button>",
"                </div>",
"              </div>",
"            </details>",
"          </div>",
"        </div>",
"      </section>",
"      <!-- END: October 7th Education Resources -->",
    "    <!-- BEGIN-antisemitism-chart -->",
"    <canvas id=\"antisemitismChart\" class=\"section-divider antisemitism-chart\" height=\"200\"></canvas>",
"    <!-- END-antisemitism-chart -->",
"    ",
    "    <!-- AI Tools Footer Section -->",
"    <section class=\"ai-tools-footer\" id=\"ai-tools\">",
"      <div class=\"container\">",
"        <div class=\"ai-footer-header reveal-later\">",
"          <h2 class=\"ai-footer-title\">Continue Your Journey</h2>",
"          <p class=\"ai-footer-subtitle\">Explore powerful AI tools designed to deepen understanding and combat antisemitism</p>",
"        </div>",
"        ",
"        <div class=\"ai-tools-grid\">",
"          <!-- Ask AI Expert Tool -->",
"          <div class=\"ai-tool-card reveal-later\" data-tool=\"ask-ai\">",
"            <div class=\"tool-icon\">",
"              <span class=\"icon-chat\">💬</span>",
"            </div>",
"            <div class=\"tool-content\">",
"              <h3>Ask Our AI Expert</h3>",
"              <p>Get instant, educated answers about antisemitism, history, and how to take action</p>",
"              <form id=\"ask-ai-form\" class=\"tool-form\">",
"                <div class=\"input-group\">",
"                  <input type=\"text\" id=\"ai-question\" placeholder=\"What would you like to know about antisemitism?\" class=\"tool-input\"/>",
"                  <button type=\"submit\" class=\"tool-submit-btn\">",
"                    <span class=\"btn-text\">Ask AI</span>",
"                    <span class=\"btn-icon\">→</span>",
"                  </button>",
"                </div>",
"              </form>",
"              <div id=\"answerOutput\" class=\"tool-output hidden\"></div>",
"            </div>",
"          </div>",
"          ",
"          <!-- Regional Insights Tool -->",
"          <div class=\"ai-tool-card reveal-later\" data-tool=\"location\">",
"            <div class=\"tool-icon\">",
"              <span class=\"icon-location\">🌍</span>",
"            </div>",
"            <div class=\"tool-content\">",
"              <h3>Regional Antisemitism Insights</h3>",
"              <p>Get location-specific statistics, trends, and educational resources for your area</p>",
"              <div class=\"tool-form\">",
"                <div class=\"input-group\">",
"                  <input type=\"text\" id=\"location-input\" placeholder=\"Enter your city or country\" class=\"tool-input\"/>",
"                  <button id=\"location-button\" class=\"tool-submit-btn\">",
"                    <span class=\"btn-text\">Get Insights</span>",
"                    <span class=\"btn-icon\">📍</span>",
"                  </button>",
"                  <button id=\"geo-button\" class=\"tool-submit-btn\" aria-label=\"Use my location\">📡</button>",
"                </div>",
"              </div>",
"              <div id=\"locResult\" class=\"tool-output hidden\"></div>",
"            </div>",
"          </div>",
"          ",
"          <!-- File Upload Tool -->",
"          <div class=\"ai-tool-card ai-tool-card--wide reveal-later\" data-tool=\"upload\">",
"            <div class=\"tool-icon\">",
"              <span class=\"icon-upload\">📄</span>",
"            </div>",
"            <div class=\"tool-content\">",
"              <h3>Document Analysis</h3>",
"              <p>Upload antisemitism documents for educational analysis with AI-powered summaries and historical context</p>",
"              <form id=\"upload-form\" enctype=\"multipart/form-data\" class=\"tool-form upload-form\">",
"                <div class=\"upload-area\">",
"                  <input type=\"file\" name=\"file\" id=\"fileInput\" accept=\".pdf,.txt,.docx\" required class=\"file-input\"/>",
"                  <label for=\"fileInput\" class=\"upload-label\">",
"                    <span class=\"upload-icon\">📁</span>",
"                    <span class=\"upload-text\">Click to upload or drag files here</span>",
"                    <span class=\"upload-formats\">PDF, TXT, DOCX supported</span>",
"                  </label>",
"                  <button type=\"submit\" class=\"tool-submit-btn upload-btn\">",
"                    <span class=\"btn-text\">Analyze Document</span>",
"                    <span class=\"btn-icon\">🔍</span>",
"                  </button>",
"                </div>",
"                <div class=\"upload-privacy\">",
"                  <span class=\"privacy-icon\">🔒</span>",
"                  <span class=\"privacy-text\">Files are processed privately by AI and not stored</span>",
"                </div>",
"              </form>",
"              <div id=\"analysisResult\" class=\"tool-output hidden\"></div>",
"            </div>",
"          </div>",
"          ",
"          <!-- Heroic Stories Tool -->",
"          <div class=\"ai-tool-card reveal-later\" data-tool=\"stories\">",
"            <div class=\"tool-icon\">",
"              <span class=\"icon-story\">⭐</span>",
"            </div>",
"            <div class=\"tool-content\">",
"              <h3>Stories of Resistance</h3>",
"              <p>Discover inspiring stories of courage from Holocaust rescuers to modern defenders</p>",
"              <div class=\"tool-form\">",
"                <button id=\"heroic-story-btn\" class=\"tool-submit-btn story-btn\">",
"                  <span class=\"btn-text\">Get Heroic Story</span>",
"                  <span class=\"btn-icon\">✨</span>",
"                </button>",
"              </div>",
"              <div id=\"storyOutput\" class=\"tool-output hidden\"></div>",
"            </div>",
"          </div>",
"        </div>",
"        ",
"        <!-- Footer Information -->",
"        <div class=\"ai-footer-info reveal-later\">",
"          <div class=\"footer-mission\">",
"            <h4>Our Mission</h4>",
"            <p>Using AI technology to create accessible, trauma-sensitive education that combats antisemitism and promotes understanding, remembrance, and action.</p>",
"          </div>",
"          <div class=\"footer-copyright\">",
"            <p>© 2024 10-7.org • All Rights Reserved • Powered by AI for Education</p>",
"          </div>",
"        </div>",
"      </div>",
"    </section>",
"    <footer class=\"site-footer\">",
"      <nav class=\"footer-links\">",
"        <a href=\"/contact\" target=\"_blank\" rel=\"noopener\">Contact</a>",
"        <a href=\"/privacy\" target=\"_blank\" rel=\"noopener\">Privacy Policy</a>",
"        <a href=\"/accessibility\" target=\"_blank\" rel=\"noopener\">Accessibility Statement</a>",
"        <a href=\"https://ajc.org\" target=\"_blank\" rel=\"noopener\">AJC</a>",
"        <a href=\"https://adl.org\" target=\"_blank\" rel=\"noopener\">ADL</a>",
"        <a href=\"https://bringthemhomenow.net\" target=\"_blank\" rel=\"noopener\">Hostages and Missing Families Forum</a>",
"      </nav>",
"    </footer>",

"    ",
    "    <div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-hidden=\"true\">",
    "      <div id=\"modal-content\">",
    "        <button id=\"modal-close-x\" class=\"modal-close-x\" aria-label=\"Close modal\">×</button>",
            "        <h2 id=\"modal-title\" style=\"margin-top: 0; color: var(--primary-color);\">Educational Journey</h2>",
    "        <div id=\"modal-progress\" aria-hidden=\"true\">",
    "          <div id=\"modal-progress-bar\"></div>",
    "          <div id=\"modal-progress-text\">Preparing your personalized lesson...</div>",
    "        </div>",
    "        <div id=\"modal-step-content\" tabindex=\"-1\">",
    "          <div id=\"scroll-indicator\" aria-hidden=\"true\">⇩</div>",
    "        </div>",
    "        <div id=\"cta-options\" role=\"group\" aria-label=\"Lesson navigation options\">",
    "        </div>",
    "        <div id=\"modal-navigation\">",
    "          <button id=\"modal-prev\" class=\"modal-button\" style=\"display: none;\" aria-label=\"Previous step\">← Previous</button>",
    "          <button id=\"modal-close\" class=\"modal-button\" aria-label=\"Close lesson\">Close</button>",
    "          <button id=\"modal-next\" class=\"modal-button\" style=\"display: none;\" aria-label=\"Next step\">Next →</button>",
    "        </div>",
    "      </div>",
    "    </div>",

"    </div>",
"    <script>",
"    /* === 10X IMPACT ENHANCEMENTS === */",
"    window.currentScenario = 'custom';",
"    ",
"    // Security: Input sanitization to prevent XSS and injection attacks",
"    function sanitizeInput(input) {",
"      if (typeof input !== 'string') return '';",
"      return input",
"        .replace(/[<>\"']/g, '') // Remove HTML/script injection characters",
"        .replace(/javascript:/gi, '') // Remove javascript: protocols",
"        .replace(/on\\w+=/gi, '') // Remove event handlers",
"        .trim()",
"        .substring(0, 500); // Limit length",
"    }",
"    ",
"    // Utility: promise timeout helper",
"    function withTimeout(promise, ms) {",
"      return Promise.race([",
"        promise,",
"        new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), ms))",
"      ]);",
"    }",
"    ",
"    // Offline fallback data for when API calls fail",
"    const offlineData = {",
"      hostageCount: 50,",
"      prompts: {",
"        learn: 'Summarize what happened on October 7 2023, including the rocket attacks, infiltrations, casualties and hostages.',",
"        respond: 'How can I respond to common myths or misinformation about the October 7 attack and antisemitism?',",
"        support: 'What can I do to support the remaining hostages and their families?',",
"        teach: 'What resources can I use to teach about antisemitism, Jewish history and the October 7 attack?',",
"        act: 'How can I take action against antisemitism and hate in my community?'",
"      },",
"      scenarioFallbacks: {",
"        learn: '**October 7 Timeline** – At 6:30 AM, Hamas launched roughly 2,200 rockets at southern and central Israel. Armed militants breached Israel\\u2019s borders by land, sea and air and attacked communities, killing about 1,200 people and injuring more than 6,900. At least 260 people were killed at a music festival, and Hamas kidnapped around 251 people. Israel declared war and mobilized 300,000 reservists.',",
"        respond: 'See “Countering common myths” section in the report above.',",
"        support: 'See “Support for hostages and families” section in the report above.',",
"        teach: 'See “Educational resources” section in the report above.',",
"        act: 'See “Action plan” section in the report above.'",
"      },",
"      timeline: [",
"        'Hamas attacks on October 7th resulted in over 1200 deaths.',",
"        'Hostages taken include babies, elderly, and foreign nationals.',",
"        'International community calls for their immediate release.'",
"      ],",
"      stories: [",
"        { title: 'Neighbors helping one another', summary: 'Communities came together to protect each other from violence and misinformation.' },",
"        { title: 'Students standing up', summary: 'University groups organized rallies in support of the hostages and against antisemitism.' }",
"      ]",
"    };",
"    ",
"    function shareFeedbackHTML() {",
"      return `<div class=\"share-feedback\"><button class=\"share-btn\" aria-label=\"Share response\" onclick=\"navigator.share?navigator.share({text:document.getElementById('answerOutput').innerText,url:window.location.href}):window.open('mailto:?subject=10-7.org%20info&body=' + encodeURIComponent(document.getElementById('answerOutput').innerText))\">Share</button> <span>Was this helpful?</span> <button onclick=\"actionTracker.track('helpful');this.textContent='Thanks!'\">Yes</button></div>`;",
"    }",
"    ",
"    // A/B Testing: CTA variants for conversion optimization",
"    const ctaVariants = [",
"      { text: 'Learn & Act', color: '#FFD700', description: 'Standard CTA' },",
"      { text: 'Start Learning', color: '#FFA500', description: 'Action-focused' },",
"      { text: 'Get Educated', color: '#FFD700', description: 'Direct approach' },",
"      { text: 'Join Movement', color: '#FFA500', description: 'Community-focused' }",
"    ];",
"    ",
"    // Action tracking for conversion optimization",
"    const actionTracker = {",
"      events: [],",
"      track: function(action, details = {}) {",
"        const event = {",
"          action,",
"          timestamp: Date.now(),",
"          details: sanitizeInput(JSON.stringify(details)),",
"          sessionId: this.getSessionId(),",
"          ctaVariant: this.getCurrentCTAVariant()",
"        };",
"        this.events.push(event);",
"        // In production, send to analytics endpoint",
"        console.log('📊 Action tracked:', event);",
"      },",
"      getSessionId: function() {",
"        if (!sessionStorage.getItem('sessionId')) {",
"          sessionStorage.setItem('sessionId', 'sess_' + Math.random().toString(36).substr(2, 9));",
"        }",
"        return sessionStorage.getItem('sessionId');",
"      },",
"      getCurrentCTAVariant: function() {",
"        return localStorage.getItem('ctaVariant') || 'A';",
"      }",
"    };",
"    ",
"    // Enhanced error handling with user-friendly messages",
"    function handleError(error, context = 'general', element = null) {",
"      console.error(`Error in ${context}:`, error);",
"      actionTracker.track('error', { context, message: error.message });",
"      ",
"      const userMessage = {",
"        network: 'Connection issue. Please check your internet and try again.',",
"        validation: 'Please check your input and try again.',",
"        general: 'Something went wrong. Our team has been notified.',",
"        api: 'Service temporarily unavailable. Please try again in a moment.'",
"      }[context] || 'An unexpected error occurred.';",
"      ",
"      if (element) {",
"        element.classList.add('error-state');",
"        const errorDiv = document.createElement('div');",
"        errorDiv.className = 'error-message';",
"        errorDiv.textContent = userMessage;",
"        errorDiv.setAttribute('role', 'alert');",
"        element.parentNode.insertBefore(errorDiv, element.nextSibling);",
"        ",
"        // Clear error after 5 seconds",
"        setTimeout(() => {",
"          element.classList.remove('error-state');",
"          if (errorDiv.parentNode) errorDiv.remove();",
"        }, 5000);",
"      }",
"    }",
"    ",
"    // Initialize A/B testing variant",
"    function initializeABTest() {",
"      if (!localStorage.getItem('ctaVariant')) {",
"        const variant = Math.random() < 0.5 ? 'A' : 'B';",
"        localStorage.setItem('ctaVariant', variant);",
"      }",
"      ",
      "      const variant = localStorage.getItem('ctaVariant');",
"      const ctaButton = document.querySelector('.hero-cta .cta-static');",
"      if (ctaButton && variant === 'B') {",
"        const randomVariant = ctaVariants[Math.floor(Math.random() * ctaVariants.length)];",
"        ctaButton.textContent = randomVariant.text;",
"        // Removed inline background styling to prevent highlighting",
"        actionTracker.track('ab_test_variant', { variant: randomVariant.description });",
"      }",
"    }",
"    ",
"    /* === END 10X IMPACT ENHANCEMENTS === */",
"    ",
"    let ctaAnimationInterval;",
"      function animateCTAButton() {",
"          const dotSpan = document.querySelector('.cta-dots');",
"          const staticSpan = document.querySelector('.cta-static');",
"          if (!dotSpan || !staticSpan) return;",
"          let dotCount = 1;",
"          ctaAnimationInterval = setInterval(() => {",
"              if (!dotSpan.parentElement.textContent.startsWith(staticSpan.textContent)) {",
"                  clearInterval(ctaAnimationInterval);",
"                  return;",
"              }",
"              dotSpan.textContent = '.'.repeat(dotCount);",
"              dotCount = dotCount === 3 ? 1 : dotCount + 1;",
"          }, 500);",
"      }",
"      document.addEventListener('DOMContentLoaded', animateCTAButton);",
"      function animateHeroResults() {",
"        /* anime.js is loaded later; bail out gracefully if not ready */",
"        if (typeof anime === 'undefined') return;",
"        anime({",
"          targets: '#chatResponse',",
"          scale: [0.95, 1],",
"          opacity: [0, 1],",
"          easing: 'easeOutBack',",
"          duration: 600",
"        });",
"      }",
"      const navToggle  = document.getElementById('navToggle');",
"      const topNav     = document.getElementById('topNav');",
"      const topAcct    = document.getElementById('topBarAccount');",
"      navToggle.addEventListener('click', () => {",
"        const open = topNav.classList.toggle('active');",
"        navToggle.setAttribute('aria-expanded', open);",
"        /* Move account panel into off‑canvas on mobile */",
"        if (window.matchMedia('(max-width:768px)').matches){",
"          open ? topNav.appendChild(topAcct) : document.querySelector('.top-bar__inner').appendChild(topAcct);",
"          topAcct.style.display = 'flex';",
"        }",
"        document.body.classList.toggle('nav-open', open);",
"      });",
      "      /* Close menu after link click - external links open in new tab */",
      "      document.querySelectorAll('.nav-links__link').forEach(a=>a.addEventListener('click',(e)=>{",
      "        if(topNav.classList.contains('active')) navToggle.click();",
      "        ",
      "        // Handle internal vs external links",
      "        const href = a.getAttribute('href');",
      "        if (href.startsWith('#')) {",
      "          e.preventDefault();",
      "          const targetElement = document.querySelector(href);",
      "          if (targetElement) {",
      "            targetElement.scrollIntoView({ ",
      "              behavior: 'smooth', ",
      "              block: 'start',",
      "              inline: 'nearest'",
      "            });",
      "          }",
      "        }",
      "        // External links will open in new tab naturally due to target=\"_blank\"",
      "      }));",
"      document.addEventListener('click', (e) => {",
"        if (window.matchMedia('(max-width:768px)').matches && topNav.classList.contains('active') &&",
"            !navToggle.contains(e.target) && !topNav.contains(e.target)) {",
"          navToggle.click();",
"        }",
"      });",
      "      let apiDisabled = false;",
      "      ",
      "      // Days since October 7, 2023 counter",
"      function updateDaysSinceOct7() {",
"        const oct7 = Date.UTC(2023, 9, 7);",
"        const today = Date.now();",
"        const daysDiff = Math.floor((today - oct7) / (1000 * 60 * 60 * 24));",
"        const dayCountEl = document.getElementById('dayCountNum');",
"        if (dayCountEl) { dayCountEl.textContent = String(daysDiff); }",
"      }",
      "      ",
      "      // Refresh hostage count from worker API",
"      async function refreshHostageCount() {",
"        const hostageCountEl = document.getElementById('hostageCount');",
"        if (!hostageCountEl) return;",
"        updateDaysSinceOct7();",
"        hostageCountEl.textContent = 'Loading...';",
"        hostageCountEl.title = 'Loading latest verified hostage count...';",
"        try {",
"          const response = await withTimeout(fetch('/api/hostage-count'), 10000);",
"          if (response.ok) {",
"            const data = await response.json();",
"            if (data.count && /^\\d+$/.test(data.count)) {",
"              hostageCountEl.textContent = data.count;",
"              hostageCountEl.title = data.citation || '';",
"            } else {",
"              hostageCountEl.textContent = 'Hostage count unavailable—try again later';",
"              hostageCountEl.title = '';",
"            }",
"          } else {",
"            hostageCountEl.textContent = 'Hostage count unavailable—try again later';",
"            hostageCountEl.title = '';",
"          }",
"        } catch (error) {",
"          console.error('Error refreshing hostage count:', error);",
"          hostageCountEl.textContent = 'Hostage count unavailable—try again later';",
"          hostageCountEl.title = '';",
"        }",
"        if (hostageCountEl.textContent.includes('unavailable') && offlineData.hostageCount) { hostageCountEl.textContent = offlineData.hostageCount; hostageCountEl.title = 'offline data'; }",
"        updateDaysSinceOct7();",
"      }",
      "      ",
"      document.addEventListener('DOMContentLoaded', () => {",
"        updateDaysSinceOct7();",
"        refreshHostageCount();",
"        setInterval(updateDaysSinceOct7, 3600000);",
"        setInterval(refreshHostageCount, 21600000);",
"      });",
"      async function loadLatestNews() {",
"        const newsEl = document.getElementById('latest-news');",
"        if (!newsEl) return;",
"        try {",
"          const response = await fetch('/api/latest-hostage-news?count=5');",
"          if (response.ok) {",
"            const data = await response.json();",
"            const items = Array.isArray(data.items) ? data.items : (Array.isArray(data) ? data : (data.headline ? [{ headline: data.headline, url: data.url }] : []));",
"            if (items.length > 0) {",
"              const headlines = items.concat(items).map(item => `<a href=\"${item.url}\" target=\"_blank\" rel=\"noopener noreferrer\">${item.headline}</a>`).join('<span class=\"separator\">|</span>');",
"              newsEl.innerHTML = `<div class=\"news-marquee\">${headlines}</div>`;",
"            } else {",
"              newsEl.textContent = 'No news available';",
"            }",
"          } else {",
"            newsEl.textContent = 'News unavailable';",
"          }",
"        } catch (e) {",
"          console.error('News fetch error:', e);",
"          newsEl.textContent = 'News unavailable';",
"        }",
"        newsEl.classList.add('visible');",
"      }",
"      loadLatestNews();",
"      setInterval(loadLatestNews, 3600000);",
"      async function fetchChatResponse(systemPrompt, userPrompt, outputElement) {",
"        try {",
"          const response = await fetch('/', {",
"            method: 'POST',",
"            headers: { 'Content-Type': 'application/json' },",
"            body: JSON.stringify({ systemPrompt, userPrompt, outputElement: outputElement.id })",
"          });",
"          const contentType = response.headers.get('content-type') || '';",
"          if (contentType.includes('application/json')) {",
"            const data = await response.json();",
"            if (data.content) {",
"              outputElement.textContent = data.content;",
"              outputElement.style.display = 'block';",
"              if (outputElement.id === 'chatResponse') animateHeroResults();",
"            } else if (data.error) {",
"              outputElement.textContent = `Error: ${data.error}`;",
"            }",
"          } else {",
"            const text = await response.text();",
"            console.error('Expected JSON, got:', text);",
"            outputElement.textContent = 'Server error: Unexpected response.';",
"          }",
"        } catch (error) {",
"          console.error('fetchChatResponse error:', error);",
"          outputElement.textContent = `Error: ${error.message}`;",
"        }",
"      }",
"",
"      async function fetchCTA() {",
"        console.log('[fetchCTA] called');",
"        const roleVal = (document.getElementById('hero-user-role')?.value || '').trim() || 'N/A';",
"        const challengeVal = (document.getElementById('hero-user-challenge')?.value || '').trim() || 'N/A';",
"        const chatEl = document.getElementById('chatResponse');",
"        const recommendationText = chatEl ? chatEl.textContent.trim() : '';",
"        const staticSpan = document.querySelector('.cta-static');",
"        const dotSpan = document.querySelector('.cta-dots');",
"        if (!staticSpan || !dotSpan) { console.log('[fetchCTA] missing spans'); return; }",
"        if (ctaAnimationInterval) clearInterval(ctaAnimationInterval);",
"        let dotCount = 1;",
"        dotSpan.textContent = '.';",
"        ctaAnimationInterval = setInterval(() => {",
"          dotSpan.textContent = '.'.repeat(dotCount);",
"          dotCount = dotCount === 3 ? 1 : dotCount + 1;",
"        }, 500);",
"        try {",
"          console.log('[fetchCTA] sending fetch');",
"          const response = await fetch('/', {",
"            method: 'POST',",
"            headers: { 'Content-Type': 'application/json' },",
"            body: JSON.stringify({ role: roleVal, challenge: challengeVal, cta: true, recommendation: recommendationText })",
"          });",
"          const contentType = response.headers.get('content-type') || '';",
"          if (!response.ok || !response.body) throw new Error('CTA generation failed');",
"          if (contentType.includes('text/plain')) {",
"            const reader = response.body.getReader();",
"            let ctaText = '';",
"            let receivedFirstChunk = false;",
"            while (true) {",
"              const { done, value } = await reader.read();",
"              if (done) break;",
"              const chunk = new TextDecoder().decode(value);",
"              console.log('[fetchCTA] chunk', chunk);",
"              ctaText += chunk;",
"              if (!receivedFirstChunk) {",
"                if (ctaAnimationInterval) clearInterval(ctaAnimationInterval);",
"                dotSpan.textContent = '';",
"                receivedFirstChunk = true;",
"              }",
"              ctaText = ctaText.replace(/^['\\\"]+|['\\\"]+$/g, '');",
"              staticSpan.textContent = ctaText;",  "            }",
"            if (!receivedFirstChunk) {",
"              staticSpan.textContent = 'Get Started';",
"              dotSpan.textContent = '';",
"            }",
"          } else if (contentType.includes('application/json')) {",
"            const data = await response.json();",
"            staticSpan.textContent = data.error || 'Get Started';",
"            dotSpan.textContent = '';",
"          } else {",
"            const text = await response.text();",
"            console.error('Expected text/plain or JSON, got:', text);",
"            staticSpan.textContent = 'Server error: Unexpected response.';",
"            dotSpan.textContent = '';",
"          }",
"        } catch (error) {",
"          console.error('CTA generation error:', error);",
"          staticSpan.textContent = 'Get Started';",
"          dotSpan.textContent = '';",
"        }",
"      }",
"      const subFirstWords = [",
"        'Educational ',",
"        'Empowering ',",
"      ];",
"",
"      const subMiddlePhrases = [",
"        'AI learning tools ',",
"        'historical insights ',",
"        'awareness campaigns '",
"      ];",
"",
"      const subLastWords = [",
"        ' to combat hatred',",
"        ' for a better world',",
"        ' to never forget'",
"      ];",
"",
"      function updateSubHeadlinePart(elementId, words, initialDelay, subsequentInterval) {",
"        const element = document.getElementById(elementId);",
"        if (!element) return;",
"        element.style.height = element.offsetHeight + 'px';",
"        let index = 0;",
"        function updateWord() {",
"          element.innerHTML = '';",
"          const newWord = words[index].trim();",
"          const container = document.createElement('span');",
"          container.style.whiteSpace = 'nowrap';",
"          for (let i = 0; i < newWord.length; i++) {",
"            const letterContainer = document.createElement('span');",
"            letterContainer.className = 'letter-container';",
"            letterContainer.style.verticalAlign = 'top';",
"            const newLetter = document.createElement('span');",
"            newLetter.className = 'new-letter';",
"            if (newWord[i] === ' ') {",
"              newLetter.innerHTML = '&nbsp;';",
"            } else {",
"              newLetter.textContent = newWord[i];",
"            }",
"            letterContainer.appendChild(newLetter);",
"            const wipeCover = document.createElement('span');",
"            wipeCover.className = 'wipe';",
"            wipeCover.style.animation = `wipeUp 0.3s ease-out forwards ${i * 0.1}s`;",
"            letterContainer.appendChild(wipeCover);",
"            container.appendChild(letterContainer);",
"          }",
"          element.appendChild(container);",
"          index = (index + 1) % words.length;",
"        }",
"        setTimeout(() => {",
"          updateWord();",
"          setInterval(updateWord, subsequentInterval);",
"        }, initialDelay);",
"      }",
"      document.addEventListener('DOMContentLoaded', () => {",
"        updateSubHeadlinePart('subheadlinePart1', subFirstWords, 4000, 10000);",
"        updateSubHeadlinePart('subheadlinePart2', subMiddlePhrases, 6000, 15000);",
"        updateSubHeadlinePart('subheadlinePart3', subLastWords, 8000, 20000);",
"      });",
"      const canvas = document.getElementById('canvas');",
"      const ctx = canvas.getContext('2d');",
"      let w = 0, h = 0;",
"      function resizeCanvas() {",
"        w = canvas.width = window.innerWidth;",
"        h = canvas.height = window.innerHeight;",
"      }",
"      window.addEventListener(\"resize\", resizeCanvas);",
"      resizeCanvas();",
"      let mouseX = null, mouseY = null;     // ② move to top",
"      window.addEventListener('mousemove', (e) => {",
"         mouseX = e.clientX;",
"         mouseY = e.clientY;",
"      });",
"      window.addEventListener('touchmove', (e) => {",
"         if (e.touches.length > 0) {",
"             mouseX = e.touches[0].clientX;",
"             mouseY = e.touches[0].clientY;",
"         }",
"      });",
"      window.addEventListener('touchstart', (e) => {",
"         if (e.touches.length > 0) {",
"             mouseX = e.touches[0].clientX;",
"             mouseY = e.touches[0].clientY;",
"         }",
"      });",
"      window.addEventListener('touchend', () => {",
"         mouseX = null;",
"         mouseY = null;",
"      });",
"",
"      const NUM_PARTICLES = 40;",
"      const MAX_DISTANCE = 150;",
"      const BASE_SPEED = 0.01;",
"      const BRANCH_FORCE = 0.04;",
"      const CURSOR_REPEL_RADIUS = 120;",
"      const CURSOR_REPEL_FORCE = .4;",
"      const colorLines = 'rgba(240,240,240,0.6)';",
"      const colorDots  = 'rgba(240,240,240,0.9)';",
"      canvas.addEventListener(\"mousemove\", (e) => {",
"        const rect = canvas.getBoundingClientRect();",
"        mouseX = e.clientX - rect.left;",
"        mouseY = e.clientY - rect.top;",
"      });",
"      canvas.addEventListener(\"mouseleave\", () => {",
"        mouseX = null;",
"        mouseY = null;",
"      });",
"      const INITIAL_PARTICLE_SIZE = 2;",
"      const PARTICLE_GROWTH_RATE = 0.05;",
"      const particles = [];",
"      function initParticles() {",
"          particles.length = 0;",
"          for (let i = 0; i < NUM_PARTICLES; i++) {",
"            const x = Math.random() * w,",
"                  y = Math.random() * h,",
"                  vx = (Math.random() - 0.5) * 0.5,",
"                  vy = (Math.random() - 0.5) * 0.5;",
"            particles.push({ x, y, vx, vy, size: INITIAL_PARTICLE_SIZE });",
"          }",
"        }",
"        function drawLines() {",
"          ctx.strokeStyle = colorLines;",
"          ctx.lineWidth = 1;",
"          for (let i = 0; i < particles.length; i++) {",
"            for (let j = i+1; j < particles.length; j++) {",
"              const dx = particles[j].x - particles[i].x;",
"              const dy = particles[j].y - particles[i].y;",
"              const dist = Math.sqrt(dx*dx + dy*dy);",
"              if (dist < MAX_DISTANCE) {",
"                ctx.beginPath();",
"                ctx.moveTo(particles[i].x, particles[i].y);",
"                ctx.lineTo(particles[j].x, particles[j].y);",
"                ctx.stroke();",
"              }",
"            }",
"          }",
"        }",
"        function drawDots() {",
"          ctx.fillStyle = colorDots;",
"          for (const p of particles) {",
"            ctx.beginPath();",
"            ctx.arc(p.x, p.y, p.size, 0, 2*Math.PI);",
"            ctx.fill();",
"          }",
"        }",
"",
"        function update() {",
"          const centerX = w / 2, centerY = h / 2;",
"          const speedMultiplier = 1 + (Math.abs(window.tiltFactor || 0) / 20);",
"          const OUTWARD_ACCEL = 0.002;",
"          for (const p of particles) {",
"            const dx_center = p.x - centerX;",
"            const dy_center = p.y - centerY;",
"            const dist_center = Math.sqrt(dx_center * dx_center + dy_center * dy_center) || 1;",
"            p.vx += (dx_center / dist_center) * OUTWARD_ACCEL * speedMultiplier;",
"            p.vy += (dy_center / dist_center) * OUTWARD_ACCEL * speedMultiplier;",
"            if (mouseX !== null && mouseY !== null) {",
"              const dx = p.x - mouseX;",
"              const dy = p.y - mouseY;",
"              const dist = Math.sqrt(dx * dx + dy * dy);",
"              if (dist < CURSOR_REPEL_RADIUS) {",
"                const force = (CURSOR_REPEL_RADIUS - dist) / CURSOR_REPEL_RADIUS;",
"                const angle = Math.atan2(dy, dx);",
"                p.vx += Math.cos(angle) * CURSOR_REPEL_FORCE * force;",
"                p.vy += Math.sin(angle) * CURSOR_REPEL_FORCE * force;",
"                p.size += PARTICLE_GROWTH_RATE * force;",
"              }",
"            }",
"            const TILT_ACCEL = 0.005;",
"            const tiltRads = (window.tiltFactor || 0) * Math.PI / 180;",
"            p.vx += Math.cos(tiltRads) * TILT_ACCEL;",
"            p.vy += Math.sin(tiltRads) * TILT_ACCEL;",
"            p.x += p.vx * (window.isTiltChanging ? 0.1 : 1);",
"            p.y += p.vy * (window.isTiltChanging ? 0.1 : 1);",
"            if (!window.isTiltChanging && (p.x < 0 || p.x > w || p.y < 0 || p.y > h)) {",
"              p.x = centerX;",
"              p.y = centerY;",
"              p.vx = (Math.random() - 0.5) * 2;",
"              p.vy = (Math.random() - 0.5) * 2;",
"              p.size = INITIAL_PARTICLE_SIZE;",
"            }",
"          }",
"        }",
"          function animate() {",
"            ctx.clearRect(0, 0, w, h);",
"            drawLines();",
"            drawDots();",
"            update();",
"            requestAnimationFrame(animate);",
"          }",
"          initParticles();",
"          animate();",
"        // *** CONSOLIDATED HERO FORM SCRIPT *** //",
"        document.addEventListener('DOMContentLoaded', () => {",
"          // Initialize 10x impact features",
"          initializeABTest();",
"          actionTracker.track('page_load');",
"          ",
"          function debounce(fn, delay) {",
"            let timer = null;",
"            return (...args) => {",
"              clearTimeout(timer);",
"              timer = setTimeout(() => fn(...args), delay);",
"            };",
"          }",
"          const roleField = document.getElementById('hero-user-role');",
"          const challengeField = document.getElementById('hero-user-challenge');",
"          const chatResponse = document.getElementById('chatResponse');",
"          const ctaButton = document.querySelector('.hero-cta');",
"          const staticSpan = ctaButton ? ctaButton.querySelector('.cta-static') : null;",
"          const dotSpan = ctaButton ? ctaButton.querySelector('.cta-dots') : null;",
"          const refreshBtn = document.getElementById('refresh-advice-btn');",
"          const surpriseBtn = document.getElementById('surprise-me-btn');",
"          function hideRefreshButton() {",
"            if(refreshBtn) {",
"              refreshBtn.classList.remove('visible');",
"            }",
"          }",
"          function showRefreshButton() {",
"            if(refreshBtn) {",
"              refreshBtn.classList.add('visible');",
"            }",
"          }",
"          function hideSurpriseButton() {",
"            if(surpriseBtn) {",
"              surpriseBtn.classList.remove('visible');",
"              surpriseBtn.style.display = 'none';",
"            }",
"          }",
"          function showSurpriseButton() {",
"            if(surpriseBtn) {",
"              surpriseBtn.style.display = 'inline-flex';",
"              surpriseBtn.classList.add('visible');",
"            }",
"          }",
"          const ctaDefaults = {",
"            learn: 'Start Learning',",
"            teach: 'Start Learning',",
"            act: 'Get Action Plan',",
"            respond: 'Get Action Plan',",
"            support: 'Get Action Plan',",
"            custom: 'Get Advice'",
"          };",
"          function resetCTAButton() {",
"            if (staticSpan && dotSpan) {",
"              const scenario = window.currentScenario || 'custom';",
"              staticSpan.textContent = ctaDefaults[scenario] || 'Get Advice';",
"              dotSpan.textContent = '';",
"              if (ctaAnimationInterval) clearInterval(ctaAnimationInterval);",
"              let dotCount = 1;",
"              ctaAnimationInterval = setInterval(() => {",
"                dotSpan.textContent = '.'.repeat(dotCount);",
"                dotCount = dotCount === 3 ? 1 : dotCount + 1;",
"              }, 500);",
"            }",
"          }",
"          function stopCTAAnimation() {",
"            if (ctaAnimationInterval) clearInterval(ctaAnimationInterval);",
"            if (dotSpan) dotSpan.textContent = '';",
"          }",
"          resetCTAButton();",
"          const handleInputChange = debounce(async () => {",
"            hideRefreshButton();",
"            hideSurpriseButton();",
"            ",
"            // Security: Sanitize inputs to prevent XSS",
"            const roleVal = sanitizeInput(roleField.value.trim());",
"            const challengeVal = sanitizeInput(challengeField.value.trim());",
"            ",
"            // Enhanced validation with accessibility support",
"            if (!roleVal || !challengeVal) {",
"              resetCTAButton();",
"              chatResponse.style.display = 'none';",
"              chatResponse.textContent = '';",
"              chatResponse.setAttribute('aria-live', 'off');",
"              return;",
"            }",
"            ",
                        "            // Track user engagement",
            "            actionTracker.track('hero_form_filled', { role: roleVal.substring(0, 20) });",
            "            ",
            "            // Show loading animation",
            "            chatResponse.innerHTML = `",
            "              <div class=\"loading-animation\">",
            "                <div class=\"loading-spinner\"></div>",
            "                <div class=\"loading-text\">Getting personalized guidance based on current situation...</div>",
            "                <div class=\"loading-context\">Including Day ${Math.floor((new Date() - new Date('2023-10-07')) / (1000*3600*24))} context and hostage updates</div>",
            "              </div>",
            "            `;",
            "            chatResponse.style.display = 'block';",
            "            chatResponse.setAttribute('aria-live', 'polite');",
            "            ",
            "            resetCTAButton();",
            "            // Enhanced error handling with timeout and retry",
            "            const controller = new AbortController();",
            "            const timeoutId = setTimeout(() => controller.abort(), 15000); // Reduced to 15s for faster GPT-3.5-turbo model",
            "            ",
            "            try {",
            "              actionTracker.track('api_request_start', { endpoint: 'hero_form' });",
"              ",
              "              // Get user's approximate location for context (with timeout)",
              "              let userLocation = 'unknown';",
              "              try {",
              "                const locationPromise = fetch('https://ipapi.co/json/');",
              "                const timeoutPromise = new Promise((_, reject) => ",
              "                  setTimeout(() => reject(new Error('Location timeout')), 2000)",
              "                );",
              "                ",
              "                const locationResponse = await Promise.race([locationPromise, timeoutPromise]);",
              "                if (locationResponse.ok) {",
              "                  const locationData = await locationResponse.json();",
              "                  userLocation = locationData.country_name || locationData.country || 'unknown';",
              "                }",
              "              } catch (e) {",
              "                // Use default if location detection fails or times out",
              "              }",
              "              ",
              "              const response = await fetch('/', {",
              "                method: 'POST',",
              "                headers: { 'Content-Type': 'application/json' },",
              "                body: JSON.stringify({ ",
              "                  role: roleVal, ",
              "                  challenge: challengeVal,",
              "                  location: userLocation",
              "                }),",
              "                signal: controller.signal",
              "              });",
"              ",
              "              clearTimeout(timeoutId);",
              "              const contentType = response.headers.get('content-type') || '';",
              "              console.log('[Hero Form] Response status:', response.status);",
              "              console.log('[Hero Form] Response headers:', Array.from(response.headers.entries()));",
              "              ",
              "              if (!response.ok) {",
              "                const errorText = await response.text();",
              "                console.error('[Hero Form] Error response body:', errorText);",
              "                throw new Error(`HTTP ${response.status}: ${response.statusText}`);",
              "              }",
"              ",
              "              if (contentType.includes('application/json')) {",
              "                const data = await response.json();",
              "                console.log('[Hero Form] API response data:', data);",
              "                ",
              "                if (data.error) {",
              "                  console.error('[Hero Form] API returned error:', data.error);",
              "                  throw new Error(data.error + (data.details ? ` (${data.details})` : ''));",
              "                }",
              "                ",
              "                // Security: Sanitize response before display",
              "                const sanitizedAdvice = sanitizeInput(data.advice || 'No advice available.');",
              "                chatResponse.textContent = sanitizedAdvice;",
              "                chatResponse.style.display = 'block';",
              "                chatResponse.setAttribute('aria-live', 'polite');",
              "                ",
              "                // Success tracking and show additional options",
              "                actionTracker.track('api_response_success', { responseLength: sanitizedAdvice.length });",
              "                showRefreshButton();",
              "                showSurpriseButton();",
              "                fetchCTA();",
              "              } else {",
              "                console.error('[Hero Form] Invalid content type:', contentType);",
              "                // Log the actual response for debugging",
              "                const responseText = await response.text();",
              "                console.error('[Hero Form] Response body:', responseText.substring(0, 500));",
              "                throw new Error(`Invalid response format from server. Content-Type: ${contentType}`);",
              "              }",
"            } catch (error) {",
"              clearTimeout(timeoutId);",
"              ",
"              if (error.name === 'AbortError') {",
"                handleError(new Error('Request timed out'), 'network', chatResponse);",
"              } else if (error.message.includes('fetch')) {",
"                handleError(error, 'network', chatResponse);",
"              } else {",
"                handleError(error, 'api', chatResponse);",
"              }",
              "              ",
              "              resetCTAButton();",
"              ",
              "              // Show user-friendly error in chat response",
              "              let errorMessage = 'Unable to get personalized advice right now. Please try again.';",
              "              if (error.message.includes('OpenAI API error')) {",
              "                errorMessage = 'The AI service is temporarily unavailable. Please try again in a moment.';",
              "              } else if (error.message.includes('network') || error.message.includes('fetch')) {",
              "                errorMessage = 'Connection issue. Please check your internet and try again.';",
              "              }",
              "              ",
              "              const fallback = offlineData.scenarioFallbacks && currentScenario ? offlineData.scenarioFallbacks[currentScenario] : '';",
              "              if (fallback) { chatResponse.innerHTML = 'Our AI service is currently unavailable. Here\'s what you need to know:<br>' + fallback; } else { chatResponse.textContent = errorMessage; }",
              "              chatResponse.style.display = 'block';",
              "              chatResponse.setAttribute('aria-live', 'assertive');",
"            }",
"          }, 1000);",
          "          // Enhanced surprise advice with creative analogies",
          "          async function fetchSurprisingAdvice() {",
          "            actionTracker.track('surprise_request_start');",
"            ",
"            // Security: Sanitize inputs",
"            const roleVal = sanitizeInput(roleField.value.trim());",
"            const challengeVal = sanitizeInput(challengeField.value.trim());",
"            const originalAdvice = sanitizeInput(chatResponse.textContent);",
"            ",
"            chatResponse.textContent = '🐝 Finding a creative analogy from nature...';",
"            chatResponse.setAttribute('aria-live', 'polite');",
"            ",
"            const controller = new AbortController();",
"            const timeoutId = setTimeout(() => controller.abort(), 25000);",
"            ",
"            try {",
"                const response = await fetch('/', {",
"                    method: 'POST',",
"                    headers: { 'Content-Type': 'application/json' },",
"                    body: JSON.stringify({",
"                        role: roleVal,",
"                        challenge: challengeVal,",
"                        originalAdvice: originalAdvice,",
"                        surprise: true",
"                    }),",
"                    signal: controller.signal",
"                });",
"                ",
"                clearTimeout(timeoutId);",
"                if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);",
"                ",
"                const data = await response.json();",
"                if (data.error) throw new Error(data.error);",
"                ",
"                // Security: Sanitize response",
"                const sanitizedAdvice = sanitizeInput(data.advice || 'No creative analogy available.');",
"                chatResponse.textContent = sanitizedAdvice;",
"                chatResponse.setAttribute('aria-live', 'polite');",
"                ",
"                actionTracker.track('surprise_response_success', { analogyLength: sanitizedAdvice.length });",
"            } catch (error) {",
"                clearTimeout(timeoutId);",
"                ",
"                if (error.name === 'AbortError') {",
"                    handleError(new Error('Creative analogy request timed out'), 'network', chatResponse);",
"                } else {",
"                    handleError(error, 'api', chatResponse);",
"                }",
                "                ",
                "                chatResponse.textContent = 'Could not generate a creative analogy right now. Please try again.';",
                "                chatResponse.setAttribute('aria-live', 'assertive');",
"            }",
"          }",
"          // Enhanced event listeners with action tracking",
"          roleField.addEventListener('input', (e) => {",
"            if (e.target.value.trim()) {",
"              actionTracker.track('role_input_filled', { role: sanitizeInput(e.target.value).substring(0, 20) });",
"            }",
"            handleInputChange();",
"          });",
"          ",
"          challengeField.addEventListener('input', (e) => {",
"            if (e.target.value.trim()) {",
"              actionTracker.track('challenge_input_filled', { challenge: sanitizeInput(e.target.value).substring(0, 30) });",
"            }",
"            handleInputChange();",
"          });",
"          ",
"          if (refreshBtn) {",
"            refreshBtn.addEventListener('click', (e) => {",
"              actionTracker.track('refresh_clicked');",
"              fetchSurprisingAdvice();",
"            });",
"          }",
"          ",
"          if (surpriseBtn) {",
"            surpriseBtn.addEventListener('click', (e) => {",
"              actionTracker.track('surprise_me_clicked');",
"              fetchSurprisingAdvice();",
"            });",
"          }",
"          ",
"          if (ctaButton) {",
"            ctaButton.addEventListener('click', (e) => {",
"              e.preventDefault();",
"              actionTracker.track('main_cta_clicked', { variant: actionTracker.getCurrentCTAVariant() });",
"              openModal();",
"            });",
"          }",
"          console.log('[hero form] event listeners attached');",
"        });",
"        function updateCTAButton(analysisText) {",
"          const ctaButton = document.querySelector('.hero-cta');",
"          if (!ctaButton) return;",
"          const dummyOutput = document.createElement('div');",
"          dummyOutput.style.display = 'none';",
"          document.body.appendChild(dummyOutput);",
"          const systemPrompt = \"You are October7Assist, an advocate for awareness of the October 7th attacks and the Israeli hostages. Based on the analysis, generate a concise 3-5 word call-to-action encouraging learning or support.\";",
"          const userPrompt = `Analysis: ${analysisText}`;",
"          fetchChatResponse(systemPrompt, userPrompt, dummyOutput).then(() => {",
"            ctaButton.textContent = dummyOutput.textContent.trim() || ctaButton.textContent;",
"            document.body.removeChild(dummyOutput);",
"          }).catch(err => {",
"            console.error('CTA update error:', err);",
"          });",
"        }",
"        // Enhanced modal system for multi-step lessons",
"        let currentStep = 0;",
"        const totalSteps = 7; // Increased for more comprehensive lessons",
"        let selectedCTA = '';",
"        let lessonData = {};",
"        const modalOverlay = document.getElementById('modal-overlay');",
"        const modalTitle = document.getElementById('modal-title');",
"        const modalStepContent = document.getElementById('modal-step-content');",
"        const ctaOptionsContainer = document.getElementById('cta-options');",
"        const modalClose = document.getElementById('modal-close');",
"        const modalPrev = document.getElementById('modal-prev');",
"        const modalNext = document.getElementById('modal-next');",
        "        const progressBar = document.getElementById('modal-progress');",
        "        const progressBarInner = document.getElementById('modal-progress-bar');",
        "        const progressText = document.getElementById('modal-progress-text');",
"        function convertMarkdownToHtml(md) {",
"           let html = md",
".replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')",
".replace(/\\*(.*?)\\*/g, '<em>$1</em>')",
".replace(/\\n/g, '<br>');",
"           return html;",
"        }",
"        function updateScrollIndicator() {",
"           const content = document.getElementById('modal-step-content');",
"           const indicator = document.getElementById('scroll-indicator');",
"           if (content.scrollHeight > content.clientHeight) {",
"               indicator.style.display = 'block';",
"           } else {",
"               indicator.style.display = 'none';",
"           }",
"        }",
"        // Enhanced progress indicator with accessibility",
"        function startProgressIndicator(estimatedTime = 15) {",
"           progressBar.style.display = 'block';",
"           progressBar.setAttribute('aria-hidden', 'false');",
"           progressBarInner.style.width = '0%';",
"           progressBar.setAttribute('aria-valuenow', '0');",
"           ",
"           const stages = [",
"             'Analyzing your learning goals...',",
"             'Gathering relevant ADL/AJC research...',",
"             'Creating personalized content...',",
"             'Adding interactive elements...',",
"             'Finalizing your lesson...'",
"           ];",
"           ",
"           let elapsed = 0;",
"           let stageIndex = 0;",
"           ",
"           const interval = setInterval(() => {",
"             elapsed += 0.5;",
"             const percent = Math.min((elapsed / estimatedTime) * 100, 95);",
"             progressBarInner.style.width = percent + '%';",
"             progressBar.setAttribute('aria-valuenow', Math.round(percent));",
"             ",
"             // Update progress text through stages",
"             const newStageIndex = Math.floor((percent / 100) * stages.length);",
"             if (newStageIndex !== stageIndex && newStageIndex < stages.length) {",
"               stageIndex = newStageIndex;",
"               progressText.textContent = stages[stageIndex];",
"               actionTracker.track('lesson_progress_stage', { stage: stageIndex, percent });",
"             }",
"             ",
"             if (elapsed >= estimatedTime) {",
"               progressText.textContent = 'Almost ready...';",
"               clearInterval(interval);",
"             }",
"           }, 500);",
"           ",
"           return interval;",
"        }",
        "        function stopProgressIndicator(interval) {",
        "           clearInterval(interval);",
        "           progressBar.style.display = 'none';",
        "           const progressBarInner = document.getElementById('modal-progress-bar');",
        "           if (progressBarInner) {",
        "             progressBarInner.style.width = '0%';",
        "             if (progressBarInner.style) progressBarInner.textContent = '';",
        "           }",
        "        }",
"",
        "        // Enhanced modal functions with accessibility",
        "        function openModal() {",
        "          currentStep = 0;",
        "          lessonData = {};",
        "          modalOverlay.style.display = 'flex';",
        "          modalOverlay.setAttribute('aria-hidden', 'false');",
        "          ",
        "          // Enhanced animation with backdrop blur",
        "          if (typeof anime !== 'undefined') {",
        "            anime.set(modalOverlay, { opacity: 0 });",
        "            const modalContent = document.getElementById('modal-content');",
        "            if (modalContent) {",
        "              anime.set(modalContent, { scale: 0.8, opacity: 0 });",
        "              ",
        "              anime.timeline()",
        "                .add({",
        "                  targets: modalOverlay,",
        "                  opacity: [0, 1],",
        "                  duration: 300,",
        "                  easing: 'easeOutQuart'",
        "                })",
        "                .add({",
        "                  targets: modalContent,",
        "                  scale: [0.8, 1],",
        "                  opacity: [0, 1],",
        "                  duration: 400,",
        "                  easing: 'easeOutBack'",
        "                }, '-=200');",
        "            }",
        "          }",
        "          ",
        "          // Accessibility: Focus management",
        "          const firstFocusable = modalStepContent;",
        "          if (firstFocusable) firstFocusable.focus();",
        "          ",
        "          // Accessibility: Trap focus in modal",
        "          document.body.style.overflow = 'hidden';",
        "          ",
        "          actionTracker.track('modal_opened', { step: currentStep });",
        "          loadModalStep(currentStep);",
        "        }",
"",
        "        function closeModal() {",
        "          // Enhanced closing animation",
        "          if (typeof anime !== 'undefined') {",
        "            const modalContent = document.getElementById('modal-content');",
        "            if (modalContent) {",
        "              anime.timeline()",
        "                .add({",
        "                  targets: modalContent,",
        "                  scale: [1, 0.8],",
        "                  opacity: [1, 0],",
        "                  duration: 200,",
        "                  easing: 'easeInQuart'",
        "                })",
        "                .add({",
        "                  targets: modalOverlay,",
        "                  opacity: [1, 0],",
        "                  duration: 200,",
        "                  easing: 'easeInQuart',",
        "                  complete: () => {",
        "                    modalOverlay.style.display = 'none';",
        "                    modalStepContent.innerHTML = '';",
        "                    ctaOptionsContainer.innerHTML = '';",
        "                  }",
        "                }, '-=100');",
        "            } else {",
        "              modalOverlay.style.display = 'none';",
        "              modalStepContent.innerHTML = '';",
        "              ctaOptionsContainer.innerHTML = '';",
        "            }",
        "          } else {",
        "            modalOverlay.style.display = 'none';",
        "            modalStepContent.innerHTML = '';",
        "            ctaOptionsContainer.innerHTML = '';",
        "          }",
        "          ",
        "          modalOverlay.setAttribute('aria-hidden', 'true');",
        "          ",
        "          // Restore focus and body scroll",
        "          document.body.style.overflow = '';",
        "          const heroButton = document.querySelector('.hero-cta');",
        "          if (heroButton) heroButton.focus();",
        "          ",
        "          actionTracker.track('modal_closed', { finalStep: currentStep, totalSteps });",
        "        }",
"",
        "        async function loadModalStep(step) {",
"          const progressInterval = startProgressIndicator(12);",
"          modalStepContent.innerHTML = '';",
"          const role = document.getElementById('hero-user-role').value.trim() || 'N/A';",
"          const challenge = document.getElementById('hero-user-challenge').value.trim() || 'N/A';",
"          const recommendation = document.getElementById('chatResponse').textContent.trim() || 'No recommendation available.';",
          "          const ctaText = document.querySelector('.hero-cta').textContent.trim() || 'Learn More';",
"",
"          const systemPrompt = \"You are October7Assist, guiding users through a step-by-step educational journey about the October 7th attacks, the hostages, and combating antisemitism. Respond in markdown with detailed instructions for this step.\";",
"          const userPrompt = `Step ${step + 1} of 5:\\nRole: ${role}\\nChallenge: ${challenge}\\nRecommendation: ${recommendation}\\nCTA: ${ctaText}\\nSelected CTA Option: ${selectedCTA}\\nProvide the content for this step.`;",
"",
"          const tempOutput = document.createElement('div');",
"          tempOutput.style.display = 'none';",
"          document.body.appendChild(tempOutput);",
"          await fetchChatResponse(systemPrompt, userPrompt, tempOutput);",
"          stopProgressIndicator(progressInterval);",
"          let markdownContent = tempOutput.textContent || 'No content received.';",
"          modalStepContent.innerHTML = convertMarkdownToHtml(markdownContent);",
"          document.body.removeChild(tempOutput);",
"          updateScrollIndicator();",
"",
"          if (step < totalSteps - 1 && !apiDisabled) {",
"            loadCTAOptions();",
"          } else {",
"            ctaOptionsContainer.innerHTML = '';",
"          }",
"        }",
"",
        "        async function loadCTAOptions() {",
          "          ctaOptionsContainer.innerHTML = '<h3>Help me...</h3><p>Loading CTA options...</p>';",
"",
"          const role = document.getElementById('hero-user-role').value.trim() || 'N/A';",
"          const challenge = document.getElementById('hero-user-challenge').value.trim() || 'N/A';",
"          const recommendation = document.getElementById('chatResponse').textContent.trim() || 'No recommendation available.';",
"          const ctaText = document.querySelector('.hero-cta').textContent.trim() || 'Learn More';",
"",
"          const systemPrompt = \"You are October7Assist, an educator about the October 7th attacks and ongoing hostage crisis. Respond in markdown with three concise call-to-action options (as a JSON array) encouraging further learning or support. No descriptions.\";",
"          const userPrompt = `Role: ${role}\\nChallenge: ${challenge}\\nRecommendation: ${recommendation}\\nCurrent CTA: ${ctaText}\\nProvide three CTA options as a JSON array.`;",
"",
"          const tempOutput = document.createElement('div');",
"          tempOutput.style.display = 'none';",
"          document.body.appendChild(tempOutput);",
"          await fetchChatResponse(systemPrompt, userPrompt, tempOutput);",
"          let rawCTAs = tempOutput.textContent || '[]';",
"          document.body.removeChild(tempOutput);",
"",
"          let ctaOptions = [];",
"          try {",
"            ctaOptions = JSON.parse(rawCTAs);",
"            if (!Array.isArray(ctaOptions)) { throw new Error('Not an array'); }",
"          } catch(e) {",
"            ctaOptions = rawCTAs.split('\\n').filter(line => line.trim() !== '');",
"          }",
"        let html = '<h3>Help me...</h3>';",
"        ctaOptions.forEach(option => {",
"          html += `<button class='modal-button'>${convertMarkdownToHtml(option)}</button>`;",
"        });",
"        ctaOptionsContainer.innerHTML = html;",
"        Array.from(ctaOptionsContainer.querySelectorAll('.modal-button')).forEach((btn, idx) => {",
"          btn.addEventListener('click', () => {",
"            selectedCTA = ctaOptions[idx];",
"            currentStep++;",
"            loadModalStep(currentStep);",
"          });",
"        });",
"      }",
"",
"      /* Animate the scroll-down-prompt with a gentle bobbing motion using Anime.js */",
"      document.addEventListener(`DOMContentLoaded`, function() {",
"        anime({",
"          targets: `.scroll-down-prompt`,",
"          translateY: [0, 8],",
"          duration: 1200,",
"          easing: `easeInOutSine`,",
"          direction: `alternate`,",
"          loop: true",
"        });",
"      });",
"",
"      /* Set up Intersection Observer to reveal any .reveal-later elements as user scrolls */",
"      document.addEventListener(`DOMContentLoaded`, function() {",
"        const observer = new IntersectionObserver((entries) => {",
"          entries.forEach(entry => {",
"            if (entry.isIntersecting) {",
"              anime({",
"                targets: entry.target,",
"                opacity: [0, 1],",
"                translateY: [30, 0],",
"                duration: 600,",
"                easing: `easeOutBack`,",
"              });",
"              entry.target.classList.add(`fade-in-active`);",
"              observer.unobserve(entry.target);",
"            }",
"          });",
"        }, { threshold: 0.2 });",
"",
"        const revealItems = document.querySelectorAll(`.reveal-later`);",
"        revealItems.forEach(item => observer.observe(item));",
"      });",
"      /* Create a dynamic 3D tilt on scroll. More scroll -> deeper tilt. */",
"      document.addEventListener(`DOMContentLoaded`, function() {",
"        const wrapper = document.querySelector(`.main-wrapper`);",
"        if (!wrapper) return;",
"        wrapper.classList.add(`main-wrapper-3d-tilt`);",
"",
"        window.addEventListener(`scroll`, function() {",
"          const scrollY = window.scrollY || window.pageYOffset;",
"          /* For best practice: limit maximum tilt so it doesn't get dizzy. */",
"          const maxTilt = 10;",
"          /* Scale scroll into a tilt ratio: e.g., at 1000px scroll, tilt ~ 10 deg. */",
"          const tilt = Math.min(scrollY / 100, maxTilt);",
"          /* Slight X rotation and Y rotation to enhance the 3D effect. */",
"          wrapper.style.transform = `rotateX(${tilt}deg) rotateY(${tilt / 2}deg)`;",
"        });",
"      });",
"      /* Optional: Additional Anime.js-based flourish when the user mouses over the field. */",
"      document.addEventListener(`DOMContentLoaded`, function() {",
"        const fields = document.querySelectorAll(`.hero-field`);",
"        fields.forEach(field => {",
"          field.addEventListener(`mouseover`, () => {",
"            anime({",
"              targets: field,",
"              scale: 1.03,",
"              duration: 300,",
"              easing: `easeInOutQuad`,",
"            });",
"          });",
"          field.addEventListener(`mouseout`, () => {",
"            anime({",
"              targets: field,",
"              scale: 1,",
"              duration: 300,",
"              easing: `easeInOutQuad`,",
"            });",
"          });",
"        });",
"      });",
      "      document.addEventListener(`DOMContentLoaded`, function() {",
"        /* Removed CTA background color animation to prevent highlighting */",
"        /* 2) More noticeable 3D tilt on body. We'll apply a class and tilt up to 15deg. */",
"        document.body.classList.add(`body-3d-tilt`);",
"        window.addEventListener(`scroll`, () => {",
"          const scrollY = window.scrollY || window.pageYOffset;",
"          const maxTilt = 15;",
"          const tilt = Math.min(scrollY / 100, maxTilt);",
"          /* The bigger the user scrolls, the more body rotates in 3D. */",
"          document.body.style.transform = `rotateX(${tilt}deg) rotateY(${tilt / 2}deg)`;",
"        });",
"      });",

"      document.addEventListener('DOMContentLoaded', () => {",
"        const roleField = document.getElementById('hero-user-role');",
"        const challengeField = document.getElementById('hero-user-challenge');",
"        const ctaButton = document.querySelector('.hero-cta');",
"        const staticSpan = ctaButton ? ctaButton.querySelector('.cta-static') : null;",
"        const dotSpan = ctaButton ? ctaButton.querySelector('.cta-dots') : null;",
"        function debounce(fn, delay) {",
"          let timer = null;",
"          return (...args) => {",
"            clearTimeout(timer);",
"            timer = setTimeout(() => fn(...args), delay);",
"          };",
"        }",
"        async function streamCTAUpdate() {",
"          const roleVal = (roleField.value || '').trim();",
"          const challengeVal = (challengeField.value || '').trim();",
"          if (!roleVal || !challengeVal) {",
"            staticSpan.textContent = 'Get Advice';",
"            dotSpan.innerHTML = '';",
"            return;",
"          }",
"          // Show spinner next to previous text while loading",
"          const prevText = staticSpan.textContent || 'Get Advice';",
"          staticSpan.textContent = prevText;",
"          dotSpan.innerHTML = '<span class=\"loading-spinner\"></span>';",
"          let ctaText = '';",
"          try {",
"            const response = await fetch('/', {",
"              method: 'POST',",
"              headers: { 'Content-Type': 'application/json' },",
"              body: JSON.stringify({",
"                role: roleVal,",
"                challenge: challengeVal,",
"                cta: true,",
"                recommendation: ''",
"              })",
"            });",
"            if (!response.ok || !response.body) throw new Error('CTA streaming failed');",
"            if (response.headers.get('content-type')?.includes('text/plain')) {",
"              const reader = response.body.getReader();",
"              let receivedFirstChunk = false;",
"              while (true) {",
"                const { done, value } = await reader.read();",
"                if (done) break;",
"                const chunk = new TextDecoder().decode(value);",
"                ctaText += chunk;",
"                receivedFirstChunk = true;",
"              }",
"              staticSpan.textContent = ctaText || 'Get Started';",
"              dotSpan.innerHTML = '';",
"            } else {",
"              staticSpan.textContent = 'Get Started';",
"              dotSpan.innerHTML = '';",
"            }",
"          } catch (error) {",
"            staticSpan.textContent = 'Get Started';",
"            dotSpan.innerHTML = '';",
"          }",
"        }",
"        const debouncedStreamCTA = debounce(streamCTAUpdate, 600);",
"        roleField.addEventListener('input', debouncedStreamCTA);",
"        challengeField.addEventListener('input', debouncedStreamCTA);",
"      });",
"      document.addEventListener('DOMContentLoaded', () => {",
"        const challengeField = document.getElementById('hero-user-challenge');",
"        const ctaButton = document.querySelector('.hero-cta');",
"        if (challengeField && ctaButton) {",
"          challengeField.addEventListener('keydown', function(e) {",
"            if (e.key === 'Tab' && !e.shiftKey) {",
"              e.preventDefault();",
"              ctaButton.focus();",
"            }",
"          });",
"        }",
"      });",
"      let lastMouseX = window.innerWidth / 2;",
"      let lastMouseY = window.innerHeight / 2;",
"      document.addEventListener('mousemove', function(e) {",
"        lastMouseX = e.clientX;",
"        lastMouseY = e.clientY;",
      "      });",
"                      // Enhanced modal event listeners with accessibility",
        "        document.addEventListener('DOMContentLoaded', function() {",
        "          const modalClose = document.getElementById('modal-close');",
        "          const modalCloseX = document.getElementById('modal-close-x');",
        "          const modalPrev = document.getElementById('modal-prev');",
        "          const modalNext = document.getElementById('modal-next');",
        "          const modalOverlay = document.getElementById('modal-overlay');",
"          ",
          "          if (modalClose) {",
          "            modalClose.addEventListener('click', closeModal);",
          "          }",
          "          ",
          "          if (modalCloseX) {",
          "            modalCloseX.addEventListener('click', closeModal);",
          "          }",
"          ",
"          if (modalPrev) {",
"            modalPrev.addEventListener('click', () => {",
"              if (currentStep > 0) {",
"                currentStep--;",
"                actionTracker.track('modal_prev_clicked', { step: currentStep });",
"                loadModalStep(currentStep);",
"              }",
"            });",
"          }",
"          ",
"          if (modalNext) {",
"            modalNext.addEventListener('click', () => {",
"              if (currentStep < totalSteps - 1) {",
"                currentStep++;",
"                actionTracker.track('modal_next_clicked', { step: currentStep });",
"                loadModalStep(currentStep);",
"              }",
"            });",
"          }",
"          ",
"          // Keyboard accessibility",
"          if (modalOverlay) {",
"            modalOverlay.addEventListener('keydown', (e) => {",
"              if (e.key === 'Escape') {",
"                closeModal();",
"              } else if (e.key === 'ArrowLeft' && currentStep > 0) {",
"                currentStep--;",
"                loadModalStep(currentStep);",
"              } else if (e.key === 'ArrowRight' && currentStep < totalSteps - 1) {",
"                currentStep++;",
"                loadModalStep(currentStep);",
"              }",
"            });",
"            ",
"            // Close modal when clicking overlay",
"            modalOverlay.addEventListener('click', (e) => {",
"              if (e.target === modalOverlay) {",
"                closeModal();",
"              }",
"            });",
"          }",
"        });",
"/* === Impact Simulator JavaScript ======================= */",
"// Impact Simulator functionality",
"document.addEventListener('DOMContentLoaded', function() {",
"  const peopleSlider = document.getElementById('people-slider');",
"  const shareSlider = document.getElementById('share-slider');",
"  const peopleInput = document.getElementById('people-input');",
"  const shareInput = document.getElementById('share-input');",
"  const peopleValue = document.getElementById('people-value');",
"  const shareValue = document.getElementById('share-value');",
"  const impactNumber = document.getElementById('impact-number');",
"  const impactProgress = document.getElementById('impact-progress');",
"  ",
"  function updateImpactCalculation() {",
"    const alliesPerDay = parseInt(peopleSlider.value);",
"    const shareRate = parseInt(shareSlider.value);",
"    const monthlyImpact = Math.round(alliesPerDay * 30 * (1 + shareRate / 100));",
"    ",
"    peopleInput.value = alliesPerDay;",
"    shareInput.value = shareRate;",
"    peopleSlider.setAttribute('aria-valuenow', alliesPerDay);",
"    shareSlider.setAttribute('aria-valuenow', shareRate);",
"    peopleInput.setAttribute('aria-valuenow', alliesPerDay);",
"    shareInput.setAttribute('aria-valuenow', shareRate);",
"    peopleValue.textContent = alliesPerDay;",
"    shareValue.textContent = shareRate + '%';",
"    impactNumber.textContent = monthlyImpact.toLocaleString() + ' allies/month';",
"    if (impactProgress) impactProgress.value = monthlyImpact;",
"  }",
"  ",
"  if (peopleSlider && shareSlider) {",
"    peopleSlider.addEventListener('input', updateImpactCalculation);",
"    shareSlider.addEventListener('input', updateImpactCalculation);",
"    peopleInput.addEventListener('input', function() { peopleSlider.value = this.value; updateImpactCalculation(); });",
"    shareInput.addEventListener('input', function() { shareSlider.value = this.value; updateImpactCalculation(); });",
"    peopleInput.addEventListener('keydown', function(e) { if (e.key === 'ArrowLeft') { this.stepDown(); this.dispatchEvent(new Event('input')); } if (e.key === 'ArrowRight') { this.stepUp(); this.dispatchEvent(new Event('input')); } });",
"    shareInput.addEventListener('keydown', function(e) { if (e.key === 'ArrowLeft') { this.stepDown(); this.dispatchEvent(new Event('input')); } if (e.key === 'ArrowRight') { this.stepUp(); this.dispatchEvent(new Event('input')); } });",
"    updateImpactCalculation(); // Initial calculation",
"  }",
"});",
"/* === End Impact Simulator JavaScript =================== */",
"/* === Regional Antisemitism Insights JavaScript ========= */",
"document.addEventListener('DOMContentLoaded', function() {",
"  const locationInput = document.getElementById('location-input');",
"  const locationButton = document.getElementById('location-button');",
"  const geoButton = document.getElementById('geo-button');",
"  const locResult = document.getElementById('locResult');",
"  ",
"  if (locationButton && locationInput && locResult) {",
"    locationButton.addEventListener('click', async function() {",
"      const location = locationInput.value.trim();",
"      ",
"      // Basic validation",
"      if (!location) {",
"        locResult.classList.remove('hidden');",
"        locResult.textContent = 'Please enter a city or country.';",
"        locResult.style.color = '#e53935';",
"        return;",
"      }",
"      ",
"      // Sanitize input to prevent script injection",
"      const sanitizedLocation = location.replace(/[<>\"']/g, '');",
"      ",
"      // Show loading indicator",
"      locResult.classList.remove('hidden');",
"      locResult.classList.add('loading-skeleton');",
"      locResult.textContent = 'Analyzing...';",
"      locResult.style.color = '#666';",
"      locationButton.disabled = true;",
"      locationButton.textContent = 'Loading...';",
"      ",
"      try {",
"        const cacheKey = 'loc_' + sanitizedLocation.toLowerCase();",
"        const cached = localStorage.getItem(cacheKey);",
"        if (cached) {",
"          locResult.classList.remove('hidden');",
"          locResult.innerHTML = cached;",
"        }",
"        const response = await withTimeout(fetch('/api/location-insights', {",
"          method: 'POST',",
"          headers: {",
"            'Content-Type': 'application/json',",
"          },",
"          body: JSON.stringify({ location: sanitizedLocation })",
"        }), 10000);",
"        ",
"        if (!response.ok) {",
"          throw new Error('Request failed');",
"        }",
"        ",
"        const data = await response.json();",
"        ",
"        if (data.error) {",
"          throw new Error(data.error);",
"        }",
"        ",
"        // Display the result",
"        locResult.classList.remove('hidden');",
"        locResult.classList.remove('loading-skeleton');",
"        locResult.innerHTML = (data.content || data.text || 'No insights available for this location.') + shareFeedbackHTML();",
"        locResult.style.color = '#333';",
"        localStorage.setItem(cacheKey, locResult.innerHTML);",
"        ",
"      } catch (error) {",
"        console.error('Location insights error:', error);",
"        const cached = localStorage.getItem('loc_' + sanitizedLocation.toLowerCase());",
"        locResult.classList.remove('hidden');",
"        locResult.classList.remove('loading-skeleton');",
"        if (cached) {",
"          locResult.innerHTML = 'Our AI couldn\\'t respond right now; showing cached insights.' + cached;",
"          locResult.style.color = '#333';",
"        } else {",
"          const fallback = offlineData.timeline ? offlineData.timeline.join(' ') : 'Please try again later.';",
"          locResult.textContent = 'Unable to get insights. ' + fallback;",
"          locResult.style.color = '#e53935';",
"        }",
"      } finally {",
"        locationButton.disabled = false;",
"        locationButton.textContent = 'Get Regional Insights';",
"      }",
"    });",
"    ",
"    // Allow Enter key to trigger search",
"    locationInput.addEventListener('keypress', function(e) {",
"      if (e.key === 'Enter') {",
"        locationButton.click();",
"      }",
"    });",
"    if (geoButton) {",
"      geoButton.addEventListener('click', function() {",
"        if (!navigator.geolocation) return;",
"        geoButton.disabled = true;",
"        navigator.geolocation.getCurrentPosition(pos => {",
"          locationInput.value = pos.coords.latitude + ',' + pos.coords.longitude;",
"          locationButton.click();",
"          geoButton.disabled = false;",
"        }, () => { geoButton.disabled = false; });",
"      });",
"    }",
"  }",
"});",
"/* === End Regional Antisemitism Insights JavaScript ===== */",
"/* === File Upload Analysis JavaScript =================== */",
"document.addEventListener('DOMContentLoaded', function() {",
"  const uploadForm = document.getElementById('upload-form');",
"  const fileInput = document.getElementById('fileInput');",
"  const analysisResult = document.getElementById('analysisResult');",
"  ",
"  if (uploadForm && fileInput && analysisResult) {",
"    uploadForm.addEventListener('submit', async function(e) {",
"      e.preventDefault();",
"      ",
"      const file = fileInput.files[0];",
"      if (!file) {",
"        analysisResult.innerHTML = 'Please select a file to upload.';",
"        analysisResult.style.color = '#e53935';",
"        analysisResult.style.display = 'block';",
"        return;",
"      }",
"      ",
"      // Validate file type",
"      const allowedTypes = ['.pdf', '.txt', '.docx'];",
"      const fileName = file.name.toLowerCase();",
"      const isValidType = allowedTypes.some(type => fileName.endsWith(type));",
"      ",
"      if (!isValidType) {",
"        analysisResult.innerHTML = 'Please upload a PDF, TXT, or DOCX file.';",
"        analysisResult.style.color = '#e53935';",
"        analysisResult.style.display = 'block';",
"        return;",
"      }",
"      ",
"      // Add spinner CSS if not already present",
"      if (!document.getElementById('spinner-style')) {",
"        const spinnerStyle = document.createElement('style');",
"        spinnerStyle.id = 'spinner-style';",
"        spinnerStyle.textContent = '@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }';",
"        document.head.appendChild(spinnerStyle);",
"      }",
"      ",
"      // Show loading indicator",
"      analysisResult.classList.remove('hidden');",
"      analysisResult.classList.add('loading-skeleton');",
"      analysisResult.innerHTML = '<div style=\"text-align: center;\"><div style=\"display: inline-block; width: 20px; height: 20px; border: 3px solid rgba(0,0,0,0.1); border-top: 3px solid var(--secondary-color); border-radius: 50%; animation: spin 1s linear infinite;\"></div><br/>Analyzing document...</div>';",
"      analysisResult.style.color = '#666';",
"      analysisResult.style.display = 'block';",
"      ",
"      const submitButton = uploadForm.querySelector('button[type=\"submit\"]');",
"      submitButton.disabled = true;",
"      submitButton.textContent = 'Analyzing...';",
"      ",
"      try {",
"        const formData = new FormData();",
"        formData.append('file', file);",
"        const cacheKey = 'file_' + file.name;",
"        const cached = localStorage.getItem(cacheKey);",
"        if (cached) {",
"          analysisResult.classList.remove('hidden');",
"          analysisResult.innerHTML = cached;",
"        }",
"        const response = await withTimeout(fetch('/api/analyze-file', {",
"          method: 'POST',",
"          body: formData",
"        }), 10000);",
"        ",
"        if (!response.ok) {",
"          throw new Error('Upload failed');",
"        }",
"        ",
"        const data = await response.json();",
"        ",
"        if (data.error) {",
"          throw new Error(data.error);",
"        }",
"        ",
"        // Display the analysis result",
"        analysisResult.classList.remove('hidden');",
"        analysisResult.classList.remove('loading-skeleton');",
"        analysisResult.innerHTML = (data.text || data.analysis || 'Analysis completed, but no content was returned.') + shareFeedbackHTML();",
"        analysisResult.style.color = '#333';",
"        localStorage.setItem(cacheKey, analysisResult.innerHTML);",
"        ",
"      } catch (error) {",
"        console.error('File upload error:', error);",
"        const cacheKey = 'file_' + (file ? file.name : '');",
"        const cached = localStorage.getItem(cacheKey);",
"        analysisResult.classList.remove('hidden');",
"        analysisResult.classList.remove('loading-skeleton');",
"        if (cached) {",
"          analysisResult.innerHTML = 'Our AI could not analyze your file; showing previous result.' + cached;",
"          analysisResult.style.color = '#333';",
"        } else {",
"          analysisResult.innerHTML = 'Analysis failed, please try again with a text/PDF file.';",
"          analysisResult.style.color = '#e53935';",
"        }",
"      } finally {",
"        submitButton.disabled = false;",
"        submitButton.textContent = 'Upload & Analyze';",
"      }",
"    });",
"  }",
"});",
"/* === End File Upload Analysis JavaScript ================ */",
"/* === Ask AI and Heroic Story JavaScript ================ */",
"document.addEventListener('DOMContentLoaded', function() {",
"  // Ask AI functionality",
"  const askAiForm = document.getElementById('ask-ai-form');",
"  const aiQuestion = document.getElementById('ai-question');",
"  const answerOutput = document.getElementById('answerOutput');",
"  ",
"  if (askAiForm && aiQuestion && answerOutput) {",
"    askAiForm.addEventListener('submit', async function(e) {",
"      e.preventDefault();",
"      ",
"      const question = aiQuestion.value.trim();",
"      if (!question) {",
"        answerOutput.innerHTML = 'Please enter a question.';",
"        answerOutput.style.color = '#e53935';",
"        answerOutput.style.display = 'block';",
"        return;",
"      }",
"      ",
"      // Show loading state with animation",
"      answerOutput.classList.remove('hidden');",
"      answerOutput.classList.add('loading-skeleton');",
"      answerOutput.innerHTML = 'Researching your question...';",
"      answerOutput.style.color = '#666';",
"      answerOutput.style.display = 'block';",
"      ",
"      const submitButton = askAiForm.querySelector('button[type=\"submit\"]');",
"      submitButton.disabled = true;",
"      submitButton.textContent = 'Loading...';",
"      ",
"      try {",
"        const cacheKey = 'ask_' + question.toLowerCase();",
"        const cached = localStorage.getItem(cacheKey);",
"        if (cached) {",
"          answerOutput.classList.remove('hidden');",
"          answerOutput.innerHTML = cached;",
"        }",
"        const response = await withTimeout(fetch('/api/ask', {",
"          method: 'POST',",
"          headers: {",
"            'Content-Type': 'application/json',",
"          },",
"          body: JSON.stringify({ question: question })",
"        }), 10000);",
"        ",
"        if (!response.ok) {",
"          throw new Error('Request failed');",
"        }",
"        ",
"        const data = await response.json();",
"        ",
"        if (data.error) {",
"          throw new Error(data.error);",
"        }",
"        ",
"        // Format the response with paragraphs",
"        const formattedAnswer = '<p>' + (data.answer || data.content || 'No answer available.').replace(/\\n\\n/g, '</p><p>').replace(/\\n/g, '<br>') + '</p>';",
"        answerOutput.classList.remove('hidden');",
"        answerOutput.classList.remove('loading-skeleton');",
"        answerOutput.innerHTML = formattedAnswer + shareFeedbackHTML();",
"        answerOutput.style.color = '#333';",
"        localStorage.setItem(cacheKey, formattedAnswer);",
"        ",
"      } catch (error) {",
"        console.error('Ask AI error:', error);",
"        const cacheKey = 'ask_' + question.toLowerCase();",
"        const cached = localStorage.getItem(cacheKey);",
"        answerOutput.classList.remove('hidden');",
"        if (cached) {",
"          answerOutput.innerHTML = 'AI unavailable—showing a previous answer.' + cached;",
"          answerOutput.style.color = '#333';",
"        } else {",
"          const fallback = offlineData.stories && offlineData.stories[0] ? offlineData.stories[0].summary : 'Please try again later.';",
"          answerOutput.innerHTML = 'AI service is currently unavailable. ' + fallback;",
"          answerOutput.style.color = '#e53935';",
"        }",
"        answerOutput.classList.remove('loading-skeleton');",
"      } finally {",
"        submitButton.disabled = false;",
"        submitButton.textContent = 'Ask AI';",
"      }",
"    });",
"  }",
"  ",
"  // Heroic Story functionality",
"  const heroicStoryBtn = document.getElementById('heroic-story-btn');",
"  const storyOutput = document.getElementById('storyOutput');",
"  ",
"  if (heroicStoryBtn && storyOutput) {",
"    heroicStoryBtn.addEventListener('click', async function() {",
"      // Clear previous story",
"      storyOutput.classList.remove('hidden');",
"      storyOutput.classList.add('loading-skeleton');",
"      storyOutput.innerHTML = 'Loading inspiring story...';",
"      storyOutput.style.color = '#666';",
"      storyOutput.style.display = 'block';",
"      ",
"      heroicStoryBtn.disabled = true;",
"      heroicStoryBtn.textContent = 'Loading...';",
"      ",
"      try {",
"        const cacheKey = 'story_last';",
"        const cached = localStorage.getItem(cacheKey);",
"        if (cached) {",
"          storyOutput.classList.remove('hidden');",
"          storyOutput.innerHTML = cached;",
"        }",
"        const response = await withTimeout(fetch('/api/hero-story', {",
"          method: 'POST',",
"          headers: {",
"            'Content-Type': 'application/json',",
"          },",
"          body: JSON.stringify({})",
"        }), 10000);",
"        ",
"        if (!response.ok) {",
"          throw new Error('Request failed');",
"        }",
"        ",
"        const data = await response.json();",
"        ",
"        if (data.error) {",
"          throw new Error(data.error);",
"        }",
"        ",
"        // Format the story with paragraphs",
"        const formattedStory = '<p>' + (data.story || data.content || 'No story available.').replace(/\\n\\n/g, '</p><p>').replace(/\\n/g, '<br>') + '</p>';",
"        storyOutput.classList.remove('hidden');",
"        storyOutput.classList.remove('loading-skeleton');",
"        storyOutput.innerHTML = formattedStory + shareFeedbackHTML();",
"        storyOutput.style.color = '#333';",
"        localStorage.setItem(cacheKey, formattedStory);",
"        ",
"      } catch (error) {",
"        console.error('Heroic story error:', error);",
"        const cached = localStorage.getItem('story_last');",
"        storyOutput.classList.remove('hidden');",
"        storyOutput.classList.remove('loading-skeleton');",
"        if (cached) {",
"          storyOutput.innerHTML = 'AI unavailable—showing last story.' + cached;",
"        } else {",
"          const fallback = offlineData.stories && offlineData.stories[0] ? offlineData.stories[0].summary : 'Please try again later.';",
"          storyOutput.innerHTML = 'AI service is currently unavailable. ' + fallback;",
"          storyOutput.style.color = '#e53935';",
"        }",
"      } finally {",
"        heroicStoryBtn.disabled = false;",
"        heroicStoryBtn.textContent = 'Get Heroic Story (AI)';",
"      }",
"    });",
"  }",
"});",
"/* === End Ask AI and Heroic Story JavaScript ============ */",
"/* === Impact Simulator Interactive Animation ======== */",
"document.addEventListener('DOMContentLoaded', function() {",
"  // Initialize Impact Simulator",
"  const peopleSlider = document.getElementById('people-slider');",
"  const shareSlider = document.getElementById('share-slider');",
"  const peopleInput = document.getElementById('people-input');",
"  const shareInput = document.getElementById('share-input');",
"  const peopleValue = document.getElementById('people-value');",
"  const shareValue = document.getElementById('share-value');",
"  const impactNumber = document.getElementById('impact-number');",
"  const peopleTrack = document.getElementById('people-track');",
"  const shareTrack = document.getElementById('share-track');",
"  const impactCard = document.querySelector('.impact-calculator-card');",
"  const impactProgress = document.getElementById('impact-progress');",
"  let initialized = false;",
"  ",
"  if (!peopleSlider || !shareSlider || !peopleInput || !shareInput || !peopleValue || !shareValue || !impactNumber || !impactProgress) {",
"    console.log('Impact simulator elements not found');",
"    return;",
"  }",
"  ",
"  // Update slider track fill",
"  function updateSliderTrack(slider, track) {",
"    const percent = ((slider.value - slider.min) / (slider.max - slider.min)) * 100;",
"    track.style.width = percent + '%';",
"  }",
"  ",
"  // Calculate impact with smooth animation",
"  function calculateImpact() {",
"    const peoplePerDay = parseInt(peopleSlider.value);",
"    const shareRate = parseInt(shareSlider.value);",
"    const totalImpact = Math.round(peoplePerDay * 30 * (1 + shareRate / 100));",
"    if (impactProgress) impactProgress.value = totalImpact;",
"    impactNumber.textContent = totalImpact.toLocaleString() + ' allies/month';",
"    if (typeof anime !== 'undefined') {",
"      anime({",
"        targets: impactNumber,",
"        scale: [1, 1.1, 1],",
"        duration: 500,",
"        easing: 'easeOutBounce'",
"      });",
"    }",
"  }",
"  ",
"  // Update people slider",
"  function updatePeopleSlider() {",
"    const value = peopleSlider.value;",
"    peopleInput.value = value;",
"    peopleValue.textContent = value;",
"    peopleSlider.setAttribute('aria-valuenow', value);",
"    peopleInput.setAttribute('aria-valuenow', value);",
"    updateSliderTrack(peopleSlider, peopleTrack);",
"    calculateImpact();",
"    ",
"    // Add glow effect to slider container",
"    const container = peopleSlider.closest('.slider-container');",
"    if (container && typeof anime !== 'undefined') {",
"      anime({",
"        targets: container,",
"        boxShadow: ['0 2px 8px rgba(255,215,0,0.2)', '0 4px 16px rgba(255,215,0,0.4)', '0 2px 8px rgba(255,215,0,0.2)'],",
"        duration: 400,",
"        easing: 'easeInOutQuad'",
"      });",
"    }",
"  }",
"  ",
"  // Update share slider",
"  function updateShareSlider() {",
"    const value = shareSlider.value;",
"    shareInput.value = value;",
"    shareValue.textContent = value + '%';",
"    shareSlider.setAttribute('aria-valuenow', value);",
"    shareInput.setAttribute('aria-valuenow', value);",
"    updateSliderTrack(shareSlider, shareTrack);",
"    calculateImpact();",
"    ",
"    // Add glow effect to slider container",
"    const container = shareSlider.closest('.slider-container');",
"    if (container && typeof anime !== 'undefined') {",
"      anime({",
"        targets: container,",
"        boxShadow: ['0 2px 8px rgba(255,215,0,0.2)', '0 4px 16px rgba(255,215,0,0.4)', '0 2px 8px rgba(255,215,0,0.2)'],",
"        duration: 400,",
"        easing: 'easeInOutQuad'",
"      });",
"    }",
"  }",
"  ",
"  // Add event listeners",
"  peopleSlider.addEventListener('input', updatePeopleSlider);",
"  shareSlider.addEventListener('input', updateShareSlider);",
"  peopleInput.addEventListener('input', function() { peopleSlider.value = this.value; updatePeopleSlider(); });",
"  shareInput.addEventListener('input', function() { shareSlider.value = this.value; updateShareSlider(); });",
"  peopleInput.addEventListener('keydown', function(e) { if (e.key === 'ArrowLeft') { this.stepDown(); this.dispatchEvent(new Event('input')); } if (e.key === 'ArrowRight') { this.stepUp(); this.dispatchEvent(new Event('input')); } });",
"  shareInput.addEventListener('keydown', function(e) { if (e.key === 'ArrowLeft') { this.stepDown(); this.dispatchEvent(new Event('input')); } if (e.key === 'ArrowRight') { this.stepUp(); this.dispatchEvent(new Event('input')); } });",
"  ",
"  // Initialize values and animations",
"  updatePeopleSlider();",
"  updateShareSlider();",
"  initialized = true;",
"  ",
"  // Add hover effects to the main card",
"  if (impactCard && typeof anime !== 'undefined') {",
"    impactCard.addEventListener('mouseenter', function() {",
"      anime({",
"        targets: this,",
"        scale: 1.02,",
"        duration: 300,",
"        easing: 'easeOutQuart'",
"      });",
"    });",
"    ",
"    impactCard.addEventListener('mouseleave', function() {",
"      anime({",
"        targets: this,",
"        scale: 1,",
"        duration: 300,",
"        easing: 'easeOutQuart'",
"      });",
"    });",
"  }",
"  ",
"  // Add breathing animation to the result area",
"  const resultArea = document.querySelector('.impact-result');",
"  if (resultArea && typeof anime !== 'undefined') {",
"    anime({",
"      targets: resultArea,",
"      opacity: [0.9, 1, 0.9],",
"      duration: 4000,",
"      easing: 'easeInOutSine',",
"      loop: true",
"    });",
"  }",
"  ",
"  // Add milestone celebrations",
"  function celebrateMilestone(impact) {",
"    const milestones = [100, 500, 1000, 2000, 5000];",
"    const milestone = milestones.find(m => impact >= m && impact - parseInt(peopleSlider.value) * 30 < m);",
"    ",
"    if (milestone && typeof anime !== 'undefined') {",
"      // Create celebration particles",
"      for (let i = 0; i < 5; i++) {",
"        const particle = document.createElement('div');",
"        particle.style.position = 'absolute';",
"        particle.style.width = '6px';",
"        particle.style.height = '6px';",
"        particle.style.background = 'var(--secondary-color)';",
"        particle.style.borderRadius = '50%';",
"        particle.style.pointerEvents = 'none';",
"        particle.style.zIndex = '1000';",
"        ",
"        const rect = impactNumber.getBoundingClientRect();",
"        particle.style.left = (rect.left + rect.width / 2) + 'px';",
"        particle.style.top = (rect.top + rect.height / 2) + 'px';",
"        ",
"        document.body.appendChild(particle);",
"        ",
"        anime({",
"          targets: particle,",
"          translateX: (Math.random() - 0.5) * 100,",
"          translateY: (Math.random() - 0.5) * 100,",
"          scale: [1, 0],",
"          opacity: [1, 0],",
"          duration: 1000,",
"          easing: 'easeOutQuart',",
"          complete: () => particle.remove()",
"        });",
"      }",
"    }",
"  }",
"  ",
"  // Override calculate impact to include milestone celebration",
"  const originalCalculateImpact = calculateImpact;",
"  calculateImpact = function() {",
"    originalCalculateImpact();",
"    const newImpact = parseInt(peopleSlider.value) * 30 * (1 + parseInt(shareSlider.value) / 100);",
"    if (initialized) celebrateMilestone(newImpact);",
"  };",
"  ",
"  console.log('Impact Simulator initialized with interactive animations');",
"});",
"/* === End Impact Simulator Animation ================ */",
"",
"/* === Educational Resources Interactive Functionality === */",
"document.addEventListener('DOMContentLoaded', function() {",
"  // Initialize educational resources functionality",
"  const accordions = document.querySelectorAll('.resource-accordion');",
"  const progressElement = document.getElementById('resources-progress');",
"  const progressFill = document.getElementById('resources-progress-fill');",
"  const progressBarEl = document.querySelector('.progress-bar');",
"  const contentWarnings = document.getElementById('content-warnings');",
"  let openedResources = new Set(['start']); // Start Here is open by default",
"  ",
"  if (!accordions.length) {",
"    console.log('Educational resources not found');",
"    return;",
"  }",
"  ",
"  // Update progress indicator",
"  function updateProgress() {",
"    const totalResources = 6;",
"    const completed = openedResources.size;",
"    const percentage = (completed / totalResources) * 100;",
"    ",
"    if (progressElement) progressElement.textContent = `${completed}/${totalResources} Resources Explored`;",
"    if (progressFill) progressFill.style.width = percentage + '%';",
"    if (progressBarEl) progressBarEl.setAttribute('aria-valuenow', completed);",
"  }",
"  ",
"  // Animate statistics when they become visible",
"  function animateStatistics() {",
"    const statNumbers = document.querySelectorAll('.stat-number[data-target]');",
"    statNumbers.forEach((element, index) => {",
"      const target = parseInt(element.getAttribute('data-target'));",
"      if (typeof anime !== 'undefined') {",
"        anime({",
"          targets: element,",
"          innerHTML: [0, target],",
"          duration: 2000,",
"          delay: index * 200,",
"          easing: 'easeOutExpo',",
"          round: target > 100 ? 100 : 1,",
"          begin: function() {",
"            element.style.opacity = '1';",
"          }",
"        });",
"      } else {",
"        element.textContent = target;",
"      }",
"    });",
"  }",
"  ",
"  // Handle accordion interactions",
"  accordions.forEach(accordion => {",
"    const header = accordion.querySelector('.accordion-header');",
"    const resourceId = accordion.getAttribute('data-resource');",
"    ",
"    // Toggle accordion and track progress",
"    function markOpened() {",
"      if (accordion.open) {",
"        openedResources.add(resourceId);",
"        updateProgress();",
"      }",
"    }",
"    accordion.addEventListener('toggle', function() {",
"      if (this.open) {",
"        markOpened();",
"        ",
"        // Animate timeline dots if this is the timeline accordion",
"        if (resourceId === 'timeline') {",
"          const timelineDots = this.querySelectorAll('.timeline-dot');",
"          timelineDots.forEach((dot, index) => {",
"            dot.style.setProperty('--item-index', index);",
"          });",
"        }",
"        ",
"        // Animate statistics if this is the impact accordion",
"        if (resourceId === 'impact') {",
"          setTimeout(animateStatistics, 300);",
"        }",
"        ",
"        // Add entrance animation to content",
"        const content = this.querySelector('.accordion-content');",
"        if (content && typeof anime !== 'undefined') {",
"          anime({",
"            targets: content,",
"            opacity: [0, 1],",
"            translateY: [-20, 0],",
"            duration: 400,",
"            easing: 'easeOutQuart'",
"          });",
"        }",
"      }",
"    });",
"    if (header) {",
"      header.addEventListener('click', () => {",
"        setTimeout(markOpened, 0);",
"      });",
"    }",
"    ",
"    // Add hover effects",
"    if (typeof anime !== 'undefined') {",
"      header.addEventListener('mouseenter', function() {",
"        anime({",
"          targets: accordion,",
"          scale: 1.01,",
"          duration: 200,",
"          easing: 'easeOutQuart'",
"        });",
"      });",
"      ",
"      header.addEventListener('mouseleave', function() {",
"        anime({",
"          targets: accordion,",
"          scale: 1,",
"          duration: 200,",
"          easing: 'easeOutQuart'",
"        });",
"      });",
"    }",
"  });",
"  ",
"  // Share button functionality with ripple effect",
"  const shareButtons = document.querySelectorAll('.share-story-btn, .secondary-action-btn');",
"  shareButtons.forEach(button => {",
"    button.addEventListener('click', function(e) {",
"      // Add ripple effect",
"      const rect = this.getBoundingClientRect();",
"      const ripple = document.createElement('span');",
"      const size = Math.max(rect.width, rect.height);",
"      const x = e.clientX - rect.left - size / 2;",
"      const y = e.clientY - rect.top - size / 2;",
"      ",
"      ripple.style.cssText = `",
"        position: absolute;",
"        width: ${size}px;",
"        height: ${size}px;",
"        left: ${x}px;",
"        top: ${y}px;",
"        background: rgba(255,255,255,0.3);",
"        border-radius: 50%;",
"        transform: scale(0);",
"        animation: ripple 0.6s linear;",
"        pointer-events: none;",
"      `;",
"      ",
"      this.appendChild(ripple);",
"      setTimeout(() => ripple.remove(), 600);",
"      ",
"      // Handle share functionality",
"      if (this.classList.contains('share-story-btn')) {",
"        if (navigator.share) {",
"          navigator.share({",
"            title: 'Hostage Advocacy: Bringing Them Home',",
"            text: 'Learn how to support hostage families and advocate for their safe return.',",
"            url: window.location.href",
"          });",
"        }",
"      }",
"    });",
"  });",
"  ",
"  // Content warning toggle functionality",
"  if (contentWarnings) {",
"    contentWarnings.addEventListener('change', function() {",
"      const warningBanners = document.querySelectorAll('.content-warning-banner');",
"      const toggleText = document.querySelector('.toggle-text');",
"      ",
"      if (this.checked) {",
"        warningBanners.forEach(banner => banner.style.display = 'flex');",
"        toggleText.textContent = '🛡️ Content warnings enabled';",
"      } else {",
"        warningBanners.forEach(banner => banner.style.display = 'none');",
"        toggleText.textContent = '🛡️ Content warnings disabled';",
"      }",
"    });",
"  }",
"  ",
"  // Add CSS for ripple animation",
"  const style = document.createElement('style');",
"  style.textContent = `",
"    @keyframes ripple {",
"      to {",
"        transform: scale(4);",
"        opacity: 0;",
"      }",
"    }",
"    .primary-action-btn, .secondary-action-btn {",
"      position: relative;",
"      overflow: hidden;",
"    }",
"  `;",
"  document.head.appendChild(style);",
"  ",
"  // Initialize progress",
"  updateProgress();",
"  ",
"  // Accessibility: Keyboard navigation improvements",
"  accordions.forEach(accordion => {",
"    const header = accordion.querySelector('.accordion-header');",
"    header.addEventListener('keydown', function(e) {",
"      if (e.key === 'Enter' || e.key === ' ') {",
"        e.preventDefault();",
"        accordion.open = !accordion.open;",
"      }",
"    });",
"  });",
"  ",
"  // Intersection Observer for lazy loading animations",
"  if ('IntersectionObserver' in window) {",
"    const observer = new IntersectionObserver((entries) => {",
"      entries.forEach(entry => {",
"        if (entry.isIntersecting && entry.target.classList.contains('stats-grid')) {",
"          animateStatistics();",
"          observer.unobserve(entry.target);",
"        }",
"      });",
"    }, { threshold: 0.5 });",
"    ",
"    const statsGrid = document.querySelector('.stats-grid');",
"    if (statsGrid) observer.observe(statsGrid);",
"  }",
"  ",
"  const learnBtn = document.getElementById('timeline-learn-btn');",
"  let extra = document.getElementById('timeline-extra');",
"  if (learnBtn && !extra) {",
"    extra = document.createElement('div');",
"    extra.id = 'timeline-extra';",
"    extra.className = 'timeline-extra';",
"    extra.style.display = 'none';",
"    extra.innerHTML = `",
"      <p><strong>Detailed chronology:</strong></p>",
"      <ol>",
"        <li><strong>6:30 AM:</strong> Rockets launched across southern Israel.</li>",
"        <li><strong>7:40 AM:</strong> Gunmen breached border fences.</li>",
"        <li><strong>9:00 AM:</strong> Nova festival attack <a href=\"https://www.bbc.com/news/world-middle-east-67055210\" target=\"_blank\" rel=\"noopener\">[BBC]</a>.</li>",
"        <li><strong>Throughout day:</strong> Over 1,200 killed and 240 taken hostage <a href=\"https://apnews.com/article/israel-hamas-war-timeline-07fced90c4f8ac56701d736cb060c63f\" target=\"_blank\" rel=\"noopener\">[AP]</a>.</li>",
"      </ol>`;",
"    const container = document.querySelector('#timeline-accordion .timeline-container');",
"    if (container && container.parentNode) {",
"      container.parentNode.insertBefore(extra, container.nextSibling);",
"    }",
"  }",
"  const warningBanner = document.querySelector('#timeline-accordion .content-warning-banner');",
"  if (learnBtn && extra) {",
"    learnBtn.addEventListener('click', function(e) {",
"      if (e.metaKey || e.ctrlKey) {",
"        window.location.href = '/timeline';",
"        return;",
"      }",
"      e.preventDefault();",
"      const expanded = extra.classList.toggle('expanded');",
"      extra.style.display = expanded ? 'block' : 'none';",
"      learnBtn.setAttribute('aria-expanded', expanded.toString());",
"      if (warningBanner && localStorage.getItem('timelineWarningDismissed') !== 'true') {",
"        warningBanner.style.display = 'flex';",
"      }",
"    });",
"  }",
"  document.querySelectorAll('.hide-warning-btn').forEach(btn => {",
"    btn.addEventListener('click', () => {",
"      const banner = btn.closest('.content-warning-banner');",
"      if (banner) {",
"        banner.style.display = 'none';",
"        localStorage.setItem('timelineWarningDismissed', 'true');",
"      }",
"    });",
"  });",
"  if (localStorage.getItem('timelineWarningDismissed') === 'true') {",
"    document.querySelectorAll('.content-warning-banner[data-warning=\"timeline\"]').forEach(b => b.style.display = 'none');",
"  }",
"  ",
"  console.log('Educational Resources initialized with interactive functionality');",
"});",
"/* === End Educational Resources Functionality ======= */",
"",
"/* === AI Tools Footer Interactive Functionality === */",
"document.addEventListener('DOMContentLoaded', function() {",
"  // Enhanced AI Tools functionality with animations and improved UX",
"  const aiToolCards = document.querySelectorAll('.ai-tool-card');",
"  const toolOutputs = document.querySelectorAll('.tool-output');",
"  const submitButtons = document.querySelectorAll('.tool-submit-btn');",
"  const toolInputs = document.querySelectorAll('.tool-input');",
"  ",
"  if (!aiToolCards.length) {",
"    console.log('AI tools footer not found');",
"    return;",
"  }",
"  ",
"  // Initialize card animations",
"  function initializeCardAnimations() {",
"    aiToolCards.forEach((card, index) => {",
"      // Stagger reveal animations",
"      if (typeof anime !== 'undefined') {",
"        anime({",
"          targets: card,",
"          opacity: [0, 1],",
"          translateY: [30, 0],",
"          scale: [0.95, 1],",
"          duration: 600,",
"          delay: index * 150,",
"          easing: 'easeOutBack'",
"        });",
"      }",
"      ",
"      // Add hover interaction animations",
"      card.addEventListener('mouseenter', function() {",
"        if (typeof anime !== 'undefined') {",
"          anime({",
"            targets: this.querySelector('.tool-icon'),",
"            scale: 1.15,",
"            rotate: '5deg',",
"            duration: 300,",
"            easing: 'easeOutElastic(1, .8)'",
"          });",
"        }",
"        this.classList.add('active');",
"      });",
"      ",
"      card.addEventListener('mouseleave', function() {",
"        if (typeof anime !== 'undefined') {",
"          anime({",
"            targets: this.querySelector('.tool-icon'),",
"            scale: 1,",
"            rotate: '0deg',",
"            duration: 300,",
"            easing: 'easeOutElastic(1, .8)'",
"          });",
"        }",
"        this.classList.remove('active');",
"      });",
"    });",
"  }",
"  ",
"  // Enhanced loading state management",
"  function setLoadingState(button, isLoading) {",
"    const btnText = button.querySelector('.btn-text');",
"    const btnIcon = button.querySelector('.btn-icon');",
"    ",
"    if (isLoading) {",
"      button.classList.add('processing');",
"      button.disabled = true;",
"      if (btnText) btnText.textContent = 'Processing...';",
"      if (btnIcon) btnIcon.textContent = '⏳';",
"    } else {",
"      button.classList.remove('processing');",
"      button.disabled = false;",
"      // Restore original text and icon based on button type",
"      if (button.id === 'heroic-story-btn') {",
"        if (btnText) btnText.textContent = 'Get Heroic Story';",
"        if (btnIcon) btnIcon.textContent = '✨';",
"      } else if (button.id === 'location-button') {",
"        if (btnText) btnText.textContent = 'Get Insights';",
"        if (btnIcon) btnIcon.textContent = '📍';",
"      } else {",
"        if (btnText) btnText.textContent = btnText.dataset.original || 'Submit';",
"        if (btnIcon) btnIcon.textContent = btnIcon.dataset.original || '→';",
"      }",
"    }",
"  }",
"  ",
"  // Enhanced output display with animations",
"  function showOutput(outputElement, content, isError = false) {",
"    outputElement.classList.remove('hidden', 'loading');",
"    outputElement.innerHTML = content;",
"    ",
"    if (isError) {",
"      outputElement.style.borderColor = '#e53935';",
"      outputElement.style.backgroundColor = '#ffebee';",
"    } else {",
"      outputElement.style.borderColor = 'var(--response-border)';",
"      outputElement.style.backgroundColor = 'var(--response-bg)';",
"    }",
"    ",
"    // Animate the appearance",
"    if (typeof anime !== 'undefined') {",
"      anime({",
"        targets: outputElement,",
"        opacity: [0, 1],",
"        translateY: [-20, 0],",
"        scale: [0.95, 1],",
"        duration: 400,",
"        easing: 'easeOutBack'",
"      });",
"    }",
"  }",
"  ",
"  // Enhanced Ask AI functionality",
"  const askAIForm = document.getElementById('ask-ai-form');",
"  if (askAIForm) {",
"    askAIForm.addEventListener('submit', async function(e) {",
"      e.preventDefault();",
"      const question = document.getElementById('ai-question').value.trim();",
"      const output = document.getElementById('answerOutput');",
"      const submitBtn = this.querySelector('.tool-submit-btn');",
"      ",
"      if (!question) {",
"        showOutput(output, '<span style=\"color: #e53935;\">Please enter a question about antisemitism.</span>', true);",
"        return;",
"      }",
"      ",
"      setLoadingState(submitBtn, true);",
"      output.classList.add('loading');",
"      output.classList.remove('hidden');",
"      output.innerHTML = 'Getting expert answer...';",
"      ",
"      try {",
"        const response = await fetch('/api/ask', {",
"          method: 'POST',",
"          headers: { 'Content-Type': 'application/json' },",
"          body: JSON.stringify({ question })",
"        });",
"        ",
"        const data = await response.json();",
"        if (data.error) {",
"          showOutput(output, `<span style=\"color: #e53935;\">Error: ${data.error}</span>`, true);",
"        } else {",
"          showOutput(output, data.answer || 'No answer received.');",
"        }",
"      } catch (error) {",
"        showOutput(output, '<span style=\"color: #e53935;\">Connection error. Please try again.</span>', true);",
"      } finally {",
"        setLoadingState(submitBtn, false);",
"      }",
"    });",
"  }",
"  ",
"  // Enhanced Location Insights functionality",
"  const locationButton = document.getElementById('location-button');",
"  if (locationButton) {",
"    locationButton.addEventListener('click', async function() {",
"      const location = document.getElementById('location-input').value.trim();",
"      const output = document.getElementById('locResult');",
"      ",
"      if (!location) {",
"        showOutput(output, '<span style=\"color: #e53935;\">Please enter a city or country.</span>', true);",
"        return;",
"      }",
"      ",
"      setLoadingState(this, true);",
"      output.classList.add('loading');",
"      output.classList.remove('hidden');",
"      output.innerHTML = 'Gathering regional insights...';",
"      ",
"      try {",
"        const response = await fetch('/api/location-insights', {",
"          method: 'POST',",
"          headers: { 'Content-Type': 'application/json' },",
"          body: JSON.stringify({ location })",
"        });",
"        ",
"        const data = await response.json();",
"        if (data.error) {",
"          showOutput(output, `<span style=\"color: #e53935;\">Error: ${data.error}</span>`, true);",
"        } else {",
"          showOutput(output, data.insights || 'No insights available.');",
"        }",
"      } catch (error) {",
"        showOutput(output, '<span style=\"color: #e53935;\">Connection error. Please try again.</span>', true);",
"      } finally {",
"        setLoadingState(this, false);",
"      }",
"    });",
"  }",
"  ",
"  // Enhanced File Upload functionality",
"  const uploadForm = document.getElementById('upload-form');",
"  const fileInput = document.getElementById('fileInput');",
"  const uploadLabel = document.querySelector('.upload-label');",
"  if (uploadForm && fileInput && uploadLabel) {",
"    // Drag and drop functionality",
"    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {",
"      uploadLabel.addEventListener(eventName, preventDefaults, false);",
"    });",
"    ",
"    function preventDefaults(e) {",
"      e.preventDefault();",
"      e.stopPropagation();",
"    }",
"    ",
"    ['dragenter', 'dragover'].forEach(eventName => {",
"      uploadLabel.addEventListener(eventName, highlight, false);",
"    });",
"    ",
"    ['dragleave', 'drop'].forEach(eventName => {",
"      uploadLabel.addEventListener(eventName, unhighlight, false);",
"    });",
"    ",
"    function highlight() {",
"      uploadLabel.style.borderColor = 'var(--secondary-color)';",
"      uploadLabel.style.backgroundColor = '#fff';",
"    }",
"    ",
"    function unhighlight() {",
"      uploadLabel.style.borderColor = '#ddd';",
"      uploadLabel.style.backgroundColor = '#fafafa';",
"    }",
"    ",
"    uploadLabel.addEventListener('drop', function(e) {",
"      const files = e.dataTransfer.files;",
"      if (files.length > 0) {",
"        fileInput.files = files;",
"        updateUploadLabel(files[0]);",
"      }",
"    });",
"    ",
"    fileInput.addEventListener('change', function() {",
"      if (this.files.length > 0) {",
"        updateUploadLabel(this.files[0]);",
"      }",
"    });",
"    ",
"    function updateUploadLabel(file) {",
"      const uploadText = uploadLabel.querySelector('.upload-text');",
"      if (uploadText) {",
"        uploadText.textContent = `Selected: ${file.name}`;",
"        uploadText.style.color = 'var(--primary-color)';",
"      }",
"    }",
"    ",
"    uploadForm.addEventListener('submit', async function(e) {",
"      e.preventDefault();",
"      const output = document.getElementById('analysisResult');",
"      const submitBtn = this.querySelector('.tool-submit-btn');",
"      ",
"      if (!fileInput.files.length) {",
"        showOutput(output, '<span style=\"color: #e53935;\">Please select a file to upload.</span>', true);",
"        return;",
"      }",
"      ",
"      setLoadingState(submitBtn, true);",
"      output.classList.add('loading');",
"      output.classList.remove('hidden');",
"      output.innerHTML = 'Analyzing document with AI...';",
"      ",
"      try {",
"        const formData = new FormData();",
"        formData.append('file', fileInput.files[0]);",
"        ",
"        const response = await fetch('/api/analyze-file', {",
"          method: 'POST',",
"          body: formData",
"        });",
"        ",
"        const data = await response.json();",
"        if (data.error) {",
"          showOutput(output, `<span style=\"color: #e53935;\">Error: ${data.error}</span>`, true);",
"        } else {",
"          showOutput(output, data.analysis || 'Analysis completed successfully.');",
"        }",
"      } catch (error) {",
"        showOutput(output, '<span style=\"color: #e53935;\">Upload failed. Please try again.</span>', true);",
"      } finally {",
"        setLoadingState(submitBtn, false);",
"      }",
"    });",
"  }",
"  ",
"  // Enhanced Heroic Stories functionality",
"  const heroicStoryBtn = document.getElementById('heroic-story-btn');",
"  if (heroicStoryBtn) {",
"    heroicStoryBtn.addEventListener('click', async function() {",
"      const output = document.getElementById('storyOutput');",
"      ",
"      setLoadingState(this, true);",
"      output.classList.add('loading');",
"      output.classList.remove('hidden');",
"      output.innerHTML = 'Generating inspiring story of resistance...';",
"      ",
"      try {",
"        const response = await fetch('/api/hero-story', {",
"          method: 'POST',",
"          headers: { 'Content-Type': 'application/json' },",
"          body: JSON.stringify({})",
"        });",
"        ",
"        const data = await response.json();",
"        if (data.error) {",
"          showOutput(output, `<span style=\"color: #e53935;\">Error: ${data.error}</span>`, true);",
"        } else {",
"          showOutput(output, data.story || 'No story available.');",
"        }",
"      } catch (error) {",
"        showOutput(output, '<span style=\"color: #e53935;\">Connection error. Please try again.</span>', true);",
"      } finally {",
"        setLoadingState(this, false);",
"      }",
"    });",
"  }",
"  ",
"  // Enhanced modal functionality",
"  function enhanceModalExperience() {",
"    const modalOverlay = document.getElementById('modal-overlay');",
"    const modalContent = document.getElementById('modal-content');",
"    ",
"    if (!modalOverlay || !modalContent) return;",
"    ",
"    // Improve modal appearance",
"    const style = document.createElement('style');",
"    style.textContent = `",
"      #modal-overlay {",
"        background: rgba(0, 0, 0, 0.8);",
"        backdrop-filter: blur(8px);",
"        transition: all 0.3s ease;",
"      }",
"      #modal-content {",
"        transform: scale(0.9);",
"        transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);",
"      }",
"      #modal-overlay[aria-hidden='false'] #modal-content {",
"        transform: scale(1);",
"      }",
"      .modal-step-enter {",
"        animation: stepEnter 0.4s ease;",
"      }",
"      @keyframes stepEnter {",
"        from {",
"          opacity: 0;",
"          transform: translateY(20px);",
"        }",
"        to {",
"          opacity: 1;",
"          transform: translateY(0);",
"        }",
"      }",
"    `;",
"    document.head.appendChild(style);",
"    ",
"    // Enhanced modal opening",
"    const originalOpenModal = window.openModal;",
"    if (originalOpenModal) {",
"      window.openModal = function() {",
"        originalOpenModal();",
"        // Add enhanced animations",
"        if (typeof anime !== 'undefined') {",
"          anime({",
"            targets: modalContent,",
"            scale: [0.8, 1],",
"            opacity: [0, 1],",
"            duration: 400,",
"            easing: 'easeOutBack'",
"          });",
"        }",
"      };",
"    }",
"    ",
"    // Add progress indicators for modal steps",
"    const modalStepContent = document.getElementById('modal-step-content');",
"    if (modalStepContent) {",
"      const observer = new MutationObserver(() => {",
"        modalStepContent.classList.add('modal-step-enter');",
"        setTimeout(() => modalStepContent.classList.remove('modal-step-enter'), 400);",
"      });",
"      observer.observe(modalStepContent, { childList: true, subtree: true });",
"    }",
"  }",
"  ",
"  // Input validation and UX improvements",
"  toolInputs.forEach(input => {",
"    input.addEventListener('focus', function() {",
"      if (typeof anime !== 'undefined') {",
"        anime({",
"          targets: this,",
"          scale: [1, 1.02],",
"          duration: 200,",
"          easing: 'easeOutQuart'",
"        });",
"      }",
"    });",
"    ",
"    input.addEventListener('blur', function() {",
"      if (typeof anime !== 'undefined') {",
"        anime({",
"          targets: this,",
"          scale: [1.02, 1],",
"          duration: 200,",
"          easing: 'easeOutQuart'",
"        });",
"      }",
"    });",
"    ",
"    // Auto-resize for text inputs",
"    input.addEventListener('input', function() {",
"      if (this.scrollHeight > this.clientHeight) {",
"        this.style.height = 'auto';",
"        this.style.height = this.scrollHeight + 'px';",
"      }",
"    });",
"  });",
"  ",
"  // Initialize everything",
"  initializeCardAnimations();",
"  enhanceModalExperience();",
"  ",
"  // Add intersection observer for scroll-triggered animations",
"  if ('IntersectionObserver' in window) {",
"    const footerObserver = new IntersectionObserver((entries) => {",
"      entries.forEach(entry => {",
"        if (entry.isIntersecting) {",
"          entry.target.classList.add('animate-in');",
"          footerObserver.unobserve(entry.target);",
"        }",
"      });",
"    }, { threshold: 0.1 });",
"    ",
"    const footerSection = document.querySelector('.ai-tools-footer');",
"    if (footerSection) footerObserver.observe(footerSection);",
"  }",
"  ",
  "  console.log('AI Tools Footer initialized with enhanced functionality');",
"});",
"/* === End AI Tools Footer Functionality ======= */",
"",
"/* === Enhanced Hero Form Functionality === */",
"document.addEventListener('DOMContentLoaded', function() {",
"  // Enhanced Hero Form with scenario buttons and animated examples",
"  const scenarioButtons = document.querySelectorAll('.scenario-btn');",
"  const smartInput = document.getElementById('hero-user-challenge');",
"  const roleInput = document.getElementById('hero-user-role');",
"  const clearButton = document.getElementById('clear-input');",
"",
"  let currentScenario = null;",
"  let typingExample = false;",
"  ",
"  if (!scenarioButtons.length || !smartInput) {",
"    console.log('Enhanced hero form elements not found');",
"    return;",
  "  }",
  "  ",
  "  // Typing animation effect",
"  function typeText(element, text, callback) {",
"    typingExample = true;",
"    element.value = '';",
"    element.focus();",
"    let index = 0;",
"    ",
"    element.classList.add('typing-animation');",
"    ",
"    const typeInterval = setInterval(() => {",
"      if (index < text.length) {",
"        element.value += text.charAt(index);",
"        index++;",
"        // Trigger input event for any listeners",
"        element.dispatchEvent(new Event('input', { bubbles: true }));",
"      } else {",
"        clearInterval(typeInterval);",
"        element.classList.remove('typing-animation');",
"        typingExample = false;",
"        if (callback) callback();",
"      }",
"    }, 50);",
"  }",
"  ",
"  // Handle scenario button clicks",
"  scenarioButtons.forEach((button, index) => {",
"    button.addEventListener('click', function(e) {",
"      e.preventDefault();",
"      ",
"      // Remove active state from all buttons",
"      scenarioButtons.forEach(btn => btn.classList.remove('active'));",
"      ",
"      // Add active state to clicked button",
"      this.classList.add('active');",
"      ",
"",
"      ",
"      // Get example text",
"      const example = this.dataset.example;",
"      const scenario = this.dataset.scenario;",
"      ",
"      // Update role based on scenario",
"      currentScenario = scenario;",
"      window.currentScenario = scenario;",
"      const defaultText = { learn: 'Start Learning', teach: 'Start Learning', act: 'Get Action Plan', respond: 'Get Action Plan', support: 'Get Action Plan', custom: 'Get Advice' }[scenario] || 'Get Advice';",
"      const ctaStatic = document.querySelector('.hero-cta .cta-static');",
"      if (ctaStatic) ctaStatic.textContent = defaultText;",
"      const roleMap = {",
"        'learn': 'educator',",
"        'respond': 'advocate',",
"        'support': 'supporter',",
"        'teach': 'teacher',",
"        'act': 'activist',",
"        'custom': 'learner'",
"      };",
"      ",
"      if (roleInput) {",
"        roleInput.value = roleMap[scenario] || 'learner';",
"        roleInput.dispatchEvent(new Event('input', { bubbles: true }));",
"      }",
"      ",
"      // Animate button selection",
"      if (typeof anime !== 'undefined') {",
"        anime({",
"          targets: this,",
"          scale: [1, 0.95, 1],",
"          duration: 200,",
"          easing: 'easeOutBack'",
"        });",
"        ",
"        // Animate icon",
"        anime({",
"          targets: this.querySelector('.scenario-icon'),",
"          rotateZ: [0, 360],",
"          scale: [1, 1.3, 1],",
"          duration: 600,",
"          easing: 'easeOutElastic(1, .8)'",
"        });",
"      }",
"      ",
"      // Handle custom scenario",
"      if (scenario === 'custom') {",
"        smartInput.focus();",
"        return;",
"      }",
"      ",
"      // Type the example text",
"      if (example) {",
"        typeText(smartInput, example, () => {",
"          const targetMap = { 'learn': '#learn-section', 'respond': '#ai-tools', 'support': '#impact-calculator', 'teach': '#learn-section', 'act': '#impact-calculator' };",
"          const target = document.querySelector(targetMap[scenario] || '#ai-tools');",
"          if (target) target.scrollIntoView({behavior:'smooth'});",
"        });",
"      }",
"    });",
"    ",
"    // Add hover animations",
"    if (typeof anime !== 'undefined') {",
"      button.addEventListener('mouseenter', function() {",
"        anime({",
"          targets: this.querySelector('.scenario-icon'),",
"          scale: 1.2,",
"          rotate: '5deg',",
"          duration: 300,",
"          easing: 'easeOutBack'",
"        });",
"      });",
"      ",
"      button.addEventListener('mouseleave', function() {",
"        if (!this.classList.contains('active')) {",
"          anime({",
"            targets: this.querySelector('.scenario-icon'),",
"            scale: 1,",
"            rotate: '0deg',",
"            duration: 300,",
"            easing: 'easeOutBack'",
"          });",
"        }",
"      });",
"    }",
"  });",
"  ",
"  // Handle input interactions",
"  smartInput.addEventListener('focus', function() {",
"    if (typeof anime !== 'undefined') {",
"      anime({",
"        targets: this,",
"        scale: [1, 1.02],",
"        duration: 200,",
"        easing: 'easeOutQuart'",
"      });",
"    }",
"  });",
"  ",
"  smartInput.addEventListener('blur', function() {",
"    if (typeof anime !== 'undefined') {",
"      anime({",
"        targets: this,",
"        scale: [1.02, 1],",
"        duration: 200,",
"        easing: 'easeOutQuart'",
"      });",
"    }",
"  });",
"  ",
"  smartInput.addEventListener('input', function() {",
"    if (typingExample) return;",
"    // Remove active state from scenario buttons when typing custom text",
"    if (this.value.trim()) {",
"      currentScenario = 'custom';",
"      window.currentScenario = 'custom';",
"      const ctaStatic = document.querySelector('.hero-cta .cta-static');",
"      if (ctaStatic) ctaStatic.textContent = 'Get Advice';",
"      if (roleInput) { roleInput.value = 'learner'; roleInput.dispatchEvent(new Event('input', { bubbles: true })); }",
"      scenarioButtons.forEach(btn => {",
"        if (btn.dataset.scenario === 'custom') return;",
"        const example = btn.dataset.example;",
"        if (!this.value.startsWith(example.substring(0, 20))) {",
"          btn.classList.remove('active');",
"        }",
"      });",
"    }",
"  });",
"  ",
"  // Handle clear button",
"  if (clearButton) {",
"    clearButton.addEventListener('click', function() {",
"      smartInput.value = '';",
"      currentScenario = 'custom';",
"      window.currentScenario = 'custom';",
"      const ctaStatic = document.querySelector('.hero-cta .cta-static');",
"      if (ctaStatic) ctaStatic.textContent = 'Get Advice';",
"      smartInput.focus();",
"      if (roleInput) { roleInput.value = 'learner'; roleInput.dispatchEvent(new Event('input', { bubbles: true })); }",
"      ",
"      // Remove active states",
"      scenarioButtons.forEach(btn => btn.classList.remove('active'));",
"      ",
"      // Animate clear action",
"      if (typeof anime !== 'undefined') {",
"        anime({",
"          targets: this,",
"          scale: [1, 0.8, 1],",
"          duration: 200,",
"          easing: 'easeOutBack'",
"        });",
"      }",
"    });",
"  }",
"  ",
"  // Initialize stagger animations for scenario buttons",
"  if (typeof anime !== 'undefined') {",
"    anime({",
"      targets: '.scenario-btn',",
"      translateY: [30, 0],",
"      opacity: [0, 1],",
"      delay: anime.stagger(100, {start: 300}),",
"      duration: 600,",
"      easing: 'easeOutBack'",
"    });",
"  }",
"  ",
"    // Enhanced CTA button behavior - visual feedback only",
"  const ctaButton = document.querySelector('.hero-cta');",
"  if (ctaButton) {",
"    // Only add visual feedback, don't interfere with modal functionality",
"    ctaButton.addEventListener('mousedown', function() {",
"      if (typeof anime !== 'undefined') {",
"        anime({",
"          targets: this,",
"          scale: [1, 0.95, 1],",
"          duration: 200,",
"          easing: 'easeOutBack'",
"        });",
"      }",
"    });",
"  }",
  "  ",
  "  // Intersection Observer for enhanced animations",
"  if ('IntersectionObserver' in window) {",
"    const heroObserver = new IntersectionObserver((entries) => {",
"      entries.forEach(entry => {",
"        if (entry.isIntersecting) {",
"          entry.target.classList.add('hero-visible');",
"          // Trigger enhanced animations when hero comes into view",
"          if (typeof anime !== 'undefined') {",
"            anime.timeline({",
"              easing: 'easeOutExpo',",
"            })",
"            .add({",
"              targets: '.quick-start-title',",
"              opacity: [0, 1],",
"              translateY: [-20, 0],",
"              duration: 600",
"            })",
"            .add({",
"              targets: '.scenario-btn',",
"              opacity: [0, 1],",
"              translateY: [30, 0],",
"              delay: anime.stagger(100),",
"              duration: 500",
"            }, '-=400')",
"            .add({",
"              targets: '.enhanced-input-section',",
"              opacity: [0, 1],",
"              translateY: [20, 0],",
"              duration: 600",
"            }, '-=200');",
"          }",
"          heroObserver.unobserve(entry.target);",
"        }",
"      });",
"    }, { threshold: 0.3 });",
"    ",
"    const heroForm = document.querySelector('.enhanced-hero-form');",
"    if (heroForm) heroObserver.observe(heroForm);",
"  }",
"  ",
"  console.log('Enhanced Hero Form initialized with interactive scenarios');",
"});",
"/* === End Enhanced Hero Form Functionality ======= */",
"    </script>",
"  </body>",
"</html>"
  ].join("\n");
}

function getTimelinePage() {
  return [
"<!DOCTYPE html>",
"<html lang=\"en\">",
"  <head>",
"    <title>October 7th Timeline - 10-7.org</title>",
"    <meta charset=\"UTF-8\"/>",
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>",
"    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap\" rel=\"stylesheet\">",
"    <style>body{font-family:Roboto,Arial,sans-serif;padding:1rem;line-height:1.6;} .timeline-img{max-width:100%;height:auto;border-radius:8px;margin:1rem 0;} .content-warning-banner{background:#fff3cd;border:1px solid #ffeaa7;border-radius:6px;padding:0.75rem 1rem;margin-bottom:1rem;display:flex;gap:0.5rem;} .hide-warning{margin-left:auto;cursor:pointer;}</style>",
"  </head>",
"  <body>",
"    <div class=\"content-warning-banner\" id=\"timeline-page-warning\">",
"      <span class=\"warning-icon\">⚠️</span>",
"      <span>This page contains references to violence.</span>",
"      <button class=\"hide-warning hide-warning-btn\">Hide</button>",
"    </div>",
"    <h1>October 7th Timeline</h1>",
"    <section>",
"      <h2>6:30 AM – Rocket Barrage</h2>",
"      <p>Hundreds of rockets were fired from Gaza into Israel <a href=\"https://www.idf.il/en\" target=\"_blank\" rel=\"noopener\">[IDF]</a>.</p>",
"      <img class=\"timeline-img\" src=\"https://res.cloudinary.com/dlxzgqi9g/image/upload/v1712426400/rocket_launch.jpg\" alt=\"Rocket barrage beginning early morning of October 7th\"/>",
"    </section>",
"    <section>",
"      <h2>7:40 AM – Border Infiltration</h2>",
"      <p>Hamas militants crossed into Israeli territory, overwhelming border posts <a href=\"https://www.timesofisrael.com\" target=\"_blank\" rel=\"noopener\">[Times of Israel]</a>.</p>",
"      <img class=\"timeline-img\" src=\"https://res.cloudinary.com/dlxzgqi9g/image/upload/v1712426400/infiltration.jpg\" alt=\"Smoke rising near border after infiltration\"/>",
"    </section>",
"    <section>",
"      <h2>9:00 AM – Nova Festival Attack</h2>",
"      <p>Gunmen attacked the outdoor music festival near Re'im <a href=\"https://www.bbc.com/news/world-middle-east-67055210\" target=\"_blank\" rel=\"noopener\">[BBC]</a>.</p>",
"      <img class=\"timeline-img\" src=\"https://res.cloudinary.com/dlxzgqi9g/image/upload/v1712426400/festival.jpg\" alt=\"Festival grounds after the attack\"/>",
"    </section>",
"    <section>",
"      <h2>Throughout the Day</h2>",
"      <p>Over 1,200 people were killed and more than 240 taken hostage <a href=\"https://apnews.com/article/israel-hamas-war-timeline-07fced90c4f8ac56701d736cb060c63f\" target=\"_blank\" rel=\"noopener\">[AP]</a>.</p>",
"    </section>",
"    <script>const pageWarning=document.getElementById('timeline-page-warning');if(localStorage.getItem('timelineWarningDismissed')==='true'){pageWarning.style.display='none';}document.querySelector('.hide-warning-btn').addEventListener('click',()=>{pageWarning.style.display='none';localStorage.setItem('timelineWarningDismissed','true');});</script>",
"  </body>",
"</html>",
  ].join("\n");
}

/*************************************************************
 * 4) AI Q&A AND HEROIC STORY HANDLERS
 *************************************************************/
async function handleAskRequest(body, env) {
  try {
    // Enhanced security: Validate and sanitize inputs
    const sanitizedBody = validateRequest(body, ['question']);
    const { question } = sanitizedBody;

    const systemPrompt = "You are an AI expert in antisemitism education, history, and prevention. REFERENCE KEY FACTS: ADL recorded 10,000+ antisemitic incidents in US (2023, highest on record), 337% rise post-October 7th globally (AJC data), educated communities 3x more effective at prevention. Provide accurate, educational responses about antisemitism, its history, impact, and how to combat it. Focus on factual information, cite these statistics when relevant, and provide actionable guidance.";
    const userPrompt = `Question: ${question}`;

    const openAIResponse = await analyzeTextWithOpenAI(userPrompt, env.OPEN_API_KEY_NEW, env.OPENAI_ORG_ID, systemPrompt);
    
    return new Response(
      JSON.stringify({ 
        answer: openAIResponse.choices?.[0]?.message?.content || "No answer available." 
      }),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Ask AI error:", error);
    return new Response(
      JSON.stringify({ error: "Failed to get answer. Please try again." }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

async function handleHeroStoryRequest(body, env) {
  try {
    const systemPrompt = "You are an AI storyteller specializing in trauma-sensitive, educational narratives of resistance against antisemitism. REFERENCE KEY FACTS: ADL's 10,000+ US incidents (2023), 337% global rise post-October 7th, research showing educated communities 3x more effective. Create inspiring stories that highlight courage, community solidarity, and positive action without graphic content. Focus on hope, education, and the power of ordinary people standing up against hatred. Include historical context, weave in modern statistics when relevant, and emphasize lessons for today's 337% rise in incidents.";
    const userPrompt = "Generate an inspiring, educational story of resistance against antisemitism. Focus on hope, courage, and community action. Keep it trauma-sensitive and suitable for educational use. Include what we can learn from these heroes for today's challenges.";

    const openAIResponse = await analyzeTextWithOpenAI(userPrompt, env.OPEN_API_KEY_NEW, env.OPENAI_ORG_ID, systemPrompt);
    
    return new Response(
      JSON.stringify({ 
        story: openAIResponse.choices?.[0]?.message?.content || "No story available." 
      }),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Hero story error:", error);
    return new Response(
      JSON.stringify({ error: "Failed to get story. Please try again." }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

async function handleHostageCountRequest(env) {
  const now = Date.now();
  if (isCacheValid(HOSTAGE_CACHE, HOSTAGE_TTL_MS) && HOSTAGE_CACHE.total) {
    return {
      count: HOSTAGE_CACHE.total,
      citation: HOSTAGE_CACHE.citation,
      fetched: new Date(HOSTAGE_CACHE.updated).toISOString(),
      cached: true,
    };
  }
  try {
    const { count, citation } = await fetchHostageCountUsingWebSearch(
      env.OPEN_API_KEY_NEW,
      env.OPENAI_ORG_ID
    );
    if (count) {
      HOSTAGE_CACHE.total = count;
      HOSTAGE_CACHE.citation = citation;
      HOSTAGE_CACHE.updated = now;
      return {
        count,
        citation,
        fetched: new Date(now).toISOString(),
        cached: false,
      };
    }
    throw new Error('Invalid response');
  } catch (err) {
    console.error('Hostage count fetch failed:', err);
    if (HOSTAGE_CACHE.total) {
      return {
        count: HOSTAGE_CACHE.total,
        citation: HOSTAGE_CACHE.citation,
        fetched: new Date(HOSTAGE_CACHE.updated).toISOString(),
        cached: true,
        error: 'Using cached count',
      };
    }
    return {
      count: DEFAULT_HOSTAGE_COUNT,
      citation: '',
      fetched: new Date(now).toISOString(),
      cached: false,
      error: 'Failed to fetch data'
    };
  }
}

/*************************************************************
 * 5) MAIN WORKER CODE (EXPORT)
 *************************************************************/
async function handleHeroFormRequest(body, env) {
  try {
    console.log('[handleHeroFormRequest] Starting with body:', JSON.stringify(body));
    
    // Enhanced security: Validate and sanitize inputs
    const sanitizedBody = validateRequest(body, ['role', 'challenge']);
    const { role, challenge, location } = sanitizedBody;
    
    console.log('[handleHeroFormRequest] Sanitized inputs - role:', role, 'challenge:', challenge?.substring(0, 50) + '...');
    
    // Get current hostage count and calculate days since Oct 7
    const oct7Date = new Date('2023-10-07');
    const today = new Date();
    const daysSinceOct7 = Math.floor((today.getTime() - oct7Date.getTime()) / (1000 * 3600 * 24));
    
    // Get user location from request or fallback to headers
    const userCountry = location || body.headers?.['cf-ipcountry'] || 'unknown location';
    
    // Get current hostage count (fallback to 50 if not available) - Skip this for now to avoid delays
    let currentHostageCount = DEFAULT_HOSTAGE_COUNT;
    // Temporarily disabled to debug main issue
    /*
    try {
      // Quick API call with timeout to get updated count without slowing main response
      const hostagePromise = analyzeTextWithOpenAI(
        "Current Israeli hostages in Gaza count? Number only.",
        env.OPEN_API_KEY_NEW,
        env.OPENAI_ORG_ID,
        "Factual assistant. Respond with number only."
      );
      
      // Add timeout to prevent delays
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 3000)
      );
      
      const hostageResponse = await Promise.race([hostagePromise, timeoutPromise]);
      const hostageText = hostageResponse.choices?.[0]?.message?.content || "";
      const numberMatch = hostageText.match(/\d+/);
      if (numberMatch) currentHostageCount = numberMatch[0];
    } catch (e) {
      // Use fallback count if API is slow or fails
      console.log('[handleHeroFormRequest] Hostage count API failed:', e.message);
    }
    */

    const systemPrompt = `You are an AI expert in October 7th education, hostage advocacy, and antisemitism response. 

CURRENT CONTEXT (Day ${daysSinceOct7} since October 7th):
- ${currentHostageCount} hostages still held in Gaza
- User location: ${userCountry}
- ADL reports 337% rise in antisemitism post-October 7th globally
- 10,000+ US antisemitic incidents in 2023 (highest on record)

KEY FACTS: 1,200+ killed on October 7th, 240+ initially taken hostage, ongoing crisis affects global Jewish communities.

Help users with diverse needs: learning facts, countering false claims, expressing solidarity with hostages/victims, supporting families, and taking action to bring hostages home. Provide evidence-based information, cite credible sources (ADL, AJC, Israeli government), and offer specific, actionable guidance. 

IMPORTANT: Respond in PLAIN TEXT only. Do not use HTML tags, markdown, or any formatting. Use simple line breaks for paragraphs. Be concise but comprehensive (max 200 words).`;

    const userPrompt = `I am a ${role} and I need help with: ${challenge}. Please provide personalized guidance including current facts, response strategies, and action steps.`;

    console.log('[handleHeroFormRequest] Calling OpenAI API...');
    console.log('[handleHeroFormRequest] System prompt length:', systemPrompt.length);
    console.log('[handleHeroFormRequest] User prompt length:', userPrompt.length);
    console.log('[handleHeroFormRequest] API Key available:', !!env.OPEN_API_KEY_NEW);
    console.log('[handleHeroFormRequest] Org ID available:', !!env.OPENAI_ORG_ID);
    
    // Temporary bypass for debugging - remove this once issue is found
    let openAIResponse;
    if (challenge && challenge.includes('TEST_BYPASS')) {
      console.log('[handleHeroFormRequest] Using test bypass');
      openAIResponse = {
        choices: [{
          message: {
            content: `Test response for ${role} regarding: ${challenge.replace('TEST_BYPASS', '')}. This is a plain text test response without any HTML formatting.`
          }
        }]
      };
      console.log('[handleHeroFormRequest] Using test response');
    } else {
      openAIResponse = await analyzeTextWithOpenAI(userPrompt, env.OPEN_API_KEY_NEW, env.OPENAI_ORG_ID, systemPrompt);
    }
    console.log('[handleHeroFormRequest] OpenAI API response received:', openAIResponse ? 'success' : 'failed');
    console.log('[handleHeroFormRequest] Raw OpenAI response:', JSON.stringify(openAIResponse, null, 2));
    
    if (!openAIResponse) {
      throw new Error('No response from OpenAI API');
    }
    
    const responseContent = openAIResponse?.choices?.[0]?.message?.content || "No advice available.";
    console.log('[handleHeroFormRequest] Raw response content:', responseContent);
    console.log('[handleHeroFormRequest] Response content length:', responseContent.length);
    console.log('[handleHeroFormRequest] Response content preview:', responseContent.substring(0, 100));
    
    if (!responseContent || responseContent.trim() === '') {
      throw new Error('Empty response from OpenAI API');
    }
    
    // Ensure we return clean text without HTML formatting
    const cleanContent = responseContent
      .replace(/<br\s*\/?>/gi, '\n')  // Convert any br tags back to newlines
      .replace(/<[^>]*>/g, '')        // Remove any other HTML tags
      .trim();
    
    console.log('[handleHeroFormRequest] Returning JSON response with content type application/json');
    
    const jsonResponse = new Response(
      JSON.stringify({ 
        advice: cleanContent
      }),
      { headers: { "Content-Type": "application/json" } }
    );
    
    console.log('[handleHeroFormRequest] Response headers:', jsonResponse.headers.get('Content-Type'));
    return jsonResponse;
  } catch (error) {
    console.error("[handleHeroFormRequest] Error:", error.message, error.stack);
    return new Response(
      JSON.stringify({ 
        error: "Failed to get educational insights. Please try again.",
        details: error.message 
      }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

// NEW: Handler for the "Surprise Me" request
async function handleSurpriseEducationRequest(body, env) {
  try {
      // Enhanced security: Validate and sanitize inputs
      const sanitizedBody = validateRequest(body, ['role', 'challenge', 'originalAdvice']);
      const { role, challenge, originalAdvice } = sanitizedBody;

      // Enhanced prompt for creative educational analogies with researcher facts embedded
      const systemPrompt = `You are 'CreativeEducatorAI', an innovative antisemitism education specialist who uses nature analogies and scientific metaphors to make complex concepts memorable. Reference key facts: ADL's 337% rise post-October 7th, 10,000+ US incidents in 2023, AJC research on educated communities being 3x more effective. Your task is to provide creative analogies from nature, science, or everyday life that help explain antisemitism prevention concepts. Examples: 'What bees teach about community resistance to threats', 'How forest ecosystems show us community defense', 'What the immune system teaches about detecting and stopping hatred'. Frame responses as 'Nature's lesson for fighting hate' or 'What [X] teaches us about community resilience'. Be thoughtful, respectful, and pedagogically sound while being creative and memorable.`;
      const userPrompt = `I'm a ${role} learning about: '${challenge}'. I received this educational guidance: "${originalAdvice}". Now, give me a creative, unexpected way to understand or teach this concept.`;

      const openAIResponse = await analyzeTextWithOpenAI(userPrompt, env.OPEN_API_KEY_NEW, env.OPENAI_ORG_ID, systemPrompt);

      return new Response(
          JSON.stringify({ advice: openAIResponse.choices?.[0]?.message?.content || "Couldn't think of a creative approach right now." }),
          { headers: { "Content-Type": "application/json" } }
      );

  } catch (error) {
      console.error("Surprise education request error:", error);
      return new Response(JSON.stringify({ error: "Failed to generate creative educational approach." }), { status: 500, headers: { "Content-Type": "application/json" } });
  }
}

async function handleEducationCTARequest(body, env) {
  try {
    console.log('[handleEducationCTARequest] called with:', body);
    const { role, challenge, recommendation } = body;
    if (!role || !challenge || !recommendation) {
      return new Response(
        JSON.stringify({ error: "Role, educational topic, and recommendation are required." }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }
    const systemPrompt = "You are EducationAI, an expert in antisemitism education and learning engagement. Generate a concise, compelling, and actionable call-to-action phrase (in three to five words) for a button that specifically articulates how the educational recommendation can be implemented immediately. Focus on learning, sharing, or taking action against hatred.";
    const userPrompt = `I am a ${role} learning about ${challenge} and I just received this educational guidance: ${recommendation}. What is a clear call-to-action to drive educational impact? Example: If guidance mentions creating awareness, a good CTA might be: Start Awareness Campaign`;

    const openAIStream = await analyzeTextWithOpenAIStream(userPrompt, env.OPEN_API_KEY_NEW, env.OPENAI_ORG_ID, systemPrompt);
    console.log('[handleEducationCTARequest] OpenAI stream started');
    const encoder = new TextEncoder();
    let buffer = "";
    const stream = new ReadableStream({
      async start(controller) {
        const reader = openAIStream.getReader();
        let done, value;
        while (true) {
          ({ done, value } = await reader.read());
          if (done) break;
          buffer += new TextDecoder().decode(value);
          let lines = buffer.split("\n");
          buffer = lines.pop();
          for (const line of lines) {
            if (line.startsWith("data: ")) {
              const data = line.replace("data: ", "").trim();
              if (data === "[DONE]") {
                controller.close();
                return;
              }
              try {
                const json = JSON.parse(data);
                const content = json.choices?.[0]?.delta?.content;
                if (content) {
                  controller.enqueue(encoder.encode(content));
                }
              } catch (e) {}
            }
          }
        }
        controller.close();
      }
    });
    return new Response(stream, {
      headers: {
        "Content-Type": "text/plain; charset=utf-8",
        "Cache-Control": "no-cache"
      }
    });
  } catch (error) {
    console.error("Education CTA generation error:", error);
    return new Response(
      JSON.stringify({ error: "Failed to generate educational CTA. Please try again." }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

async function handleEducationModalRequest(body, env) {
  try {
    const { systemPrompt, userPrompt } = body;
    
    if (!systemPrompt || !userPrompt) {
      return new Response(
        JSON.stringify({ error: "System prompt and user prompt are required." }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // Enhanced system prompt for education focus
    const enhancedSystemPrompt = systemPrompt.includes("EducationAI") ? systemPrompt : 
      `You are EducationAI, an expert in antisemitism education. ${systemPrompt} Focus on providing educational value, citing credible sources like ADL/AJC, and promoting understanding and action against hatred.`;

    const openAIResponse = await analyzeTextWithOpenAI(userPrompt, env.OPEN_API_KEY_NEW, env.OPENAI_ORG_ID, enhancedSystemPrompt);
    
    return new Response(
      JSON.stringify({ 
        content: openAIResponse.choices?.[0]?.message?.content || "No educational content available." 
      }),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Education modal request error:", error);
    return new Response(
      JSON.stringify({ error: "Failed to process educational request. Please try again." }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

export default {
  async fetch(request, env) {
    try {
      const requiredVars = [
        "Google_Document_AI_Processor_Prediction_Endpoint",
        "Google-Service-Account-FINAL",
        "OPEN_API_KEY_NEW",
        "OPENAI_ORG_ID"
      ];
      const missingVars = requiredVars.filter(varName => !env[varName]);
      if (missingVars.length > 0) {
        return new Response(
          JSON.stringify({ error: `Missing environment variables: ${missingVars.join(', ')}` }),
          { status: 500, headers: { "Content-Type": "application/json" } }
        );
      }

      const url = new URL(request.url);

      if (request.method === "GET" && url.pathname === "/api/hostage-count") {
        const data = await handleHostageCountRequest(env);
        return new Response(
          JSON.stringify(data),
          { headers: { "Content-Type": "application/json", "Access-Control-Allow-Origin": "*" } }
        );
      }

      if (request.method === "GET" && url.pathname === "/api/latest-hostage-news") {
        const countParam = url.searchParams.get('count');
        const news = await handleLatestHostageNewsRequest(env, countParam ? parseInt(countParam, 10) : undefined);
        return new Response(
          JSON.stringify(news),
          {
            headers: {
              "Content-Type": "application/json",
              "Access-Control-Allow-Origin": "*",
            },
          }
        );
      }

      if (request.method === "GET") {
        if (url.pathname === "/timeline") {
          return new Response(getTimelinePage(), {
            headers: { "Content-Type": "text/html" }
          });
        }
        return new Response(getHtmlResponse(), {
          headers: { "Content-Type": "text/html" }
        });
      }

      if (request.method === "POST") {
        const contentType = request.headers.get("Content-Type") || "";

        // Handle API endpoints
        if (url.pathname === "/api/ask") {
          const body = await request.json();
          return await handleAskRequest(body, env);
        }

        if (url.pathname === "/api/hero-story") {
          const body = await request.json();
          return await handleHeroStoryRequest(body, env);
        }

        if (url.pathname === "/api/location-insights") {
          const body = await request.json();
          return await handleLocationQuery(body.location, env);
        }

        if (url.pathname === "/api/analyze-file") {
          return await handleFileUpload(request, env);
        }

        if (contentType.startsWith("multipart/form-data")) {
          return await handleFileUpload(request, env);
        }

        if (contentType.includes("application/json")) {
          let body;
          try {
            body = await request.json();
          } catch (e) {
            return new Response(
              JSON.stringify({ error: "Invalid JSON payload." }),
              { status: 400, headers: { "Content-Type": "application/json" } }
            );
          }

          if (body.location) {
            return await handleLocationQuery(body.location, env);
          }

          if (body.systemPrompt && body.userPrompt) {
            return await handleEducationModalRequest(body, env);
          }

          // EDUCATION ROUTING LOGIC
          if (body.role && body.challenge) {
            console.log('[Main Router] Routing to education handlers - role:', body.role, 'challenge:', body.challenge?.substring(0, 50));
            if (body.surprise) { // Creative education approach
                console.log('[Main Router] Routing to surprise education');
                return await handleSurpriseEducationRequest(body, env);
            }
            if (body.cta && body.recommendation) { // Educational CTA route
              console.log('[Main Router] Routing to CTA education');
              return await handleEducationCTARequest(body, env);
            }
            // Default education query
            console.log('[Main Router] Routing to hero form request');
            const heroResponse = await handleHeroFormRequest(body, env);
            console.log('[Main Router] Hero form response - content type:', heroResponse.headers.get('Content-Type'));
            return heroResponse;
          }

          return new Response(
            JSON.stringify({ error: "Invalid JSON payload." }),
            { status: 400, headers: { "Content-Type": "application/json" } }
          );
        }

        return new Response(
          JSON.stringify({ error: "Unsupported POST request format." }),
          { status: 400, headers: { "Content-Type": "application/json" } }
        );
      }

      return new Response(
        JSON.stringify({ error: "Invalid request method. Use GET or POST." }),
        { status: 405, headers: { "Content-Type": "application/json" } }
      );
    } catch (err) {
      return new Response(
        JSON.stringify({ error: "An unexpected error occurred.", details: err.message }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }
  }
};